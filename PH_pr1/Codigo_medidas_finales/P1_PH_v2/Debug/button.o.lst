   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 18, 4
  11              		.file	"button.c"
  21              	.Ltext0:
  22              		.file 1 "../button.c"
 1967              		.align	2
 1968              		.global	Eint4567_ISR
 1970              	Eint4567_ISR:
 1971              	.LFB0:
   1:../button.c   **** /*********************************************************************************************
   2:../button.c   **** * Fichero:	button.c
   3:../button.c   **** * Autor:
   4:../button.c   **** * Descrip:	Funciones de manejo de los pulsadores (EINT6-7)
   5:../button.c   **** * Version:
   6:../button.c   **** *********************************************************************************************/
   7:../button.c   **** 
   8:../button.c   **** /*--- ficheros de cabecera ---*/
   9:../button.c   **** #include "button.h"
  10:../button.c   **** #include "8led.h"
  11:../button.c   **** #include "44blib.h"
  12:../button.c   **** #include "44b.h"
  13:../button.c   **** #include "def.h"
  14:../button.c   **** 
  15:../button.c   **** /*--- variables globales del módulo ---*/
  16:../button.c   **** /* int_count la utilizamos para sacar un número por el 8led.
  17:../button.c   ****   Cuando se pulsa un botón sumamos y con el otro restamos. ¡A veces hay rebotes! */
  18:../button.c   **** static unsigned int int_count = 0;
  19:../button.c   **** 
  20:../button.c   **** /* declaración de función que es rutina de servicio de interrupción
  21:../button.c   ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  22:../button.c   **** void Eint4567_ISR(void) __attribute__((interrupt("IRQ")));
  23:../button.c   **** 
  24:../button.c   **** /*--- codigo de funciones ---*/
  25:../button.c   **** void Eint4567_ISR(void)
  26:../button.c   **** {
 1972              		.loc 1 26 0
 1973              		.cfi_startproc
 1974              		@ Interrupt Service Routine.
 1975              		@ args = 0, pretend = 0, frame = 0
 1976              		@ frame_needed = 1, uses_anonymous_args = 0
 1977 0000 04C02DE5 		str	ip, [sp, #-4]!
 1978 0004 0DC0A0E1 		mov	ip, sp
 1979              	.LCFI0:
 1980              		.cfi_def_cfa_register 12
 1981 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
  27:../button.c   **** 	/* Identificar la interrupcion (hay dos pulsadores)*/
  28:../button.c   **** 	int which_int = rEXTINTPND;
 1982              		.loc 1 28 0
 1983 000c 6C309FE5 		ldr	r3, .L7
 1984              		.cfi_offset 14, -8
 1985              		.cfi_offset 13, -12
 1986              		.cfi_offset 11, -16
 1987              		.cfi_offset 3, -20
 1988              		.cfi_offset 2, -24
 1989              		.cfi_offset 1, -28
 1990              		.cfi_offset 0, -32
 1991 0010 542093E5 		ldr	r2, [r3, #84]
 1992              	.LVL0:
  29:../button.c   **** 	switch (which_int)
 1993              		.loc 1 29 0
 1994 0014 040052E3 		cmp	r2, #4
  26:../button.c   **** {
 1995              		.loc 1 26 0
 1996 0018 04B04CE2 		sub	fp, ip, #4
 1997              	.LCFI1:
 1998              		.cfi_def_cfa 11, 4
 1999 001c 60309FE5 		ldr	r3, .L7+4
 2000              		.loc 1 29 0
 2001 0020 0200000A 		beq	.L3
 2002 0024 080052E3 		cmp	r2, #8
 2003 0028 0600001A 		bne	.L2
 2004 002c 020000EA 		b	.L6
 2005              	.L3:
  30:../button.c   **** 	{
  31:../button.c   **** 		case 4:
  32:../button.c   **** 			int_count++; // incrementamos el contador
 2006              		.loc 1 32 0
 2007 0030 002093E5 		ldr	r2, [r3, #0]
 2008              	.LVL1:
 2009 0034 012082E2 		add	r2, r2, #1
 2010 0038 010000EA 		b	.L5
 2011              	.LVL2:
 2012              	.L6:
  33:../button.c   **** 			break;
  34:../button.c   **** 		case 8:
  35:../button.c   **** 			int_count--; // decrementamos el contador
 2013              		.loc 1 35 0
 2014 003c 002093E5 		ldr	r2, [r3, #0]
 2015              	.LVL3:
 2016 0040 012042E2 		sub	r2, r2, #1
 2017              	.L5:
 2018 0044 002083E5 		str	r2, [r3, #0]
 2019              	.L2:
  36:../button.c   **** 			break;
  37:../button.c   **** 		default:
  38:../button.c   **** 			break;
  39:../button.c   **** 	}
  40:../button.c   **** 	// }
  41:../button.c   **** 	D8Led_symbol(int_count & 0x000f); // sacamos el valor por pantalla (módulo 16)
 2020              		.loc 1 41 0
 2021 0048 000093E5 		ldr	r0, [r3, #0]
 2022 004c 0F0000E2 		and	r0, r0, #15
 2023 0050 FEFFFFEB 		bl	D8Led_symbol
  42:../button.c   **** 
  43:../button.c   **** 	/* Finalizar ISR */
  44:../button.c   **** 	rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
 2024              		.loc 1 44 0
 2025 0054 24309FE5 		ldr	r3, .L7
 2026 0058 0F20A0E3 		mov	r2, #15
 2027 005c 542083E5 		str	r2, [r3, #84]
  45:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2028              		.loc 1 45 0
 2029 0060 0E3883E2 		add	r3, r3, #917504
 2030 0064 242093E5 		ldr	r2, [r3, #36]
 2031 0068 022682E3 		orr	r2, r2, #2097152
 2032 006c 242083E5 		str	r2, [r3, #36]
  46:../button.c   **** }
 2033              		.loc 1 46 0
 2034 0070 1CD04BE2 		sub	sp, fp, #28
 2035 0074 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2036 0078 04C09DE4 		ldmfd	sp!, {ip}
 2037 007c 04F05EE2 		subs	pc, lr, #4
 2038              	.L8:
 2039              		.align	2
 2040              	.L7:
 2041 0080 0000D201 		.word	30539776
 2042 0084 00000000 		.word	.LANCHOR0
 2043              		.cfi_endproc
 2044              	.LFE0:
 2046              		.align	2
 2047              		.global	Eint4567_init
 2049              	Eint4567_init:
 2050              	.LFB1:
  47:../button.c   **** 
  48:../button.c   **** void Eint4567_init(void)
  49:../button.c   **** {
 2051              		.loc 1 49 0
 2052              		.cfi_startproc
 2053              		@ Function supports interworking.
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056              		@ link register save eliminated.
  50:../button.c   **** 	/* Configuracion del controlador de interrupciones. Estos registros están definidos en 44b.h */
  51:../button.c   **** 	rI_ISPC    = 0x3ffffff;	// Borra INTPND escribiendo 1s en I_ISPC
 2057              		.loc 1 51 0
 2058 0088 1E36A0E3 		mov	r3, #31457280
 2059 008c 3F23E0E3 		mvn	r2, #-67108864
  49:../button.c   **** {
 2060              		.loc 1 49 0
 2061 0090 04402DE5 		str	r4, [sp, #-4]!
 2062              	.LCFI2:
 2063              		.cfi_def_cfa_offset 4
 2064              		.loc 1 51 0
 2065 0094 242083E5 		str	r2, [r3, #36]
  52:../button.c   **** 	rEXTINTPND = 0xf;       // Borra EXTINTPND escribiendo 1s en el propio registro
 2066              		.loc 1 52 0
 2067 0098 60209FE5 		ldr	r2, .L10
  53:../button.c   **** 	rINTMOD    = 0x0;		// Configura las linas como de tipo IRQ
 2068              		.loc 1 53 0
 2069 009c 0010A0E3 		mov	r1, #0
  52:../button.c   **** 	rEXTINTPND = 0xf;       // Borra EXTINTPND escribiendo 1s en el propio registro
 2070              		.loc 1 52 0
 2071 00a0 0F00A0E3 		mov	r0, #15
  54:../button.c   **** 	rINTCON    = 0x1;	    // Habilita int. vectorizadas y la linea IRQ (FIQ no)
 2072              		.loc 1 54 0
 2073 00a4 01C0A0E3 		mov	ip, #1
  52:../button.c   **** 	rEXTINTPND = 0xf;       // Borra EXTINTPND escribiendo 1s en el propio registro
 2074              		.loc 1 52 0
 2075 00a8 540082E5 		str	r0, [r2, #84]
  53:../button.c   **** 	rINTMOD    = 0x0;		// Configura las linas como de tipo IRQ
 2076              		.loc 1 53 0
 2077 00ac 081083E5 		str	r1, [r3, #8]
 2078              		.loc 1 54 0
 2079 00b0 00C083E5 		str	ip, [r3, #0]
  55:../button.c   **** 	rINTMSK    &= ~(BIT_EINT4567); // habilitamos interrupcion linea eint4567 en vector de mascaras
 2080              		.loc 1 55 0
 2081 00b4 0CC093E5 		ldr	ip, [r3, #12]
 2082 00b8 02C6CCE3 		bic	ip, ip, #2097152
 2083 00bc 0CC083E5 		str	ip, [r3, #12]
  56:../button.c   **** 
  57:../button.c   **** 	/* Establece la rutina de servicio para Eint4567 */
  58:../button.c   **** 	pISR_EINT4567 = (int) Eint4567_ISR;
 2084              		.loc 1 58 0
 2085 00c0 3C409FE5 		ldr	r4, .L10+4
 2086              		.cfi_offset 4, -4
 2087 00c4 3CC09FE5 		ldr	ip, .L10+8
 2088 00c8 8B400CE5 		str	r4, [ip, #-139]
  59:../button.c   **** 
  60:../button.c   **** 	/* Configuracion del puerto G */
  61:../button.c   **** 	rPCONG  = 0xffff;        		// Establece la funcion de los pines (EINT0-7)
 2089              		.loc 1 61 0
 2090 00cc 38C09FE5 		ldr	ip, .L10+12
 2091 00d0 40C082E5 		str	ip, [r2, #64]
  62:../button.c   **** 	rPUPG   = 0x0;                  // Habilita el "pull up" del puerto
 2092              		.loc 1 62 0
 2093 00d4 481082E5 		str	r1, [r2, #72]
  63:../button.c   **** 	rEXTINT = rEXTINT | 0x22222222;   // Configura las lineas de int. como de flanco de bajada
 2094              		.loc 1 63 0
 2095 00d8 30109FE5 		ldr	r1, .L10+16
 2096 00dc 50C092E5 		ldr	ip, [r2, #80]
 2097 00e0 01108CE1 		orr	r1, ip, r1
 2098 00e4 501082E5 		str	r1, [r2, #80]
  64:../button.c   **** 
  65:../button.c   **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
  66:../button.c   **** 	rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
 2099              		.loc 1 66 0
 2100 00e8 540082E5 		str	r0, [r2, #84]
  67:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2101              		.loc 1 67 0
 2102 00ec 242093E5 		ldr	r2, [r3, #36]
 2103 00f0 022682E3 		orr	r2, r2, #2097152
 2104 00f4 242083E5 		str	r2, [r3, #36]
  68:../button.c   **** }
 2105              		.loc 1 68 0
 2106 00f8 04409DE4 		ldmfd	sp!, {r4}
 2107 00fc 1EFF2FE1 		bx	lr
 2108              	.L11:
 2109              		.align	2
 2110              	.L10:
 2111 0100 0000D201 		.word	30539776
 2112 0104 00000000 		.word	Eint4567_ISR
 2113 0108 FFFF7F0C 		.word	209715199
 2114 010c FFFF0000 		.word	65535
 2115 0110 22222222 		.word	572662306
 2116              		.cfi_endproc
 2117              	.LFE1:
 2119              		.bss
 2120              		.align	2
 2121              		.set	.LANCHOR0,. + 0
 2124              	int_count:
 2125 0000 00000000 		.space	4
 2126              		.text
 2127              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 button.c
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:1967   .text:00000000 $a
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:1970   .text:00000000 Eint4567_ISR
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:2041   .text:00000080 $d
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:2046   .text:00000088 $a
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:2049   .text:00000088 Eint4567_init
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:2111   .text:00000100 $d
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:2120   .bss:00000000 $d
C:\Users\guest\AppData\Local\Temp\ccRR45ww.s:2124   .bss:00000000 int_count
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
D8Led_symbol
