   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 2132              		.align	2
 2135              	switch_leds:
 2136 0000 00000000 		.space	4
 2137              		.text
 2138              		.align	2
 2139              		.global	timer_ISR
 2141              	timer_ISR:
 2142              	.LFB0:
   1:../timer.c    **** /*********************************************************************************************
   2:../timer.c    **** * Fichero:		timer.c
   3:../timer.c    **** * Autor:
   4:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   5:../timer.c    **** * Version:
   6:../timer.c    **** *********************************************************************************************/
   7:../timer.c    **** 
   8:../timer.c    **** /*--- ficheros de cabecera ---*/
   9:../timer.c    **** #include "timer.h"
  10:../timer.c    **** #include "44b.h"
  11:../timer.c    **** #include "44blib.h"
  12:../timer.c    **** #include "pila_depuracion.h"
  13:../timer.c    **** /*--- variables globales ---*/
  14:../timer.c    **** int switch_leds = 0;
  15:../timer.c    **** 
  16:../timer.c    **** /* declaración de función que es rutina de servicio de interrupción
  17:../timer.c    ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  18:../timer.c    **** void timer_ISR(void) __attribute__((interrupt("IRQ")));
  19:../timer.c    **** 
  20:../timer.c    **** /*--- codigo de las funciones ---*/
  21:../timer.c    **** void timer_ISR(void)
  22:../timer.c    **** {
 2143              		.loc 1 22 0
 2144              		.cfi_startproc
 2145              		@ Interrupt Service Routine.
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 1, uses_anonymous_args = 0
 2148 0000 04C02DE5 		str	ip, [sp, #-4]!
 2149 0004 0DC0A0E1 		mov	ip, sp
 2150              	.LCFI0:
 2151              		.cfi_def_cfa_register 12
 2152 0008 0CD82DE9 		stmfd	sp!, {r2, r3, fp, ip, lr, pc}
 2153 000c 04B04CE2 		sub	fp, ip, #4
 2154              		.cfi_offset 14, -8
 2155              		.cfi_offset 13, -12
 2156              		.cfi_offset 11, -16
 2157              		.cfi_offset 3, -20
 2158              		.cfi_offset 2, -24
 2159              	.LCFI1:
 2160              		.cfi_def_cfa 11, 4
  23:../timer.c    **** 	switch_leds = 1;
 2161              		.loc 1 23 0
 2162 0010 28309FE5 		ldr	r3, .L2
 2163 0014 0120A0E3 		mov	r2, #1
 2164 0018 002083E5 		str	r2, [r3, #0]
  24:../timer.c    **** 	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
  25:../timer.c    **** 	rI_ISPC |= BIT_TIMER0; // BIT_TIMER0 está definido en 44b.h y pone un uno en el bit 13 que correpo
 2165              		.loc 1 25 0
 2166 001c 20309FE5 		ldr	r3, .L2+4
 2167 0020 1C209FE5 		ldr	r2, .L2+4
 2168 0024 002092E5 		ldr	r2, [r2, #0]
 2169 0028 022A82E3 		orr	r2, r2, #8192
 2170 002c 002083E5 		str	r2, [r3, #0]
  26:../timer.c    **** }
 2171              		.loc 1 26 0
 2172 0030 14D04BE2 		sub	sp, fp, #20
 2173 0034 0C689DE8 		ldmfd	sp, {r2, r3, fp, sp, lr}
 2174 0038 04C09DE4 		ldmfd	sp!, {ip}
 2175 003c 04F05EE2 		subs	pc, lr, #4
 2176              	.L3:
 2177              		.align	2
 2178              	.L2:
 2179 0040 00000000 		.word	switch_leds
 2180 0044 2400E001 		.word	31457316
 2181              		.cfi_endproc
 2182              	.LFE0:
 2184              		.align	2
 2185              		.global	timer_init
 2187              	timer_init:
 2188              	.LFB1:
  27:../timer.c    **** 
  28:../timer.c    **** void timer_init(void)
  29:../timer.c    **** {
 2189              		.loc 1 29 0
 2190              		.cfi_startproc
 2191              		@ Function supports interworking.
 2192              		@ args = 0, pretend = 0, frame = 0
 2193              		@ frame_needed = 1, uses_anonymous_args = 0
 2194 0048 0DC0A0E1 		mov	ip, sp
 2195              	.LCFI2:
 2196              		.cfi_def_cfa_register 12
 2197 004c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2198 0050 04B04CE2 		sub	fp, ip, #4
 2199              		.cfi_offset 14, -8
 2200              		.cfi_offset 13, -12
 2201              		.cfi_offset 11, -16
 2202              	.LCFI3:
 2203              		.cfi_def_cfa 11, 4
  30:../timer.c    **** 	/* Configuraion controlador de interrupciones */
  31:../timer.c    **** 	rINTMOD &= ~(BIT_TIMER0); // Configura las linas de timer0 como de tipo IRQ
 2204              		.loc 1 31 0
 2205 0054 DC309FE5 		ldr	r3, .L5
 2206 0058 D8209FE5 		ldr	r2, .L5
 2207 005c 002092E5 		ldr	r2, [r2, #0]
 2208 0060 022AC2E3 		bic	r2, r2, #8192
 2209 0064 002083E5 		str	r2, [r3, #0]
  32:../timer.c    **** 	rINTCON &= 0x1; // Habilita int. vectorizadas y la linea IRQ (FIQ la deja como estuviera)
 2210              		.loc 1 32 0
 2211 0068 1E36A0E3 		mov	r3, #31457280
 2212 006c 1E26A0E3 		mov	r2, #31457280
 2213 0070 002092E5 		ldr	r2, [r2, #0]
 2214 0074 012002E2 		and	r2, r2, #1
 2215 0078 002083E5 		str	r2, [r3, #0]
  33:../timer.c    **** 	rINTMSK &= ~(BIT_TIMER0); // habilitamos en vector de mascaras de interrupcion el Timer0 (bits 26 
 2216              		.loc 1 33 0
 2217 007c B8309FE5 		ldr	r3, .L5+4
 2218 0080 B4209FE5 		ldr	r2, .L5+4
 2219 0084 002092E5 		ldr	r2, [r2, #0]
 2220 0088 022AC2E3 		bic	r2, r2, #8192
 2221 008c 002083E5 		str	r2, [r3, #0]
  34:../timer.c    **** 
  35:../timer.c    **** 	/* Establece la rutina de servicio para TIMER0 */
  36:../timer.c    **** 	pISR_TIMER0 = (unsigned) timer_ISR;
 2222              		.loc 1 36 0
 2223 0090 A8309FE5 		ldr	r3, .L5+8
 2224 0094 A8209FE5 		ldr	r2, .L5+12
 2225 0098 002083E5 		str	r2, [r3, #0]
  37:../timer.c    **** 
  38:../timer.c    **** 	/* Configura el Timer0 */
  39:../timer.c    **** 	rTCFG0 |= 0xff; 		// ajusta el preescalado del timer 0 a 255
 2226              		.loc 1 39 0
 2227 009c A4309FE5 		ldr	r3, .L5+16
 2228 00a0 A0209FE5 		ldr	r2, .L5+16
 2229 00a4 002092E5 		ldr	r2, [r2, #0]
 2230 00a8 FF2082E3 		orr	r2, r2, #255
 2231 00ac 002083E5 		str	r2, [r3, #0]
  40:../timer.c    **** 	rTCFG1 &= 0xffffff0; 	// selecciona la entrada del mux que proporciona el reloj 0. La 00 correspon
 2232              		.loc 1 40 0
 2233 00b0 94309FE5 		ldr	r3, .L5+20
 2234 00b4 90209FE5 		ldr	r2, .L5+20
 2235 00b8 002092E5 		ldr	r2, [r2, #0]
 2236 00bc FF22C2E3 		bic	r2, r2, #-268435441
 2237 00c0 002083E5 		str	r2, [r3, #0]
  41:../timer.c    **** 	rTCNTB0 = 65535;		// valor inicial de cuenta (la cuenta es descendente)
 2238              		.loc 1 41 0
 2239 00c4 84309FE5 		ldr	r3, .L5+24
 2240 00c8 84209FE5 		ldr	r2, .L5+28
 2241 00cc 002083E5 		str	r2, [r3, #0]
  42:../timer.c    **** 	rTCMPB0 = 12800;		// valor de comparación
 2242              		.loc 1 42 0
 2243 00d0 80309FE5 		ldr	r3, .L5+32
 2244 00d4 322CA0E3 		mov	r2, #12800
 2245 00d8 002083E5 		str	r2, [r3, #0]
  43:../timer.c    **** 	/* establecer update=manual (bit 1) + inverter=on (¿? será inverter off un cero en el bit 2 pone e
  44:../timer.c    **** 	rTCON &= 0xfffffff0;
 2246              		.loc 1 44 0
 2247 00dc 78309FE5 		ldr	r3, .L5+36
 2248 00e0 74209FE5 		ldr	r2, .L5+36
 2249 00e4 002092E5 		ldr	r2, [r2, #0]
 2250 00e8 0F20C2E3 		bic	r2, r2, #15
 2251 00ec 002083E5 		str	r2, [r3, #0]
  45:../timer.c    **** 	rTCON |= 0x00000002;
 2252              		.loc 1 45 0
 2253 00f0 64309FE5 		ldr	r3, .L5+36
 2254 00f4 60209FE5 		ldr	r2, .L5+36
 2255 00f8 002092E5 		ldr	r2, [r2, #0]
 2256 00fc 022082E3 		orr	r2, r2, #2
 2257 0100 002083E5 		str	r2, [r3, #0]
  46:../timer.c    **** 	/* iniciar timer (bit 0) con auto-reload (bit 3)*/
  47:../timer.c    **** 	rTCON &= 0xfffffff0;
 2258              		.loc 1 47 0
 2259 0104 50309FE5 		ldr	r3, .L5+36
 2260 0108 4C209FE5 		ldr	r2, .L5+36
 2261 010c 002092E5 		ldr	r2, [r2, #0]
 2262 0110 0F20C2E3 		bic	r2, r2, #15
 2263 0114 002083E5 		str	r2, [r3, #0]
  48:../timer.c    **** 	rTCON |= 0x00000009;
 2264              		.loc 1 48 0
 2265 0118 3C309FE5 		ldr	r3, .L5+36
 2266 011c 38209FE5 		ldr	r2, .L5+36
 2267 0120 002092E5 		ldr	r2, [r2, #0]
 2268 0124 092082E3 		orr	r2, r2, #9
 2269 0128 002083E5 		str	r2, [r3, #0]
  49:../timer.c    **** }
 2270              		.loc 1 49 0
 2271 012c 0CD04BE2 		sub	sp, fp, #12
 2272 0130 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2273 0134 1EFF2FE1 		bx	lr
 2274              	.L6:
 2275              		.align	2
 2276              	.L5:
 2277 0138 0800E001 		.word	31457288
 2278 013c 0C00E001 		.word	31457292
 2279 0140 54FF7F0C 		.word	209715028
 2280 0144 00000000 		.word	timer_ISR
 2281 0148 0000D501 		.word	30736384
 2282 014c 0400D501 		.word	30736388
 2283 0150 0C00D501 		.word	30736396
 2284 0154 FFFF0000 		.word	65535
 2285 0158 1000D501 		.word	30736400
 2286 015c 0800D501 		.word	30736392
 2287              		.cfi_endproc
 2288              	.LFE1:
 2290              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2135   .bss:00000000 switch_leds
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2132   .bss:00000000 $d
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2138   .text:00000000 $a
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2141   .text:00000000 timer_ISR
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2179   .text:00000040 $d
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2184   .text:00000048 $a
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2187   .text:00000048 timer_init
C:\Users\guest\AppData\Local\Temp\ccx67T8N.s:2277   .text:00000138 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
