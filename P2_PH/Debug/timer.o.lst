   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 2151              		.align	2
 2152              	timer2_num_int:
 2153 0000 00000000 		.space	4
 2154              		.text
 2155              		.align	2
 2156              		.global	timer_ISR
 2158              	timer_ISR:
 2159              	.LFB0:
   1:../timer.c    **** /*********************************************************************************************
   2:../timer.c    **** * Fichero:		timer.c
   3:../timer.c    **** * Autor:
   4:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   5:../timer.c    **** * Version:		Modificado para el latido de la práctica 2.
   6:../timer.c    **** *********************************************************************************************/
   7:../timer.c    **** 
   8:../timer.c    **** /*--- ficheros de cabecera ---*/
   9:../timer.c    **** #include "timer.h"
  10:../timer.c    **** #include "44b.h"
  11:../timer.c    **** #include "44blib.h"
  12:../timer.c    **** #include "cola_depuracion.h"
  13:../timer.c    **** #include "codigos_eventos.h"
  14:../timer.c    **** /*--- variables globales ---*/
  15:../timer.c    **** 
  16:../timer.c    **** /* declaración de función que es rutina de servicio de interrupción
  17:../timer.c    ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  18:../timer.c    **** void timer_ISR(void) __attribute__((interrupt("IRQ")));
  19:../timer.c    **** 
  20:../timer.c    **** /*--- codigo de las funciones ---*/
  21:../timer.c    **** void timer_ISR(void)
  22:../timer.c    **** {
 2160              		.loc 1 22 0
 2161              		.cfi_startproc
 2162              		@ Interrupt Service Routine.
 2163              		@ args = 0, pretend = 0, frame = 0
 2164              		@ frame_needed = 1, uses_anonymous_args = 0
 2165 0000 04C02DE5 		str	ip, [sp, #-4]!
 2166 0004 0DC0A0E1 		mov	ip, sp
 2167              	.LCFI0:
 2168              		.cfi_def_cfa_register 12
 2169 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2170 000c 04B04CE2 		sub	fp, ip, #4
 2171              		.cfi_offset 14, -8
 2172              		.cfi_offset 13, -12
 2173              		.cfi_offset 11, -16
 2174              		.cfi_offset 3, -20
 2175              		.cfi_offset 2, -24
 2176              		.cfi_offset 1, -28
 2177              		.cfi_offset 0, -32
 2178              	.LCFI1:
 2179              		.cfi_def_cfa 11, 4
  23:../timer.c    **** 	push_debug(ev_tick_timer0, no_info);		//TODO recuerda quitarlo cuando tengas que probar más cosas
 2180              		.loc 1 23 0
 2181 0010 FF00A0E3 		mov	r0, #255
 2182 0014 24109FE5 		ldr	r1, .L2
 2183 0018 FEFFFFEB 		bl	push_debug
  24:../timer.c    **** 
  25:../timer.c    **** 	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
  26:../timer.c    **** 	rI_ISPC |= BIT_TIMER0; // BIT_TIMER0 está definido en 44b.h y pone un uno en el bit 13 que correpo
 2184              		.loc 1 26 0
 2185 001c 20309FE5 		ldr	r3, .L2+4
 2186 0020 1C209FE5 		ldr	r2, .L2+4
 2187 0024 002092E5 		ldr	r2, [r2, #0]
 2188 0028 022A82E3 		orr	r2, r2, #8192
 2189 002c 002083E5 		str	r2, [r3, #0]
  27:../timer.c    **** }
 2190              		.loc 1 27 0
 2191 0030 1CD04BE2 		sub	sp, fp, #28
 2192 0034 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2193 0038 04C09DE4 		ldmfd	sp!, {ip}
 2194 003c 04F05EE2 		subs	pc, lr, #4
 2195              	.L3:
 2196              		.align	2
 2197              	.L2:
 2198 0040 AAAAAAAA 		.word	-1431655766
 2199 0044 2400E001 		.word	31457316
 2200              		.cfi_endproc
 2201              	.LFE0:
 2203              		.align	2
 2204              		.global	timer_init
 2206              	timer_init:
 2207              	.LFB1:
  28:../timer.c    **** 
  29:../timer.c    **** void timer_init(void)
  30:../timer.c    **** {
 2208              		.loc 1 30 0
 2209              		.cfi_startproc
 2210              		@ Function supports interworking.
 2211              		@ args = 0, pretend = 0, frame = 0
 2212              		@ frame_needed = 1, uses_anonymous_args = 0
 2213 0048 0DC0A0E1 		mov	ip, sp
 2214              	.LCFI2:
 2215              		.cfi_def_cfa_register 12
 2216 004c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2217 0050 04B04CE2 		sub	fp, ip, #4
 2218              		.cfi_offset 14, -8
 2219              		.cfi_offset 13, -12
 2220              		.cfi_offset 11, -16
 2221              	.LCFI3:
 2222              		.cfi_def_cfa 11, 4
  31:../timer.c    **** 	/* Configuraion controlador de interrupciones */
  32:../timer.c    **** 	rINTMOD &= ~(BIT_TIMER0); // Configura las linas de timer0 como de tipo IRQ
 2223              		.loc 1 32 0
 2224 0054 0C319FE5 		ldr	r3, .L5
 2225 0058 08219FE5 		ldr	r2, .L5
 2226 005c 002092E5 		ldr	r2, [r2, #0]
 2227 0060 022AC2E3 		bic	r2, r2, #8192
 2228 0064 002083E5 		str	r2, [r3, #0]
  33:../timer.c    **** 	rINTCON &= 0x1; // Habilita int. vectorizadas y la linea IRQ (FIQ la deja como estuviera)
 2229              		.loc 1 33 0
 2230 0068 1E36A0E3 		mov	r3, #31457280
 2231 006c 1E26A0E3 		mov	r2, #31457280
 2232 0070 002092E5 		ldr	r2, [r2, #0]
 2233 0074 012002E2 		and	r2, r2, #1
 2234 0078 002083E5 		str	r2, [r3, #0]
  34:../timer.c    **** 	rINTMSK &= ~(BIT_TIMER0); // habilitamos en vector de mascaras de interrupcion el Timer0 (bits 26 
 2235              		.loc 1 34 0
 2236 007c E8309FE5 		ldr	r3, .L5+4
 2237 0080 E4209FE5 		ldr	r2, .L5+4
 2238 0084 002092E5 		ldr	r2, [r2, #0]
 2239 0088 022AC2E3 		bic	r2, r2, #8192
 2240 008c 002083E5 		str	r2, [r3, #0]
  35:../timer.c    **** 
  36:../timer.c    **** 	/* Establece la rutina de servicio para TIMER0 */
  37:../timer.c    **** 	pISR_TIMER0 = (unsigned) timer_ISR;
 2241              		.loc 1 37 0
 2242 0090 D8309FE5 		ldr	r3, .L5+8
 2243 0094 D8209FE5 		ldr	r2, .L5+12
 2244 0098 002083E5 		str	r2, [r3, #0]
  38:../timer.c    **** 
  39:../timer.c    **** 	/* Configura el Timer0 a resolución de 1e-4 segundos para el latido */
  40:../timer.c    **** 	rTCFG0 &= 0xffffff00;
 2245              		.loc 1 40 0
 2246 009c D4309FE5 		ldr	r3, .L5+16
 2247 00a0 D0209FE5 		ldr	r2, .L5+16
 2248 00a4 002092E5 		ldr	r2, [r2, #0]
 2249 00a8 FF20C2E3 		bic	r2, r2, #255
 2250 00ac 002083E5 		str	r2, [r3, #0]
  41:../timer.c    **** 	rTCFG0 |= 0xc7; 		// ajusta el preescalado del timer 0 a 199 (200 de forma interna) para el latido
 2251              		.loc 1 41 0
 2252 00b0 C0309FE5 		ldr	r3, .L5+16
 2253 00b4 BC209FE5 		ldr	r2, .L5+16
 2254 00b8 002092E5 		ldr	r2, [r2, #0]
 2255 00bc C72082E3 		orr	r2, r2, #199
 2256 00c0 002083E5 		str	r2, [r3, #0]
  42:../timer.c    **** 	rTCFG1 &= 0xffffff0;
 2257              		.loc 1 42 0
 2258 00c4 B0309FE5 		ldr	r3, .L5+20
 2259 00c8 AC209FE5 		ldr	r2, .L5+20
 2260 00cc 002092E5 		ldr	r2, [r2, #0]
 2261 00d0 FF22C2E3 		bic	r2, r2, #-268435441
 2262 00d4 002083E5 		str	r2, [r3, #0]
  43:../timer.c    **** 	rTCFG1 |= 0xffffff7;    // selecciona la entrada del mux que proporciona el reloj 0. La 1xx (0x...
 2263              		.loc 1 43 0
 2264 00d8 9C209FE5 		ldr	r2, .L5+20
 2265 00dc 98309FE5 		ldr	r3, .L5+20
 2266 00e0 003093E5 		ldr	r3, [r3, #0]
 2267 00e4 0330E0E1 		mvn	r3, r3
 2268 00e8 8F3203E2 		and	r3, r3, #-268435448
 2269 00ec 0330E0E1 		mvn	r3, r3
 2270 00f0 003082E5 		str	r3, [r2, #0]
  44:../timer.c    **** 	rTCNTB0 = 166;			// valor inicial de cuenta. Con esto hay una interrupción cada 1/60 de segundo.
 2271              		.loc 1 44 0
 2272 00f4 84309FE5 		ldr	r3, .L5+24
 2273 00f8 A620A0E3 		mov	r2, #166
 2274 00fc 002083E5 		str	r2, [r3, #0]
  45:../timer.c    **** 	rTCMPB0 = 0;			// valor de comparación
 2275              		.loc 1 45 0
 2276 0100 7C309FE5 		ldr	r3, .L5+28
 2277 0104 0020A0E3 		mov	r2, #0
 2278 0108 002083E5 		str	r2, [r3, #0]
  46:../timer.c    **** 	/* establecer update=manual (bit 1) + inverter=on (¿? será inverter off un cero en el bit 2 pone e
  47:../timer.c    **** 	rTCON &= 0xfffffff0;
 2279              		.loc 1 47 0
 2280 010c 74309FE5 		ldr	r3, .L5+32
 2281 0110 70209FE5 		ldr	r2, .L5+32
 2282 0114 002092E5 		ldr	r2, [r2, #0]
 2283 0118 0F20C2E3 		bic	r2, r2, #15
 2284 011c 002083E5 		str	r2, [r3, #0]
  48:../timer.c    **** 	rTCON |= 0x00000002;
 2285              		.loc 1 48 0
 2286 0120 60309FE5 		ldr	r3, .L5+32
 2287 0124 5C209FE5 		ldr	r2, .L5+32
 2288 0128 002092E5 		ldr	r2, [r2, #0]
 2289 012c 022082E3 		orr	r2, r2, #2
 2290 0130 002083E5 		str	r2, [r3, #0]
  49:../timer.c    **** 	/* iniciar timer (bit 0) con auto-reload (bit 3)*/
  50:../timer.c    **** 	rTCON &= 0xfffffff0;
 2291              		.loc 1 50 0
 2292 0134 4C309FE5 		ldr	r3, .L5+32
 2293 0138 48209FE5 		ldr	r2, .L5+32
 2294 013c 002092E5 		ldr	r2, [r2, #0]
 2295 0140 0F20C2E3 		bic	r2, r2, #15
 2296 0144 002083E5 		str	r2, [r3, #0]
  51:../timer.c    **** 	rTCON |= 0x00000009;
 2297              		.loc 1 51 0
 2298 0148 38309FE5 		ldr	r3, .L5+32
 2299 014c 34209FE5 		ldr	r2, .L5+32
 2300 0150 002092E5 		ldr	r2, [r2, #0]
 2301 0154 092082E3 		orr	r2, r2, #9
 2302 0158 002083E5 		str	r2, [r3, #0]
  52:../timer.c    **** }
 2303              		.loc 1 52 0
 2304 015c 0CD04BE2 		sub	sp, fp, #12
 2305 0160 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2306 0164 1EFF2FE1 		bx	lr
 2307              	.L6:
 2308              		.align	2
 2309              	.L5:
 2310 0168 0800E001 		.word	31457288
 2311 016c 0C00E001 		.word	31457292
 2312 0170 54FF7F0C 		.word	209715028
 2313 0174 00000000 		.word	timer_ISR
 2314 0178 0000D501 		.word	30736384
 2315 017c 0400D501 		.word	30736388
 2316 0180 0C00D501 		.word	30736396
 2317 0184 1000D501 		.word	30736400
 2318 0188 0800D501 		.word	30736392
 2319              		.cfi_endproc
 2320              	.LFE1:
 2322              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2151   .bss:00000000 $d
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2152   .bss:00000000 timer2_num_int
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2155   .text:00000000 $a
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2158   .text:00000000 timer_ISR
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2198   .text:00000040 $d
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2203   .text:00000048 $a
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2206   .text:00000048 timer_init
C:\Users\guest\AppData\Local\Temp\ccrdTnLw.s:2310   .text:00000168 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
push_debug
