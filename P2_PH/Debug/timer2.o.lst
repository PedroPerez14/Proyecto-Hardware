   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"timer2.c"
  21              	.Ltext0:
  22              		.file 1 "../timer2.c"
 1879              		.align	2
 1880              		.global	timer2_ISR
 1882              	timer2_ISR:
 1883              	.LFB0:
   1:../timer2.c   **** /*********************************************************************************************
   2:../timer2.c   **** * Fichero:		timer2.c
   3:../timer2.c   **** * Autor:		Fernando PeÃ±a Bes (NIA: 756012)
   4:../timer2.c   **** * 				Pedro JosÃ© PÃ©rez GarcÃ­a (NIA: 756642)
   5:../timer2.c   **** * Descrip:		Funciones de control del timer2 del s3c44b0x
   6:../timer2.c   **** *********************************************************************************************/
   7:../timer2.c   **** 
   8:../timer2.c   **** /*--- ficheros de cabecera ---*/
   9:../timer2.c   **** #include "timer2.h"
  10:../timer2.c   **** #include "44b.h"
  11:../timer2.c   **** #include "44blib.h"
  12:../timer2.c   **** 
  13:../timer2.c   **** /*Variables del módulo*/
  14:../timer2.c   **** static volatile unsigned int timer2_num_int;
  15:../timer2.c   **** 
  16:../timer2.c   **** /* declaraciÃ¯Â¿Â½n de funciÃ¯Â¿Â½n que es rutina de servicio de interrupciÃ¯Â¿Â½n
  17:../timer2.c   ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  18:../timer2.c   **** void timer2_ISR(void) __attribute__((interrupt("IRQ")));
  19:../timer2.c   **** 
  20:../timer2.c   **** /*--- codigo de las funciones ---*/
  21:../timer2.c   **** void timer2_ISR(void)
  22:../timer2.c   **** {
 1884              		.loc 1 22 0
 1885              		.cfi_startproc
 1886              		@ Interrupt Service Routine.
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890 0000 0C002DE9 		stmfd	sp!, {r2, r3}
 1891              	.LCFI0:
 1892              		.cfi_def_cfa_offset 8
  23:../timer2.c   **** 	timer2_num_int += 1;
 1893              		.loc 1 23 0
 1894 0004 20309FE5 		ldr	r3, .L2
 1895              		.cfi_offset 3, -4
 1896              		.cfi_offset 2, -8
 1897 0008 002093E5 		ldr	r2, [r3, #0]
 1898 000c 012082E2 		add	r2, r2, #1
 1899 0010 002083E5 		str	r2, [r3, #0]
  24:../timer2.c   **** 	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
  25:../timer2.c   **** 	rI_ISPC |= BIT_TIMER2; // BIT_TIMER2 está definido en 44b.h y pone un uno en el bit que correponde
 1900              		.loc 1 25 0
 1901 0014 1E36A0E3 		mov	r3, #31457280
 1902 0018 242093E5 		ldr	r2, [r3, #36]
 1903 001c 022B82E3 		orr	r2, r2, #2048
 1904 0020 242083E5 		str	r2, [r3, #36]
  26:../timer2.c   **** 
  27:../timer2.c   **** 
  28:../timer2.c   **** }
 1905              		.loc 1 28 0
 1906 0024 0C00BDE8 		ldmfd	sp!, {r2, r3}
 1907 0028 04F05EE2 		subs	pc, lr, #4
 1908              	.L3:
 1909              		.align	2
 1910              	.L2:
 1911 002c 00000000 		.word	.LANCHOR0
 1912              		.cfi_endproc
 1913              	.LFE0:
 1915              		.align	2
 1916              		.global	timer2_inicializar
 1918              	timer2_inicializar:
 1919              	.LFB1:
  29:../timer2.c   **** 
  30:../timer2.c   **** void timer2_inicializar(void)
  31:../timer2.c   **** {
 1920              		.loc 1 31 0
 1921              		.cfi_startproc
 1922              		@ Function supports interworking.
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
  32:../timer2.c   **** 	/* Configuraion controlador de interrupciones */
  33:../timer2.c   **** 	rINTMOD &= ~(BIT_TIMER2); //Configura la lÃ¯Â¿Â½nea del timer2 como IRQ
 1926              		.loc 1 33 0
 1927 0030 1E36A0E3 		mov	r3, #31457280
 1928 0034 08C093E5 		ldr	ip, [r3, #8]
 1929 0038 021BCCE3 		bic	r1, ip, #2048
 1930 003c 081083E5 		str	r1, [r3, #8]
  34:../timer2.c   **** 	rINTCON &= 0x1; // Habilita int. vectorizadas y la linea IRQ, dejando FIQ como estuviera
 1931              		.loc 1 34 0
 1932 0040 000093E5 		ldr	r0, [r3, #0]
 1933 0044 012000E2 		and	r2, r0, #1
 1934 0048 002083E5 		str	r2, [r3, #0]
  35:../timer2.c   **** 	rINTMSK &= ~(BIT_TIMER2); // habilitamos en vector de mascaras de interrupcion el Timer0 (bits 26 
 1935              		.loc 1 35 0
 1936 004c 0CC093E5 		ldr	ip, [r3, #12]
 1937 0050 021BCCE3 		bic	r1, ip, #2048
 1938 0054 0C1083E5 		str	r1, [r3, #12]
  36:../timer2.c   **** 
  37:../timer2.c   **** 	/* Establece la rutina de servicio para TIMER0 */
  38:../timer2.c   **** 	pISR_TIMER2 = (unsigned) timer2_ISR;
  39:../timer2.c   **** 
  40:../timer2.c   **** 	/* Configura el Timer2 */
  41:../timer2.c   **** 	rTCFG0 &= 0xFFFF00FF; // ajusta el preescalado a 0
 1939              		.loc 1 41 0
 1940 0058 24309FE5 		ldr	r3, .L5
 1941 005c 000093E5 		ldr	r0, [r3, #0]
 1942 0060 FF2CC0E3 		bic	r2, r0, #65280
 1943 0064 002083E5 		str	r2, [r3, #0]
  42:../timer2.c   **** 	rTCFG1 &= 0xFFFFF0FF; // selecciona la entrada del mux que proporciona el reloj. La 00 corresponde
 1944              		.loc 1 42 0
 1945 0068 04C093E5 		ldr	ip, [r3, #4]
  38:../timer2.c   **** 	pISR_TIMER2 = (unsigned) timer2_ISR;
 1946              		.loc 1 38 0
 1947 006c 14009FE5 		ldr	r0, .L5+4
 1948 0070 14109FE5 		ldr	r1, .L5+8
 1949              		.loc 1 42 0
 1950 0074 0F2CCCE3 		bic	r2, ip, #3840
  38:../timer2.c   **** 	pISR_TIMER2 = (unsigned) timer2_ISR;
 1951              		.loc 1 38 0
 1952 0078 B30001E5 		str	r0, [r1, #-179]
 1953              		.loc 1 42 0
 1954 007c 042083E5 		str	r2, [r3, #4]
  43:../timer2.c   **** }
 1955              		.loc 1 43 0
 1956 0080 1EFF2FE1 		bx	lr
 1957              	.L6:
 1958              		.align	2
 1959              	.L5:
 1960 0084 0000D501 		.word	30736384
 1961 0088 00000000 		.word	timer2_ISR
 1962 008c FFFF7F0C 		.word	209715199
 1963              		.cfi_endproc
 1964              	.LFE1:
 1966              		.align	2
 1967              		.global	timer2_empezar
 1969              	timer2_empezar:
 1970              	.LFB2:
  44:../timer2.c   **** 
  45:../timer2.c   **** void timer2_empezar(void)
  46:../timer2.c   **** {
 1971              		.loc 1 46 0
 1972              		.cfi_startproc
 1973              		@ Function supports interworking.
 1974              		@ args = 0, pretend = 0, frame = 0
 1975              		@ frame_needed = 0, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
  47:../timer2.c   **** 	timer2_num_int = 0;	//Reinicia la variable que usamos para contar interrupciones.
  48:../timer2.c   **** 
  49:../timer2.c   **** 	rTCNTB2 = MAX_COUNT;// valor inicial de cuenta (la cuenta es descendente)
 1977              		.loc 1 49 0
 1978 0090 48309FE5 		ldr	r3, .L8
  47:../timer2.c   **** 	timer2_num_int = 0;	//Reinicia la variable que usamos para contar interrupciones.
 1979              		.loc 1 47 0
 1980 0094 48109FE5 		ldr	r1, .L8+4
 1981              		.loc 1 49 0
 1982 0098 48009FE5 		ldr	r0, .L8+8
  47:../timer2.c   **** 	timer2_num_int = 0;	//Reinicia la variable que usamos para contar interrupciones.
 1983              		.loc 1 47 0
 1984 009c 0020A0E3 		mov	r2, #0
 1985 00a0 002081E5 		str	r2, [r1, #0]
 1986              		.loc 1 49 0
 1987 00a4 240083E5 		str	r0, [r3, #36]
  50:../timer2.c   **** 	rTCMPB2 = COMP_VALUE;// valor de comparaciÃ¯Â¿Â½n
 1988              		.loc 1 50 0
 1989 00a8 282083E5 		str	r2, [r3, #40]
  51:../timer2.c   **** 	
  52:../timer2.c   **** 	/* establecer update=manual (bit 13) */
  53:../timer2.c   **** 	rTCON &= 0xFFFF0FFF;
 1990              		.loc 1 53 0
 1991 00ac 08C093E5 		ldr	ip, [r3, #8]
 1992 00b0 0F1ACCE3 		bic	r1, ip, #61440
 1993 00b4 081083E5 		str	r1, [r3, #8]
  54:../timer2.c   **** 	rTCON |= 0x00002000;
 1994              		.loc 1 54 0
 1995 00b8 080093E5 		ldr	r0, [r3, #8]
 1996 00bc 022A80E3 		orr	r2, r0, #8192
 1997 00c0 082083E5 		str	r2, [r3, #8]
  55:../timer2.c   **** 	/*Empezar la cuenta*/
  56:../timer2.c   **** 	rTCON &= 0xFFFF0FFF;
 1998              		.loc 1 56 0
 1999 00c4 08C093E5 		ldr	ip, [r3, #8]
 2000 00c8 0F1ACCE3 		bic	r1, ip, #61440
 2001 00cc 081083E5 		str	r1, [r3, #8]
  57:../timer2.c   **** 	rTCON |= 0x00009000;
 2002              		.loc 1 57 0
 2003 00d0 080093E5 		ldr	r0, [r3, #8]
 2004 00d4 092A80E3 		orr	r2, r0, #36864
 2005 00d8 082083E5 		str	r2, [r3, #8]
  58:../timer2.c   **** }
 2006              		.loc 1 58 0
 2007 00dc 1EFF2FE1 		bx	lr
 2008              	.L9:
 2009              		.align	2
 2010              	.L8:
 2011 00e0 0000D501 		.word	30736384
 2012 00e4 00000000 		.word	.LANCHOR0
 2013 00e8 FFFF0000 		.word	65535
 2014              		.cfi_endproc
 2015              	.LFE2:
 2017              		.align	2
 2018              		.global	timer2_leer
 2020              	timer2_leer:
 2021              	.LFB3:
  59:../timer2.c   **** 
  60:../timer2.c   **** unsigned int timer2_leer(void)
  61:../timer2.c   **** {
 2022              		.loc 1 61 0
 2023              		.cfi_startproc
 2024              		@ Function supports interworking.
 2025              		@ args = 0, pretend = 0, frame = 0
 2026              		@ frame_needed = 0, uses_anonymous_args = 0
 2027              		@ link register save eliminated.
  62:../timer2.c   **** 	unsigned int num_int_1 = timer2_num_int;
 2028              		.loc 1 62 0
 2029 00ec 34009FE5 		ldr	r0, .L13
 2030 00f0 002090E5 		ldr	r2, [r0, #0]
 2031              	.LVL0:
  63:../timer2.c   **** 	unsigned int num_int_2 = timer2_num_int;
 2032              		.loc 1 63 0
 2033 00f4 003090E5 		ldr	r3, [r0, #0]
 2034              	.LVL1:
  64:../timer2.c   **** 	if(num_int_2 > num_int_1) //Con esto, evitamos posibles incrementos no deseados en timer2_num_int
  65:../timer2.c   **** 	{
  66:../timer2.c   **** 		return num_int_2 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2035              		.loc 1 66 0
 2036 00f8 2C109FE5 		ldr	r1, .L13+4
  64:../timer2.c   **** 	if(num_int_2 > num_int_1) //Con esto, evitamos posibles incrementos no deseados en timer2_num_int
 2037              		.loc 1 64 0
 2038 00fc 030052E1 		cmp	r2, r3
 2039              		.loc 1 66 0
 2040 0100 240091E5 		ldr	r0, [r1, #36]
 2041 0104 2C209135 		ldrcc	r2, [r1, #44]
 2042              	.LVL2:
  67:../timer2.c   **** 		//Si queremos optimizar, como la multiplicaciï¿½n es por 2048, se pueden mover los bits 16 lugare
  68:../timer2.c   **** 	}
  69:../timer2.c   **** 	else
  70:../timer2.c   **** 	{
  71:../timer2.c   **** 		return num_int_1 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2043              		.loc 1 71 0
 2044 0108 2C309125 		ldrcs	r3, [r1, #44]
 2045              	.LVL3:
  66:../timer2.c   **** 		return num_int_2 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2046              		.loc 1 66 0
 2047 010c 8335A031 		movcc	r3, r3, asl #11
 2048 0110 00006230 		rsbcc	r0, r2, r0
 2049              		.loc 1 71 0
 2050 0114 8225A021 		movcs	r2, r2, asl #11
 2051 0118 00006320 		rsbcs	r0, r3, r0
  66:../timer2.c   **** 		return num_int_2 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2052              		.loc 1 66 0
 2053 011c A0028330 		addcc	r0, r3, r0, lsr #5
 2054              		.loc 1 71 0
 2055 0120 A0028220 		addcs	r0, r2, r0, lsr #5
  72:../timer2.c   **** 		//Si queremos optimizar, como la multiplicaciï¿½n es por 2048, se pueden mover los bits 16 lugare
  73:../timer2.c   **** 	}
  74:../timer2.c   **** }
 2056              		.loc 1 74 0
 2057 0124 1EFF2FE1 		bx	lr
 2058              	.L14:
 2059              		.align	2
 2060              	.L13:
 2061 0128 00000000 		.word	.LANCHOR0
 2062 012c 0000D501 		.word	30736384
 2063              		.cfi_endproc
 2064              	.LFE3:
 2066              		.align	2
 2067              		.global	timer2_parar
 2069              	timer2_parar:
 2070              	.LFB4:
  75:../timer2.c   **** 
  76:../timer2.c   **** unsigned int timer2_parar(void)
  77:../timer2.c   **** {
 2071              		.loc 1 77 0
 2072              		.cfi_startproc
 2073              		@ Function supports interworking.
 2074              		@ args = 0, pretend = 0, frame = 0
 2075              		@ frame_needed = 0, uses_anonymous_args = 0
 2076              		@ link register save eliminated.
  78:../timer2.c   **** 	rTCON &= 0xFFFF0FFF;	//Detener la cuenta
 2077              		.loc 1 78 0
 2078 0130 3CC09FE5 		ldr	ip, .L18
 2079 0134 08309CE5 		ldr	r3, [ip, #8]
 2080 0138 0F1AC3E3 		bic	r1, r3, #61440
 2081 013c 08108CE5 		str	r1, [ip, #8]
 2082              	.LBB4:
 2083              	.LBB5:
  62:../timer2.c   **** 	unsigned int num_int_1 = timer2_num_int;
 2084              		.loc 1 62 0
 2085 0140 30009FE5 		ldr	r0, .L18+4
 2086 0144 001090E5 		ldr	r1, [r0, #0]
 2087              	.LVL4:
  63:../timer2.c   **** 	unsigned int num_int_2 = timer2_num_int;
 2088              		.loc 1 63 0
 2089 0148 002090E5 		ldr	r2, [r0, #0]
 2090              	.LVL5:
  66:../timer2.c   **** 		return num_int_2 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2091              		.loc 1 66 0
 2092 014c 24009CE5 		ldr	r0, [ip, #36]
 2093 0150 2C309CE5 		ldr	r3, [ip, #44]
  64:../timer2.c   **** 	if(num_int_2 > num_int_1) //Con esto, evitamos posibles incrementos no deseados en timer2_num_int
 2094              		.loc 1 64 0
 2095 0154 020051E1 		cmp	r1, r2
  66:../timer2.c   **** 		return num_int_2 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2096              		.loc 1 66 0
 2097 0158 8225A031 		movcc	r2, r2, asl #11
 2098              	.LVL6:
 2099 015c 00006330 		rsbcc	r0, r3, r0
  71:../timer2.c   **** 		return num_int_1 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2100              		.loc 1 71 0
 2101 0160 8115A021 		movcs	r1, r1, asl #11
 2102              	.LVL7:
 2103 0164 00006320 		rsbcs	r0, r3, r0
  66:../timer2.c   **** 		return num_int_2 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2104              		.loc 1 66 0
 2105 0168 A0028230 		addcc	r0, r2, r0, lsr #5
  71:../timer2.c   **** 		return num_int_1 * PERIOD_INT + (rTCNTB2 - rTCNTO2) / CYCLES_EACH_MICROSEC;
 2106              		.loc 1 71 0
 2107 016c A0028120 		addcs	r0, r1, r0, lsr #5
 2108              	.LBE5:
 2109              	.LBE4:
  79:../timer2.c   **** 	return timer2_leer();
  80:../timer2.c   **** }
 2110              		.loc 1 80 0
 2111 0170 1EFF2FE1 		bx	lr
 2112              	.L19:
 2113              		.align	2
 2114              	.L18:
 2115 0174 0000D501 		.word	30736384
 2116 0178 00000000 		.word	.LANCHOR0
 2117              		.cfi_endproc
 2118              	.LFE4:
 2120              		.bss
 2121              		.align	2
 2122              		.set	.LANCHOR0,. + 0
 2125              	timer2_num_int:
 2126 0000 00000000 		.space	4
 2127              		.text
 2128              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer2.c
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1879   .text:00000000 $a
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1882   .text:00000000 timer2_ISR
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1911   .text:0000002c $d
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1915   .text:00000030 $a
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1918   .text:00000030 timer2_inicializar
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1960   .text:00000084 $d
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1966   .text:00000090 $a
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:1969   .text:00000090 timer2_empezar
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2011   .text:000000e0 $d
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2017   .text:000000ec $a
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2020   .text:000000ec timer2_leer
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2061   .text:00000128 $d
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2066   .text:00000130 $a
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2069   .text:00000130 timer2_parar
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2115   .text:00000174 $d
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2121   .bss:00000000 $d
C:\Users\guest\AppData\Local\Temp\ccpTxInJ.s:2125   .bss:00000000 timer2_num_int
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
