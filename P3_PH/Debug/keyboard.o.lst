   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"keyboard.c"
  21              	.Ltext0:
  22              		.file 1 "../keyboard.c"
 2234              		.align	2
 2235              		.global	KeyboardInt
 2237              	KeyboardInt:
 2238              	.LFB2:
   1:../keyboard.c **** /*********************************************************************************************
   2:../keyboard.c **** * File£º	keyboard.c
   3:../keyboard.c **** * Author:	embest
   4:../keyboard.c **** * Desc£º	keyboard source code
   5:../keyboard.c **** * History:	
   6:../keyboard.c **** *********************************************************************************************/
   7:../keyboard.c **** 
   8:../keyboard.c **** /*--- include files ---*/
   9:../keyboard.c **** #include "44b.h"
  10:../keyboard.c **** #include "44blib.h"
  11:../keyboard.c **** #include "def.h"
  12:../keyboard.c **** #include "keyboard.h"
  13:../keyboard.c **** #include "codigos_eventos.h"
  14:../keyboard.c **** #include "cola_depuracion.h"
  15:../keyboard.c **** 
  16:../keyboard.c **** /*--- global variables ---*/
  17:../keyboard.c **** 
  18:../keyboard.c **** /* keyboard control address */
  19:../keyboard.c **** volatile UCHAR *keyboard_base = (UCHAR *)0x06000000;
  20:../keyboard.c **** 
  21:../keyboard.c **** /*--- function declare ---*/
  22:../keyboard.c **** 
  23:../keyboard.c **** void init_keyboard();
  24:../keyboard.c **** void close_keyboard();
  25:../keyboard.c **** void KeyboardInt(void) __attribute__ ((interrupt ("IRQ")));
  26:../keyboard.c **** 
  27:../keyboard.c **** volatile static int teclaPulsada;
  28:../keyboard.c **** 
  29:../keyboard.c **** /*********************************************************************************************
  30:../keyboard.c **** * name:		init_keyboard
  31:../keyboard.c **** * func:		init keyboard interrupt
  32:../keyboard.c **** * para:		none
  33:../keyboard.c **** * ret:		none
  34:../keyboard.c **** * modify:
  35:../keyboard.c **** * comment:		
  36:../keyboard.c **** ********************************************************************************************/
  37:../keyboard.c **** void init_keyboard()
  38:../keyboard.c **** {
  39:../keyboard.c **** 	/* enable interrupt */
  40:../keyboard.c **** 	rINTMOD &= ~(BIT_EINT1); 	// Configura las linas de TSP como de tipo IRQ
  41:../keyboard.c **** 	rINTCON &= 0x1;				// Habilita int. vectorizadas y la linea IRQ (FIQ la deja como estuviera)
  42:../keyboard.c **** 	rI_ISPC |= BIT_EINT1;		// clear pending bit
  43:../keyboard.c **** 
  44:../keyboard.c **** 	/* set EINT1 interrupt handler */
  45:../keyboard.c **** 	rINTMSK &= ~(BIT_EINT1);
  46:../keyboard.c ****     pISR_EINT1 = (int)KeyboardInt;
  47:../keyboard.c ****     
  48:../keyboard.c ****     /* PORT G */
  49:../keyboard.c **** 	rPCONG  |= 0x000c;      		// Establece la funcion del pin 1
  50:../keyboard.c **** 	rPUPG   &= 0xfd;        		// Habilita el "pull up" del pin 1
  51:../keyboard.c **** 	rEXTINT &= 0xffffffc7;			//
  52:../keyboard.c **** 	rEXTINT |= 0x00000020;			// Configura la línea de interrupción del teclado matricial para que se a
  53:../keyboard.c **** 
  54:../keyboard.c **** 
  55:../keyboard.c **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
  56:../keyboard.c **** 	rEXTINTPND = 0xf;					// clear EXTINTPND reg
  57:../keyboard.c **** }
  58:../keyboard.c **** 
  59:../keyboard.c **** /*********************************************************************************************
  60:../keyboard.c **** * name:		close_keyboard
  61:../keyboard.c **** * func:		close keyboard interrupt
  62:../keyboard.c **** * para:		none
  63:../keyboard.c **** * ret:		none
  64:../keyboard.c **** * modify:
  65:../keyboard.c **** * comment:		
  66:../keyboard.c **** ********************************************************************************************/
  67:../keyboard.c **** void close_keyboard()
  68:../keyboard.c **** {
  69:../keyboard.c **** 	pISR_EINT1 = NULL;
  70:../keyboard.c **** 	/* Mask interrupt */
  71:../keyboard.c **** 	rINTMSK |= BIT_GLOBAL | BIT_EINT1;
  72:../keyboard.c **** }
  73:../keyboard.c **** 
  74:../keyboard.c **** /*********************************************************************************************
  75:../keyboard.c **** * name:		KeyboardInt
  76:../keyboard.c **** * func:		keyboard interrupt handler function
  77:../keyboard.c **** * para:		none
  78:../keyboard.c **** * ret:		none
  79:../keyboard.c **** * modify:
  80:../keyboard.c **** * comment:		
  81:../keyboard.c **** ********************************************************************************************/
  82:../keyboard.c **** void KeyboardInt(void)
  83:../keyboard.c **** {
 2239              		.loc 1 83 0
 2240              		.cfi_startproc
 2241              		@ Interrupt Service Routine.
 2242              		@ args = 0, pretend = 0, frame = 0
 2243              		@ frame_needed = 1, uses_anonymous_args = 0
 2244 0000 04C02DE5 		str	ip, [sp, #-4]!
 2245 0004 0DC0A0E1 		mov	ip, sp
 2246              	.LCFI0:
 2247              		.cfi_def_cfa_register 12
 2248 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
  84:../keyboard.c **** 	rINTMSK |= (BIT_EINT1); 		// Desactiva las interrupciones de EINT1 para el antirebotes
 2249              		.loc 1 84 0
 2250 000c 1E06A0E3 		mov	r0, #31457280
 2251              		.cfi_offset 14, -8
 2252              		.cfi_offset 13, -12
 2253              		.cfi_offset 11, -16
 2254              		.cfi_offset 3, -20
 2255              		.cfi_offset 2, -24
 2256              		.cfi_offset 1, -28
 2257              		.cfi_offset 0, -32
 2258 0010 0C3090E5 		ldr	r3, [r0, #12]
 2259 0014 011483E3 		orr	r1, r3, #16777216
 2260 0018 0C1080E5 		str	r1, [r0, #12]
  83:../keyboard.c **** {
 2261              		.loc 1 83 0
 2262 001c 04B04CE2 		sub	fp, ip, #4
 2263              	.LCFI1:
 2264              		.cfi_def_cfa 11, 4
  85:../keyboard.c **** 	int value;
  86:../keyboard.c **** 	rI_ISPC |= BIT_EINT1;			// clear pending bit
 2265              		.loc 1 86 0
 2266 0020 24C090E5 		ldr	ip, [r0, #36]
 2267              	.LBB4:
 2268              	.LBB6:
  87:../keyboard.c **** 	
  88:../keyboard.c **** 	teclaPulsada = key_read();
  89:../keyboard.c **** 
  90:../keyboard.c **** 	if (teclaPulsada == 0) {
  91:../keyboard.c **** 		push_debug(ev_keyboard, tecla_0);
  92:../keyboard.c **** 	}
  93:../keyboard.c **** 	else if (teclaPulsada == 1) {
  94:../keyboard.c **** 		push_debug(ev_keyboard, tecla_1);
  95:../keyboard.c **** 	}
  96:../keyboard.c **** 
  97:../keyboard.c **** }
  98:../keyboard.c **** 
  99:../keyboard.c **** /*********************************************************************************************
 100:../keyboard.c **** * name:		tec_resetear()
 101:../keyboard.c **** * func:		Rehabilita las interrupciones en teclado
 102:../keyboard.c **** * para:		none
 103:../keyboard.c **** * ret:		none
 104:../keyboard.c **** * modify:
 105:../keyboard.c **** * comment:
 106:../keyboard.c **** *********************************************************************************************/
 107:../keyboard.c **** void tec_resetear(void)
 108:../keyboard.c **** {
 109:../keyboard.c **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND */
 110:../keyboard.c **** 	rI_ISPC   |= (BIT_EINT1);			// borra el bit pendiente en INTPND
 111:../keyboard.c **** 	rINTMSK   &= ~(BIT_EINT1); 		// habilitamos interrupcion linea eint1 en vector de mascaras
 112:../keyboard.c **** }
 113:../keyboard.c **** 
 114:../keyboard.c **** /*********************************************************************************************
 115:../keyboard.c **** * name:		key_read
 116:../keyboard.c **** * func:		read key value
 117:../keyboard.c **** * para:		none
 118:../keyboard.c **** * ret:		key value, -1 -- error
 119:../keyboard.c **** * modify:
 120:../keyboard.c **** * comment:		
 121:../keyboard.c **** ********************************************************************************************/
 122:../keyboard.c **** inline int key_read()
 123:../keyboard.c **** {
 124:../keyboard.c **** 	int value;
 125:../keyboard.c **** 	char temp;
 126:../keyboard.c **** 
 127:../keyboard.c **** 	/* read line 1 */
 128:../keyboard.c **** 	temp = *(keyboard_base+0xfd);
 2269              		.loc 1 128 0
 2270 0024 5C319FE5 		ldr	r3, .L28
 2271              	.LBE6:
 2272              	.LBE4:
  86:../keyboard.c **** 	rI_ISPC |= BIT_EINT1;			// clear pending bit
 2273              		.loc 1 86 0
 2274 0028 01248CE3 		orr	r2, ip, #16777216
 2275 002c 242080E5 		str	r2, [r0, #36]
 2276              	.LBB9:
 2277              	.LBB7:
 2278              		.loc 1 128 0
 2279 0030 002093E5 		ldr	r2, [r3, #0]
 2280 0034 FD30D2E5 		ldrb	r3, [r2, #253]	@ zero_extendqisi2
 129:../keyboard.c **** 	/* not 0xF mean key down */
 130:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2281              		.loc 1 130 0
 2282 0038 0F1003E2 		and	r1, r3, #15
 2283 003c 0F0051E3 		cmp	r1, #15
 2284 0040 1400000A 		beq	.L2
 131:../keyboard.c **** 	{
 132:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2285              		.loc 1 132 0
 2286 0044 010013E3 		tst	r3, #1
 133:../keyboard.c **** 			value = 3;
 2287              		.loc 1 133 0
 2288 0048 0320A003 		moveq	r2, #3
 132:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2289              		.loc 1 132 0
 2290 004c 0500000A 		beq	.L3
 134:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2291              		.loc 1 134 0
 2292 0050 020013E3 		tst	r3, #2
 135:../keyboard.c **** 			value = 2;
 2293              		.loc 1 135 0
 2294 0054 0220A003 		moveq	r2, #2
 134:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2295              		.loc 1 134 0
 2296 0058 0200000A 		beq	.L3
 136:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2297              		.loc 1 136 0
 2298 005c 040013E3 		tst	r3, #4
 137:../keyboard.c **** 			value = 1;
 138:../keyboard.c **** 		else if( (temp&0x8) == 0 )
 139:../keyboard.c **** 			value = 0;
 2299              		.loc 1 139 0
 2300 0060 0020A013 		movne	r2, #0
 2301 0064 0120A003 		moveq	r2, #1
 2302              	.L3:
 2303              	.LBE7:
 2304              	.LBE9:
  88:../keyboard.c **** 	teclaPulsada = key_read();
 2305              		.loc 1 88 0
 2306 0068 1C319FE5 		ldr	r3, .L28+4
 2307 006c 002083E5 		str	r2, [r3, #0]
  90:../keyboard.c **** 	if (teclaPulsada == 0) {
 2308              		.loc 1 90 0
 2309 0070 002093E5 		ldr	r2, [r3, #0]
 2310 0074 000052E3 		cmp	r2, #0
 2311 0078 1700000A 		beq	.L26
  93:../keyboard.c **** 	else if (teclaPulsada == 1) {
 2312              		.loc 1 93 0
 2313 007c 00C093E5 		ldr	ip, [r3, #0]
 2314 0080 01005CE3 		cmp	ip, #1
 2315 0084 1800000A 		beq	.L27
 2316              	.L1:
  97:../keyboard.c **** }
 2317              		.loc 1 97 0
 2318 0088 1CD04BE2 		sub	sp, fp, #28
 2319 008c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2320 0090 04C09DE4 		ldmfd	sp!, {ip}
 2321 0094 04F05EE2 		subs	pc, lr, #4
 2322              	.L2:
 2323              	.LBB10:
 2324              	.LBB5:
 140:../keyboard.c **** 		return value;
 141:../keyboard.c **** 	}
 142:../keyboard.c **** 	
 143:../keyboard.c **** 	/* read line 2 */
 144:../keyboard.c **** 	temp = *(keyboard_base+0xfb);
 2325              		.loc 1 144 0
 2326 0098 FB30D2E5 		ldrb	r3, [r2, #251]	@ zero_extendqisi2
 145:../keyboard.c **** 	/* not 0xF mean key down */
 146:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2327              		.loc 1 146 0
 2328 009c 0F0003E2 		and	r0, r3, #15
 2329 00a0 0F0050E3 		cmp	r0, #15
 2330 00a4 1400000A 		beq	.L4
 147:../keyboard.c **** 	{
 148:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2331              		.loc 1 148 0
 2332 00a8 010013E3 		tst	r3, #1
 149:../keyboard.c **** 			value = 7;
 2333              		.loc 1 149 0
 2334 00ac 0720A003 		moveq	r2, #7
 148:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2335              		.loc 1 148 0
 2336 00b0 ECFFFF0A 		beq	.L3
 150:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2337              		.loc 1 150 0
 2338 00b4 020013E3 		tst	r3, #2
 151:../keyboard.c **** 			value = 6;
 2339              		.loc 1 151 0
 2340 00b8 0620A003 		moveq	r2, #6
 150:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2341              		.loc 1 150 0
 2342 00bc E9FFFF0A 		beq	.L3
 152:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2343              		.loc 1 152 0
 2344 00c0 040013E3 		tst	r3, #4
 153:../keyboard.c **** 			value = 5;
 2345              		.loc 1 153 0
 2346 00c4 0520A003 		moveq	r2, #5
 152:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2347              		.loc 1 152 0
 2348 00c8 E6FFFF0A 		beq	.L3
 154:../keyboard.c **** 		else if( (temp&0x8) == 0 )
 155:../keyboard.c **** 			value = 4;
 2349              		.loc 1 155 0
 2350 00cc 080013E3 		tst	r3, #8
 2351 00d0 0420A003 		moveq	r2, #4
 2352 00d4 0020A013 		movne	r2, #0
 2353 00d8 E2FFFFEA 		b	.L3
 2354              	.L26:
 2355              	.LBE5:
 2356              	.LBE10:
  91:../keyboard.c **** 		push_debug(ev_keyboard, tecla_0);
 2357              		.loc 1 91 0
 2358 00dc 2200A0E3 		mov	r0, #34
 2359 00e0 7010A0E3 		mov	r1, #112
 2360 00e4 FEFFFFEB 		bl	push_debug
 2361 00e8 E6FFFFEA 		b	.L1
 2362              	.L27:
  94:../keyboard.c **** 		push_debug(ev_keyboard, tecla_1);
 2363              		.loc 1 94 0
 2364 00ec 2200A0E3 		mov	r0, #34
 2365 00f0 7110A0E3 		mov	r1, #113
 2366 00f4 FEFFFFEB 		bl	push_debug
 2367 00f8 E2FFFFEA 		b	.L1
 2368              	.L4:
 2369              	.LBB11:
 2370              	.LBB8:
 156:../keyboard.c **** 		return value;
 157:../keyboard.c **** 	}
 158:../keyboard.c **** 	
 159:../keyboard.c **** 	/* read line 3 */
 160:../keyboard.c **** 	temp = *(keyboard_base+0xf7);
 2371              		.loc 1 160 0
 2372 00fc F730D2E5 		ldrb	r3, [r2, #247]	@ zero_extendqisi2
 161:../keyboard.c **** 	/* not 0xF mean key down */
 162:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2373              		.loc 1 162 0
 2374 0100 0F1003E2 		and	r1, r3, #15
 2375 0104 0F0051E3 		cmp	r1, #15
 2376 0108 0C00000A 		beq	.L5
 163:../keyboard.c **** 	{
 164:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2377              		.loc 1 164 0
 2378 010c 010013E3 		tst	r3, #1
 165:../keyboard.c **** 			value = 0xb;
 2379              		.loc 1 165 0
 2380 0110 0B20A003 		moveq	r2, #11
 164:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2381              		.loc 1 164 0
 2382 0114 D3FFFF0A 		beq	.L3
 166:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2383              		.loc 1 166 0
 2384 0118 020013E3 		tst	r3, #2
 167:../keyboard.c **** 			value = 0xa;
 2385              		.loc 1 167 0
 2386 011c 0A20A003 		moveq	r2, #10
 166:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2387              		.loc 1 166 0
 2388 0120 D0FFFF0A 		beq	.L3
 168:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2389              		.loc 1 168 0
 2390 0124 040013E3 		tst	r3, #4
 169:../keyboard.c **** 			value = 9;
 2391              		.loc 1 169 0
 2392 0128 0920A003 		moveq	r2, #9
 168:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2393              		.loc 1 168 0
 2394 012c CDFFFF0A 		beq	.L3
 170:../keyboard.c **** 		else if( (temp&0x8) == 0 )
 171:../keyboard.c **** 			value = 8;
 2395              		.loc 1 171 0
 2396 0130 080013E3 		tst	r3, #8
 2397 0134 0820A003 		moveq	r2, #8
 2398 0138 0020A013 		movne	r2, #0
 2399 013c C9FFFFEA 		b	.L3
 2400              	.L5:
 172:../keyboard.c **** 		return value;
 173:../keyboard.c **** 	}
 174:../keyboard.c **** 	
 175:../keyboard.c **** 	/* read line 4 */
 176:../keyboard.c **** 	temp = *(keyboard_base+0xef);
 2401              		.loc 1 176 0
 2402 0140 EF30D2E5 		ldrb	r3, [r2, #239]	@ zero_extendqisi2
 177:../keyboard.c **** 	/* not 0xF mean key down */
 178:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2403              		.loc 1 178 0
 2404 0144 0F2003E2 		and	r2, r3, #15
 2405 0148 0F0052E3 		cmp	r2, #15
 179:../keyboard.c **** 	{
 180:../keyboard.c **** 		if( (temp&0x1) == 0 )
 181:../keyboard.c **** 			value = 0xf;
 182:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 183:../keyboard.c **** 			value = 0xe;
 184:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 185:../keyboard.c **** 			value = 0xd;
 186:../keyboard.c **** 		else if( (temp&0x8) == 0 )
 187:../keyboard.c **** 			value = 0xc;
 188:../keyboard.c **** 		return value;
 189:../keyboard.c **** 	}
 190:../keyboard.c **** 	
 191:../keyboard.c **** 	return -1;
 2406              		.loc 1 191 0
 2407 014c 0020E003 		mvneq	r2, #0
 178:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2408              		.loc 1 178 0
 2409 0150 C4FFFF0A 		beq	.L3
 180:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2410              		.loc 1 180 0
 2411 0154 010013E3 		tst	r3, #1
 181:../keyboard.c **** 			value = 0xf;
 2412              		.loc 1 181 0
 2413 0158 0120A001 		moveq	r2, r1
 180:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2414              		.loc 1 180 0
 2415 015c C1FFFF0A 		beq	.L3
 182:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2416              		.loc 1 182 0
 2417 0160 020013E3 		tst	r3, #2
 183:../keyboard.c **** 			value = 0xe;
 2418              		.loc 1 183 0
 2419 0164 0E20A003 		moveq	r2, #14
 182:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2420              		.loc 1 182 0
 2421 0168 BEFFFF0A 		beq	.L3
 184:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2422              		.loc 1 184 0
 2423 016c 040013E3 		tst	r3, #4
 185:../keyboard.c **** 			value = 0xd;
 2424              		.loc 1 185 0
 2425 0170 0D20A003 		moveq	r2, #13
 184:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2426              		.loc 1 184 0
 2427 0174 BBFFFF0A 		beq	.L3
 187:../keyboard.c **** 			value = 0xc;
 2428              		.loc 1 187 0
 2429 0178 080013E3 		tst	r3, #8
 2430 017c 0C20A003 		moveq	r2, #12
 2431 0180 0020A013 		movne	r2, #0
 2432 0184 B7FFFFEA 		b	.L3
 2433              	.L29:
 2434              		.align	2
 2435              	.L28:
 2436 0188 00000000 		.word	.LANCHOR0
 2437 018c 00000000 		.word	.LANCHOR1
 2438              	.LBE8:
 2439              	.LBE11:
 2440              		.cfi_endproc
 2441              	.LFE2:
 2443              		.align	2
 2444              		.global	init_keyboard
 2446              	init_keyboard:
 2447              	.LFB0:
  38:../keyboard.c **** {
 2448              		.loc 1 38 0
 2449              		.cfi_startproc
 2450              		@ Function supports interworking.
 2451              		@ args = 0, pretend = 0, frame = 0
 2452              		@ frame_needed = 0, uses_anonymous_args = 0
 2453              		@ link register save eliminated.
  40:../keyboard.c **** 	rINTMOD &= ~(BIT_EINT1); 	// Configura las linas de TSP como de tipo IRQ
 2454              		.loc 1 40 0
 2455 0190 1E36A0E3 		mov	r3, #31457280
 2456 0194 080093E5 		ldr	r0, [r3, #8]
 2457 0198 0114C0E3 		bic	r1, r0, #16777216
 2458 019c 081083E5 		str	r1, [r3, #8]
  41:../keyboard.c **** 	rINTCON &= 0x1;				// Habilita int. vectorizadas y la linea IRQ (FIQ la deja como estuviera)
 2459              		.loc 1 41 0
 2460 01a0 002093E5 		ldr	r2, [r3, #0]
 2461 01a4 01C002E2 		and	ip, r2, #1
 2462 01a8 00C083E5 		str	ip, [r3, #0]
  42:../keyboard.c **** 	rI_ISPC |= BIT_EINT1;		// clear pending bit
 2463              		.loc 1 42 0
 2464 01ac 240093E5 		ldr	r0, [r3, #36]
 2465 01b0 011480E3 		orr	r1, r0, #16777216
 2466 01b4 241083E5 		str	r1, [r3, #36]
  45:../keyboard.c **** 	rINTMSK &= ~(BIT_EINT1);
 2467              		.loc 1 45 0
 2468 01b8 0C2093E5 		ldr	r2, [r3, #12]
 2469 01bc 01C4C2E3 		bic	ip, r2, #16777216
 2470 01c0 0CC083E5 		str	ip, [r3, #12]
  49:../keyboard.c **** 	rPCONG  |= 0x000c;      		// Establece la funcion del pin 1
 2471              		.loc 1 49 0
 2472 01c4 44309FE5 		ldr	r3, .L31
 2473 01c8 400093E5 		ldr	r0, [r3, #64]
 2474 01cc 0C1080E3 		orr	r1, r0, #12
 2475 01d0 401083E5 		str	r1, [r3, #64]
  50:../keyboard.c **** 	rPUPG   &= 0xfd;        		// Habilita el "pull up" del pin 1
 2476              		.loc 1 50 0
 2477 01d4 482093E5 		ldr	r2, [r3, #72]
 2478 01d8 FDC002E2 		and	ip, r2, #253
 2479 01dc 48C083E5 		str	ip, [r3, #72]
  51:../keyboard.c **** 	rEXTINT &= 0xffffffc7;			//
 2480              		.loc 1 51 0
 2481 01e0 500093E5 		ldr	r0, [r3, #80]
 2482 01e4 3810C0E3 		bic	r1, r0, #56
 2483 01e8 501083E5 		str	r1, [r3, #80]
  52:../keyboard.c **** 	rEXTINT |= 0x00000020;			// Configura la línea de interrupción del teclado matricial para que se a
 2484              		.loc 1 52 0
 2485 01ec 502093E5 		ldr	r2, [r3, #80]
  46:../keyboard.c ****     pISR_EINT1 = (int)KeyboardInt;
 2486              		.loc 1 46 0
 2487 01f0 1C109FE5 		ldr	r1, .L31+4
 2488 01f4 1C009FE5 		ldr	r0, .L31+8
  52:../keyboard.c **** 	rEXTINT |= 0x00000020;			// Configura la línea de interrupción del teclado matricial para que se a
 2489              		.loc 1 52 0
 2490 01f8 20C082E3 		orr	ip, r2, #32
  56:../keyboard.c **** 	rEXTINTPND = 0xf;					// clear EXTINTPND reg
 2491              		.loc 1 56 0
 2492 01fc 0F20A0E3 		mov	r2, #15
  52:../keyboard.c **** 	rEXTINT |= 0x00000020;			// Configura la línea de interrupción del teclado matricial para que se a
 2493              		.loc 1 52 0
 2494 0200 50C083E5 		str	ip, [r3, #80]
  46:../keyboard.c ****     pISR_EINT1 = (int)KeyboardInt;
 2495              		.loc 1 46 0
 2496 0204 7F1000E5 		str	r1, [r0, #-127]
  56:../keyboard.c **** 	rEXTINTPND = 0xf;					// clear EXTINTPND reg
 2497              		.loc 1 56 0
 2498 0208 542083E5 		str	r2, [r3, #84]
  57:../keyboard.c **** }
 2499              		.loc 1 57 0
 2500 020c 1EFF2FE1 		bx	lr
 2501              	.L32:
 2502              		.align	2
 2503              	.L31:
 2504 0210 0000D201 		.word	30539776
 2505 0214 00000000 		.word	KeyboardInt
 2506 0218 FFFF7F0C 		.word	209715199
 2507              		.cfi_endproc
 2508              	.LFE0:
 2510              		.align	2
 2511              		.global	close_keyboard
 2513              	close_keyboard:
 2514              	.LFB1:
  68:../keyboard.c **** {
 2515              		.loc 1 68 0
 2516              		.cfi_startproc
 2517              		@ Function supports interworking.
 2518              		@ args = 0, pretend = 0, frame = 0
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
 2520              		@ link register save eliminated.
  71:../keyboard.c **** 	rINTMSK |= BIT_GLOBAL | BIT_EINT1;
 2521              		.loc 1 71 0
 2522 021c 1E36A0E3 		mov	r3, #31457280
 2523 0220 0CC093E5 		ldr	ip, [r3, #12]
  69:../keyboard.c **** 	pISR_EINT1 = NULL;
 2524              		.loc 1 69 0
 2525 0224 10109FE5 		ldr	r1, .L34
  71:../keyboard.c **** 	rINTMSK |= BIT_GLOBAL | BIT_EINT1;
 2526              		.loc 1 71 0
 2527 0228 05248CE3 		orr	r2, ip, #83886080
  69:../keyboard.c **** 	pISR_EINT1 = NULL;
 2528              		.loc 1 69 0
 2529 022c 0000A0E3 		mov	r0, #0
 2530 0230 7F0001E5 		str	r0, [r1, #-127]
  71:../keyboard.c **** 	rINTMSK |= BIT_GLOBAL | BIT_EINT1;
 2531              		.loc 1 71 0
 2532 0234 0C2083E5 		str	r2, [r3, #12]
  72:../keyboard.c **** }
 2533              		.loc 1 72 0
 2534 0238 1EFF2FE1 		bx	lr
 2535              	.L35:
 2536              		.align	2
 2537              	.L34:
 2538 023c FFFF7F0C 		.word	209715199
 2539              		.cfi_endproc
 2540              	.LFE1:
 2542              		.align	2
 2543              		.global	tec_resetear
 2545              	tec_resetear:
 2546              	.LFB3:
 108:../keyboard.c **** {
 2547              		.loc 1 108 0
 2548              		.cfi_startproc
 2549              		@ Function supports interworking.
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 0, uses_anonymous_args = 0
 2552              		@ link register save eliminated.
 110:../keyboard.c **** 	rI_ISPC   |= (BIT_EINT1);			// borra el bit pendiente en INTPND
 2553              		.loc 1 110 0
 2554 0240 1E36A0E3 		mov	r3, #31457280
 2555 0244 24C093E5 		ldr	ip, [r3, #36]
 2556 0248 01148CE3 		orr	r1, ip, #16777216
 2557 024c 241083E5 		str	r1, [r3, #36]
 111:../keyboard.c **** 	rINTMSK   &= ~(BIT_EINT1); 		// habilitamos interrupcion linea eint1 en vector de mascaras
 2558              		.loc 1 111 0
 2559 0250 0C0093E5 		ldr	r0, [r3, #12]
 2560 0254 0124C0E3 		bic	r2, r0, #16777216
 2561 0258 0C2083E5 		str	r2, [r3, #12]
 112:../keyboard.c **** }
 2562              		.loc 1 112 0
 2563 025c 1EFF2FE1 		bx	lr
 2564              		.cfi_endproc
 2565              	.LFE3:
 2567              		.align	2
 2568              		.global	key_read
 2570              	key_read:
 2571              	.LFB4:
 123:../keyboard.c **** {
 2572              		.loc 1 123 0
 2573              		.cfi_startproc
 2574              		@ Function supports interworking.
 2575              		@ args = 0, pretend = 0, frame = 0
 2576              		@ frame_needed = 0, uses_anonymous_args = 0
 2577              		@ link register save eliminated.
 128:../keyboard.c **** 	temp = *(keyboard_base+0xfd);
 2578              		.loc 1 128 0
 2579 0260 08319FE5 		ldr	r3, .L59
 2580 0264 002093E5 		ldr	r2, [r3, #0]
 2581 0268 FD30D2E5 		ldrb	r3, [r2, #253]	@ zero_extendqisi2
 130:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2582              		.loc 1 130 0
 2583 026c 0F1003E2 		and	r1, r3, #15
 2584 0270 0F0051E3 		cmp	r1, #15
 2585 0274 0900000A 		beq	.L38
 132:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2586              		.loc 1 132 0
 2587 0278 010013E3 		tst	r3, #1
 133:../keyboard.c **** 			value = 3;
 2588              		.loc 1 133 0
 2589 027c 0300A003 		moveq	r0, #3
 132:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2590              		.loc 1 132 0
 2591 0280 1EFF2F01 		bxeq	lr
 134:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2592              		.loc 1 134 0
 2593 0284 020013E3 		tst	r3, #2
 135:../keyboard.c **** 			value = 2;
 2594              		.loc 1 135 0
 2595 0288 0200A003 		moveq	r0, #2
 134:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2596              		.loc 1 134 0
 2597 028c 1EFF2F01 		bxeq	lr
 136:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2598              		.loc 1 136 0
 2599 0290 040013E3 		tst	r3, #4
 139:../keyboard.c **** 			value = 0;
 2600              		.loc 1 139 0
 2601 0294 0000A013 		movne	r0, #0
 2602 0298 0100A003 		moveq	r0, #1
 2603 029c 1EFF2FE1 		bx	lr
 2604              	.L38:
 144:../keyboard.c **** 	temp = *(keyboard_base+0xfb);
 2605              		.loc 1 144 0
 2606 02a0 FB30D2E5 		ldrb	r3, [r2, #251]	@ zero_extendqisi2
 146:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2607              		.loc 1 146 0
 2608 02a4 0FC003E2 		and	ip, r3, #15
 2609 02a8 0F005CE3 		cmp	ip, #15
 2610 02ac 0C00000A 		beq	.L40
 148:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2611              		.loc 1 148 0
 2612 02b0 010013E3 		tst	r3, #1
 149:../keyboard.c **** 			value = 7;
 2613              		.loc 1 149 0
 2614 02b4 0700A003 		moveq	r0, #7
 148:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2615              		.loc 1 148 0
 2616 02b8 1EFF2F01 		bxeq	lr
 150:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2617              		.loc 1 150 0
 2618 02bc 020013E3 		tst	r3, #2
 151:../keyboard.c **** 			value = 6;
 2619              		.loc 1 151 0
 2620 02c0 0600A003 		moveq	r0, #6
 150:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2621              		.loc 1 150 0
 2622 02c4 1EFF2F01 		bxeq	lr
 152:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2623              		.loc 1 152 0
 2624 02c8 040013E3 		tst	r3, #4
 153:../keyboard.c **** 			value = 5;
 2625              		.loc 1 153 0
 2626 02cc 0500A003 		moveq	r0, #5
 152:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2627              		.loc 1 152 0
 2628 02d0 1EFF2F01 		bxeq	lr
 155:../keyboard.c **** 			value = 4;
 2629              		.loc 1 155 0
 2630 02d4 080013E3 		tst	r3, #8
 2631 02d8 0400A003 		moveq	r0, #4
 2632 02dc 0000A013 		movne	r0, #0
 2633 02e0 1EFF2FE1 		bx	lr
 2634              	.L40:
 160:../keyboard.c **** 	temp = *(keyboard_base+0xf7);
 2635              		.loc 1 160 0
 2636 02e4 F730D2E5 		ldrb	r3, [r2, #247]	@ zero_extendqisi2
 162:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2637              		.loc 1 162 0
 2638 02e8 0F0003E2 		and	r0, r3, #15
 2639 02ec 0F0050E3 		cmp	r0, #15
 2640 02f0 0C00000A 		beq	.L41
 164:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2641              		.loc 1 164 0
 2642 02f4 010013E3 		tst	r3, #1
 165:../keyboard.c **** 			value = 0xb;
 2643              		.loc 1 165 0
 2644 02f8 0B00A003 		moveq	r0, #11
 164:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2645              		.loc 1 164 0
 2646 02fc 1EFF2F01 		bxeq	lr
 166:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2647              		.loc 1 166 0
 2648 0300 020013E3 		tst	r3, #2
 167:../keyboard.c **** 			value = 0xa;
 2649              		.loc 1 167 0
 2650 0304 0A00A003 		moveq	r0, #10
 166:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2651              		.loc 1 166 0
 2652 0308 1EFF2F01 		bxeq	lr
 168:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2653              		.loc 1 168 0
 2654 030c 040013E3 		tst	r3, #4
 169:../keyboard.c **** 			value = 9;
 2655              		.loc 1 169 0
 2656 0310 0900A003 		moveq	r0, #9
 168:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2657              		.loc 1 168 0
 2658 0314 1EFF2F01 		bxeq	lr
 171:../keyboard.c **** 			value = 8;
 2659              		.loc 1 171 0
 2660 0318 080013E3 		tst	r3, #8
 2661 031c 0800A003 		moveq	r0, #8
 2662 0320 0000A013 		movne	r0, #0
 2663 0324 1EFF2FE1 		bx	lr
 2664              	.L41:
 176:../keyboard.c **** 	temp = *(keyboard_base+0xef);
 2665              		.loc 1 176 0
 2666 0328 EF30D2E5 		ldrb	r3, [r2, #239]	@ zero_extendqisi2
 178:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2667              		.loc 1 178 0
 2668 032c 0F2003E2 		and	r2, r3, #15
 2669 0330 0F0052E3 		cmp	r2, #15
 2670              		.loc 1 191 0
 2671 0334 0000E003 		mvneq	r0, #0
 178:../keyboard.c **** 	if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK)
 2672              		.loc 1 178 0
 2673 0338 1EFF2F01 		bxeq	lr
 180:../keyboard.c **** 		if( (temp&0x1) == 0 )
 2674              		.loc 1 180 0
 2675 033c 010013E3 		tst	r3, #1
 2676 0340 1EFF2F01 		bxeq	lr
 182:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2677              		.loc 1 182 0
 2678 0344 020013E3 		tst	r3, #2
 183:../keyboard.c **** 			value = 0xe;
 2679              		.loc 1 183 0
 2680 0348 0E00A003 		moveq	r0, #14
 182:../keyboard.c **** 		else if( (temp&0x2) == 0 )
 2681              		.loc 1 182 0
 2682 034c 1EFF2F01 		bxeq	lr
 184:../keyboard.c **** 		else if( (temp&0x4) == 0 )
 2683              		.loc 1 184 0
 2684 0350 040013E3 		tst	r3, #4
 2685 0354 0300000A 		beq	.L57
 187:../keyboard.c **** 			value = 0xc;
 2686              		.loc 1 187 0
 2687 0358 080013E3 		tst	r3, #8
 2688 035c 0C00A003 		moveq	r0, #12
 2689 0360 0000A013 		movne	r0, #0
 2690 0364 1EFF2FE1 		bx	lr
 2691              	.L57:
 185:../keyboard.c **** 			value = 0xd;
 2692              		.loc 1 185 0
 2693 0368 0D00A0E3 		mov	r0, #13
 192:../keyboard.c **** }
 2694              		.loc 1 192 0
 2695 036c 1EFF2FE1 		bx	lr
 2696              	.L60:
 2697              		.align	2
 2698              	.L59:
 2699 0370 00000000 		.word	.LANCHOR0
 2700              		.cfi_endproc
 2701              	.LFE4:
 2703              		.global	keyboard_base
 2704              		.data
 2705              		.align	2
 2706              		.set	.LANCHOR0,. + 0
 2709              	keyboard_base:
 2710 0000 00000006 		.word	100663296
 2711              		.bss
 2712              		.align	2
 2713              		.set	.LANCHOR1,. + 0
 2716              	teclaPulsada:
 2717 0000 00000000 		.space	4
 2718              		.text
 2719              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2234   .text:00000000 $a
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2237   .text:00000000 KeyboardInt
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2436   .text:00000188 $d
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2443   .text:00000190 $a
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2446   .text:00000190 init_keyboard
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2504   .text:00000210 $d
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2510   .text:0000021c $a
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2513   .text:0000021c close_keyboard
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2538   .text:0000023c $d
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2542   .text:00000240 $a
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2545   .text:00000240 tec_resetear
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2570   .text:00000260 key_read
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2699   .text:00000370 $d
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2709   .data:00000000 keyboard_base
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2705   .data:00000000 $d
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2712   .bss:00000000 $d
C:\Users\pjper\AppData\Local\Temp\ccnxXj4d.s:2716   .bss:00000000 teclaPulsada
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
push_debug
