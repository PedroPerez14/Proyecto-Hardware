   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 2154              		.align	2
 2155              		.global	timer_ISR
 2157              	timer_ISR:
 2158              	.LFB0:
   1:../timer.c    **** /*********************************************************************************************
   2:../timer.c    **** * Fichero:		timer.c
   3:../timer.c    **** * Autor:
   4:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   5:../timer.c    **** * Version:		Modificado para el latido de la práctica 2.
   6:../timer.c    **** *********************************************************************************************/
   7:../timer.c    **** 
   8:../timer.c    **** /*--- ficheros de cabecera ---*/
   9:../timer.c    **** #include "timer.h"
  10:../timer.c    **** #include "44b.h"
  11:../timer.c    **** #include "44blib.h"
  12:../timer.c    **** #include "cola_depuracion.h"
  13:../timer.c    **** #include "codigos_eventos.h"
  14:../timer.c    **** /*--- variables globales ---*/
  15:../timer.c    **** 
  16:../timer.c    **** /* declaración de función que es rutina de servicio de interrupción
  17:../timer.c    ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  18:../timer.c    **** void timer_ISR(void) __attribute__((interrupt("IRQ")));
  19:../timer.c    **** 
  20:../timer.c    **** /*--- codigo de las funciones ---*/
  21:../timer.c    **** void timer_ISR(void)
  22:../timer.c    **** {
 2159              		.loc 1 22 0
 2160              		.cfi_startproc
 2161              		@ Interrupt Service Routine.
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 1, uses_anonymous_args = 0
 2164 0000 04C02DE5 		str	ip, [sp, #-4]!
 2165 0004 0DC0A0E1 		mov	ip, sp
 2166              	.LCFI0:
 2167              		.cfi_def_cfa_register 12
 2168 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
  23:../timer.c    **** 	push_debug(ev_tick_timer0, no_info);		//TODO recuerda quitarlo cuando tengas que probar más cosas
 2169              		.loc 1 23 0
 2170 000c FF00A0E3 		mov	r0, #255
 2171              		.cfi_offset 14, -8
 2172              		.cfi_offset 13, -12
 2173              		.cfi_offset 11, -16
 2174              		.cfi_offset 3, -20
 2175              		.cfi_offset 2, -24
 2176              		.cfi_offset 1, -28
 2177              		.cfi_offset 0, -32
  22:../timer.c    **** {
 2178              		.loc 1 22 0
 2179 0010 04B04CE2 		sub	fp, ip, #4
 2180              	.LCFI1:
 2181              		.cfi_def_cfa 11, 4
 2182              		.loc 1 23 0
 2183 0014 20109FE5 		ldr	r1, .L2
 2184 0018 FEFFFFEB 		bl	push_debug
  24:../timer.c    **** 
  25:../timer.c    **** 	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
  26:../timer.c    **** 	rI_ISPC |= BIT_TIMER0; // BIT_TIMER0 está definido en 44b.h y pone un uno en el bit 13 que correpo
 2185              		.loc 1 26 0
 2186 001c 1E36A0E3 		mov	r3, #31457280
 2187 0020 240093E5 		ldr	r0, [r3, #36]
 2188 0024 022A80E3 		orr	r2, r0, #8192
 2189 0028 242083E5 		str	r2, [r3, #36]
  27:../timer.c    **** }
 2190              		.loc 1 27 0
 2191 002c 1CD04BE2 		sub	sp, fp, #28
 2192 0030 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2193 0034 04C09DE4 		ldmfd	sp!, {ip}
 2194 0038 04F05EE2 		subs	pc, lr, #4
 2195              	.L3:
 2196              		.align	2
 2197              	.L2:
 2198 003c AAAAAAAA 		.word	-1431655766
 2199              		.cfi_endproc
 2200              	.LFE0:
 2202              		.align	2
 2203              		.global	timer_init
 2205              	timer_init:
 2206              	.LFB1:
  28:../timer.c    **** 
  29:../timer.c    **** void timer_init(void)
  30:../timer.c    **** {
 2207              		.loc 1 30 0
 2208              		.cfi_startproc
 2209              		@ Function supports interworking.
 2210              		@ args = 0, pretend = 0, frame = 0
 2211              		@ frame_needed = 0, uses_anonymous_args = 0
 2212              		@ link register save eliminated.
  31:../timer.c    **** 	/* Configuraion controlador de interrupciones */
  32:../timer.c    **** 	rINTMOD &= ~(BIT_TIMER0); // Configura las linas de timer0 como de tipo IRQ
 2213              		.loc 1 32 0
 2214 0040 1E36A0E3 		mov	r3, #31457280
 2215 0044 08C093E5 		ldr	ip, [r3, #8]
 2216 0048 021ACCE3 		bic	r1, ip, #8192
 2217 004c 081083E5 		str	r1, [r3, #8]
  33:../timer.c    **** 	rINTCON &= 0x1; // Habilita int. vectorizadas y la linea IRQ (FIQ la deja como estuviera)
 2218              		.loc 1 33 0
 2219 0050 000093E5 		ldr	r0, [r3, #0]
 2220 0054 012000E2 		and	r2, r0, #1
 2221 0058 002083E5 		str	r2, [r3, #0]
  34:../timer.c    **** 	rINTMSK &= ~(BIT_TIMER0); // habilitamos en vector de mascaras de interrupcion el Timer0 (bits 26 
 2222              		.loc 1 34 0
 2223 005c 0CC093E5 		ldr	ip, [r3, #12]
 2224 0060 021ACCE3 		bic	r1, ip, #8192
 2225 0064 0C1083E5 		str	r1, [r3, #12]
  35:../timer.c    **** 
  36:../timer.c    **** 	/* Establece la rutina de servicio para TIMER0 */
  37:../timer.c    **** 	pISR_TIMER0 = (unsigned) timer_ISR;
  38:../timer.c    **** 
  39:../timer.c    **** 	/* Configura el Timer0 a resolución de 1e-4 segundos para el latido */
  40:../timer.c    **** 	rTCFG0 &= 0xffffff00;
 2226              		.loc 1 40 0
 2227 0068 84309FE5 		ldr	r3, .L5
 2228 006c 000093E5 		ldr	r0, [r3, #0]
 2229 0070 FF20C0E3 		bic	r2, r0, #255
 2230 0074 002083E5 		str	r2, [r3, #0]
  41:../timer.c    **** 	rTCFG0 |= 0xc7; 		// ajusta el preescalado del timer 0 a 199 (200 de forma interna) para el latido
 2231              		.loc 1 41 0
 2232 0078 00C093E5 		ldr	ip, [r3, #0]
 2233 007c C7108CE3 		orr	r1, ip, #199
 2234 0080 001083E5 		str	r1, [r3, #0]
  42:../timer.c    **** 	rTCFG1 &= 0xffffff0;
 2235              		.loc 1 42 0
 2236 0084 040093E5 		ldr	r0, [r3, #4]
 2237 0088 FF22C0E3 		bic	r2, r0, #-268435441
 2238 008c 042083E5 		str	r2, [r3, #4]
  43:../timer.c    **** 	rTCFG1 |= 0xffffff7;    // selecciona la entrada del mux que proporciona el reloj 0. La 1xx (0x...
 2239              		.loc 1 43 0
 2240 0090 04C093E5 		ldr	ip, [r3, #4]
 2241 0094 0C10E0E1 		mvn	r1, ip
 2242 0098 8F0201E2 		and	r0, r1, #-268435448
 2243 009c 0020E0E1 		mvn	r2, r0
  44:../timer.c    **** 	rTCNTB0 = 166;			// valor inicial de cuenta. Con esto hay una interrupción cada 1/60 de segundo.
 2244              		.loc 1 44 0
 2245 00a0 A6C0A0E3 		mov	ip, #166
  45:../timer.c    **** 	rTCMPB0 = 0;			// valor de comparación
 2246              		.loc 1 45 0
 2247 00a4 0010A0E3 		mov	r1, #0
  43:../timer.c    **** 	rTCFG1 |= 0xffffff7;    // selecciona la entrada del mux que proporciona el reloj 0. La 1xx (0x...
 2248              		.loc 1 43 0
 2249 00a8 042083E5 		str	r2, [r3, #4]
  44:../timer.c    **** 	rTCNTB0 = 166;			// valor inicial de cuenta. Con esto hay una interrupción cada 1/60 de segundo.
 2250              		.loc 1 44 0
 2251 00ac 0CC083E5 		str	ip, [r3, #12]
 2252              		.loc 1 45 0
 2253 00b0 101083E5 		str	r1, [r3, #16]
  46:../timer.c    **** 	/* establecer update=manual (bit 1) + inverter=on (¿? será inverter off un cero en el bit 2 pone e
  47:../timer.c    **** 	rTCON &= 0xfffffff0;
 2254              		.loc 1 47 0
 2255 00b4 080093E5 		ldr	r0, [r3, #8]
 2256 00b8 0F20C0E3 		bic	r2, r0, #15
 2257 00bc 082083E5 		str	r2, [r3, #8]
  48:../timer.c    **** 	rTCON |= 0x00000002;
 2258              		.loc 1 48 0
 2259 00c0 08C093E5 		ldr	ip, [r3, #8]
 2260 00c4 02108CE3 		orr	r1, ip, #2
 2261 00c8 081083E5 		str	r1, [r3, #8]
  49:../timer.c    **** 	/* iniciar timer (bit 0) con auto-reload (bit 3)*/
  50:../timer.c    **** 	rTCON &= 0xfffffff0;
 2262              		.loc 1 50 0
 2263 00cc 080093E5 		ldr	r0, [r3, #8]
 2264 00d0 0F20C0E3 		bic	r2, r0, #15
 2265 00d4 082083E5 		str	r2, [r3, #8]
  51:../timer.c    **** 	rTCON |= 0x00000009;
 2266              		.loc 1 51 0
 2267 00d8 08C093E5 		ldr	ip, [r3, #8]
  37:../timer.c    **** 	pISR_TIMER0 = (unsigned) timer_ISR;
 2268              		.loc 1 37 0
 2269 00dc 14009FE5 		ldr	r0, .L5+4
 2270 00e0 14109FE5 		ldr	r1, .L5+8
 2271              		.loc 1 51 0
 2272 00e4 09208CE3 		orr	r2, ip, #9
  37:../timer.c    **** 	pISR_TIMER0 = (unsigned) timer_ISR;
 2273              		.loc 1 37 0
 2274 00e8 AB0001E5 		str	r0, [r1, #-171]
 2275              		.loc 1 51 0
 2276 00ec 082083E5 		str	r2, [r3, #8]
  52:../timer.c    **** }
 2277              		.loc 1 52 0
 2278 00f0 1EFF2FE1 		bx	lr
 2279              	.L6:
 2280              		.align	2
 2281              	.L5:
 2282 00f4 0000D501 		.word	30736384
 2283 00f8 00000000 		.word	timer_ISR
 2284 00fc FFFF7F0C 		.word	209715199
 2285              		.cfi_endproc
 2286              	.LFE1:
 2288              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\guest\AppData\Local\Temp\ccUw8Xsb.s:2154   .text:00000000 $a
C:\Users\guest\AppData\Local\Temp\ccUw8Xsb.s:2157   .text:00000000 timer_ISR
C:\Users\guest\AppData\Local\Temp\ccUw8Xsb.s:2198   .text:0000003c $d
C:\Users\guest\AppData\Local\Temp\ccUw8Xsb.s:2202   .text:00000040 $a
C:\Users\guest\AppData\Local\Temp\ccUw8Xsb.s:2205   .text:00000040 timer_init
C:\Users\guest\AppData\Local\Temp\ccUw8Xsb.s:2282   .text:000000f4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
push_debug
