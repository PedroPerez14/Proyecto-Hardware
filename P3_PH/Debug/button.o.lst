   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"button.c"
  21              	.Ltext0:
  22              		.file 1 "../button.c"
 2239              		.align	2
 2240              		.global	button_ISR
 2242              	button_ISR:
 2243              	.LFB0:
   1:../button.c   **** /*********************************************************************************************
   2:../button.c   **** * Fichero:	button.c
   3:../button.c   **** * Autor:	Pedro José Pérez García (756642) y Fernando Peña Bes (756012)
   4:../button.c   **** * Descrip:	Funciones de manejo de los pulsadores (EINT6-7)
   5:../button.c   **** * Version:
   6:../button.c   **** *********************************************************************************************/
   7:../button.c   **** 
   8:../button.c   **** /*--- ficheros de cabecera ---*/
   9:../button.c   **** #include "button.h"
  10:../button.c   **** #include "8led.h"
  11:../button.c   **** #include "44blib.h"
  12:../button.c   **** #include "44b.h"
  13:../button.c   **** #include "def.h"
  14:../button.c   **** #include "cola_depuracion.h"
  15:../button.c   **** #include "codigos_eventos.h"
  16:../button.c   **** /*--- variables globales del módulo ---*/
  17:../button.c   **** 
  18:../button.c   **** /* declaración de función que es rutina de servicio de interrupción
  19:../button.c   ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  20:../button.c   **** void button_ISR(void) __attribute__((interrupt("IRQ")));
  21:../button.c   **** 
  22:../button.c   **** /*--- codigo de funciones ---*/
  23:../button.c   **** void button_ISR(void)
  24:../button.c   **** {
 2244              		.loc 1 24 0
 2245              		.cfi_startproc
 2246              		@ Interrupt Service Routine.
 2247              		@ args = 0, pretend = 0, frame = 8
 2248              		@ frame_needed = 1, uses_anonymous_args = 0
 2249 0000 04C02DE5 		str	ip, [sp, #-4]!
 2250 0004 0DC0A0E1 		mov	ip, sp
 2251              	.LCFI0:
 2252              		.cfi_def_cfa_register 12
 2253 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2254 000c 04B04CE2 		sub	fp, ip, #4
 2255              		.cfi_offset 14, -8
 2256              		.cfi_offset 13, -12
 2257              		.cfi_offset 11, -16
 2258              		.cfi_offset 3, -20
 2259              		.cfi_offset 2, -24
 2260              		.cfi_offset 1, -28
 2261              		.cfi_offset 0, -32
 2262              	.LCFI1:
 2263              		.cfi_def_cfa 11, 4
 2264 0010 08D04DE2 		sub	sp, sp, #8
  25:../button.c   **** 	rINTMSK  |= (BIT_EINT4567); 	//Deshabilitamos interrupcion linea eint4567 en vector de mascaras
 2265              		.loc 1 25 0
 2266 0014 1E36A0E3 		mov	r3, #31457280
 2267 0018 0CC093E5 		ldr	ip, [r3, #12]
 2268 001c 02168CE3 		orr	r1, ip, #2097152
 2269 0020 0C1083E5 		str	r1, [r3, #12]
  26:../button.c   **** 	volatile int which_int = rEXTINTPND;
 2270              		.loc 1 26 0
 2271 0024 78C09FE5 		ldr	ip, .L6
 2272 0028 54009CE5 		ldr	r0, [ip, #84]
 2273 002c 20000BE5 		str	r0, [fp, #-32]
 2274              	.LVL0:
  27:../button.c   **** 	rEXTINTPND |= 0xa;				// borra los bits 6 y 7 en EXTINTPND
 2275              		.loc 1 27 0
 2276 0030 54209CE5 		ldr	r2, [ip, #84]
 2277 0034 0A1082E3 		orr	r1, r2, #10
 2278 0038 54108CE5 		str	r1, [ip, #84]
  28:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2279              		.loc 1 28 0
 2280 003c 240093E5 		ldr	r0, [r3, #36]
 2281 0040 022680E3 		orr	r2, r0, #2097152
 2282 0044 242083E5 		str	r2, [r3, #36]
  29:../button.c   **** 
  30:../button.c   **** 	/* Identificar la interrupcion (hay dos pulsadores)*/
  31:../button.c   **** 
  32:../button.c   **** 	switch(which_int)
 2283              		.loc 1 32 0
 2284 0048 20301BE5 		ldr	r3, [fp, #-32]
 2285 004c 040053E3 		cmp	r3, #4
 2286 0050 0F00000A 		beq	.L3
 2287 0054 080053E3 		cmp	r3, #8
  33:../button.c   **** 		{
  34:../button.c   **** 			case 4:					//boton 6, izquierdo
  35:../button.c   **** 				push_debug(ev_button_int, button_izq);
  36:../button.c   **** 				break;
  37:../button.c   **** 			case 8:					//boton 7, derecho
  38:../button.c   **** 				push_debug(ev_button_int, button_der);
 2288              		.loc 1 38 0
 2289 0058 BB00A003 		moveq	r0, #187
 2290 005c 0E10A003 		moveq	r1, #14
 2291 0060 FEFFFF0B 		bleq	push_debug
 2292              	.L2:
  39:../button.c   **** 				break;
  40:../button.c   **** 			default:
  41:../button.c   **** 				break;
  42:../button.c   **** 		}
  43:../button.c   **** 
  44:../button.c   **** 	/* Finalizar ISR */
  45:../button.c   **** 	rEXTINTPND |= 0xa;				// borra los bits 6 y 7 en EXTINTPND
 2293              		.loc 1 45 0
 2294 0064 38C09FE5 		ldr	ip, .L6
 2295 0068 54209CE5 		ldr	r2, [ip, #84]
 2296 006c 0A1082E3 		orr	r1, r2, #10
 2297 0070 54108CE5 		str	r1, [ip, #84]
  46:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2298              		.loc 1 46 0
 2299 0074 1E36A0E3 		mov	r3, #31457280
 2300 0078 240093E5 		ldr	r0, [r3, #36]
 2301 007c 022680E3 		orr	r2, r0, #2097152
 2302 0080 242083E5 		str	r2, [r3, #36]
  47:../button.c   **** }
 2303              		.loc 1 47 0
 2304 0084 1CD04BE2 		sub	sp, fp, #28
 2305 0088 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2306 008c 04C09DE4 		ldmfd	sp!, {ip}
 2307 0090 04F05EE2 		subs	pc, lr, #4
 2308              	.L3:
  35:../button.c   **** 				push_debug(ev_button_int, button_izq);
 2309              		.loc 1 35 0
 2310 0094 BB00A0E3 		mov	r0, #187
 2311 0098 0F10A0E3 		mov	r1, #15
 2312 009c FEFFFFEB 		bl	push_debug
  36:../button.c   **** 				break;
 2313              		.loc 1 36 0
 2314 00a0 EFFFFFEA 		b	.L2
 2315              	.L7:
 2316              		.align	2
 2317              	.L6:
 2318 00a4 0000D201 		.word	30539776
 2319              		.cfi_endproc
 2320              	.LFE0:
 2322              		.align	2
 2323              		.global	button_iniciar
 2325              	button_iniciar:
 2326              	.LFB1:
  48:../button.c   **** 
  49:../button.c   **** void button_iniciar(void)
  50:../button.c   **** {
 2327              		.loc 1 50 0
 2328              		.cfi_startproc
 2329              		@ Function supports interworking.
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
 2332              		@ link register save eliminated.
  51:../button.c   **** 	/* Configuracion del controlador de interrupciones pensando SOLO en usar los bits
  52:../button.c   **** 	 * 6 y 7 para los pulsadores. Estos registros están definidos en 44b.h */
  53:../button.c   **** 
  54:../button.c   **** 	rI_ISPC    |= BIT_EINT4567;		// Borra INTPND escribiendo 1s en I_ISPC
 2333              		.loc 1 54 0
 2334 00a8 1E36A0E3 		mov	r3, #31457280
 2335 00ac 24C093E5 		ldr	ip, [r3, #36]
  55:../button.c   **** 	rEXTINTPND = 0xf;       		// Borra EXTINTPND escribiendo 1s en el propio registro
 2336              		.loc 1 55 0
 2337 00b0 80209FE5 		ldr	r2, .L9
 2338 00b4 0F10A0E3 		mov	r1, #15
  54:../button.c   **** 	rI_ISPC    |= BIT_EINT4567;		// Borra INTPND escribiendo 1s en I_ISPC
 2339              		.loc 1 54 0
 2340 00b8 02068CE3 		orr	r0, ip, #2097152
 2341 00bc 240083E5 		str	r0, [r3, #36]
 2342              		.loc 1 55 0
 2343 00c0 541082E5 		str	r1, [r2, #84]
  56:../button.c   **** 	rINTMOD    &= ~(BIT_EINT4567);	// Configura la linea EINT4567 como de tipo IRQ
 2344              		.loc 1 56 0
 2345 00c4 08C093E5 		ldr	ip, [r3, #8]
 2346 00c8 0206CCE3 		bic	r0, ip, #2097152
 2347 00cc 080083E5 		str	r0, [r3, #8]
  57:../button.c   **** 	rINTCON    &= 0x1;	    		// Habilita int. vectorizadas y la linea IRQ (FIQ no)
 2348              		.loc 1 57 0
 2349 00d0 00C093E5 		ldr	ip, [r3, #0]
 2350 00d4 01000CE2 		and	r0, ip, #1
 2351 00d8 000083E5 		str	r0, [r3, #0]
  58:../button.c   **** 	rINTMSK    &= ~(BIT_EINT4567); 	// habilitamos interrupcion linea eint4567 en vector de mascaras
 2352              		.loc 1 58 0
 2353 00dc 0CC093E5 		ldr	ip, [r3, #12]
 2354 00e0 0206CCE3 		bic	r0, ip, #2097152
 2355 00e4 0C0083E5 		str	r0, [r3, #12]
  59:../button.c   **** 
  60:../button.c   **** 	/* Establece la rutina de servicio para Eint4567 */
  61:../button.c   **** 	pISR_EINT4567 = (int) button_ISR;
  62:../button.c   **** 
  63:../button.c   **** 	/* Configuracion del puerto G */
  64:../button.c   **** 	rPCONG  |= 0xf000;      		// Establece la funcion de los pines (EINT6-7)
 2356              		.loc 1 64 0
 2357 00e8 40C092E5 		ldr	ip, [r2, #64]
 2358 00ec 0F0A8CE3 		orr	r0, ip, #61440
 2359 00f0 400082E5 		str	r0, [r2, #64]
  65:../button.c   **** 	rPUPG   &= 0x3f;        		// Habilita el "pull up" de los pines 6 y 7, de los pulsadores
 2360              		.loc 1 65 0
 2361 00f4 48C092E5 		ldr	ip, [r2, #72]
 2362 00f8 3F000CE2 		and	r0, ip, #63
 2363 00fc 480082E5 		str	r0, [r2, #72]
  66:../button.c   **** 	rEXTINT &= 0x00ffffff;			//
 2364              		.loc 1 66 0
 2365 0100 50C092E5 		ldr	ip, [r2, #80]
 2366 0104 FF04CCE3 		bic	r0, ip, #-16777216
 2367 0108 500082E5 		str	r0, [r2, #80]
  67:../button.c   **** 	rEXTINT |= 0x22000000;			// Configura las lineas de int. de los pulsadores como de flanco de bajad
 2368              		.loc 1 67 0
 2369 010c 50C092E5 		ldr	ip, [r2, #80]
 2370 0110 22048CE3 		orr	r0, ip, #570425344
 2371 0114 500082E5 		str	r0, [r2, #80]
  68:../button.c   **** 
  69:../button.c   **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
  70:../button.c   **** 	rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
 2372              		.loc 1 70 0
 2373 0118 541082E5 		str	r1, [r2, #84]
  71:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2374              		.loc 1 71 0
 2375 011c 24C093E5 		ldr	ip, [r3, #36]
  61:../button.c   **** 	pISR_EINT4567 = (int) button_ISR;
 2376              		.loc 1 61 0
 2377 0120 14009FE5 		ldr	r0, .L9+4
 2378 0124 14109FE5 		ldr	r1, .L9+8
 2379              		.loc 1 71 0
 2380 0128 02268CE3 		orr	r2, ip, #2097152
  61:../button.c   **** 	pISR_EINT4567 = (int) button_ISR;
 2381              		.loc 1 61 0
 2382 012c 8B0001E5 		str	r0, [r1, #-139]
 2383              		.loc 1 71 0
 2384 0130 242083E5 		str	r2, [r3, #36]
  72:../button.c   **** 
  73:../button.c   **** }
 2385              		.loc 1 73 0
 2386 0134 1EFF2FE1 		bx	lr
 2387              	.L10:
 2388              		.align	2
 2389              	.L9:
 2390 0138 0000D201 		.word	30539776
 2391 013c 00000000 		.word	button_ISR
 2392 0140 FFFF7F0C 		.word	209715199
 2393              		.cfi_endproc
 2394              	.LFE1:
 2396              		.align	2
 2397              		.global	button_resetear
 2399              	button_resetear:
 2400              	.LFB2:
  74:../button.c   **** 
  75:../button.c   **** void button_resetear(void)			//Reactiva interrupciones y deja button listo para uso otra vez
  76:../button.c   **** {
 2401              		.loc 1 76 0
 2402              		.cfi_startproc
 2403              		@ Function supports interworking.
 2404              		@ args = 0, pretend = 0, frame = 0
 2405              		@ frame_needed = 0, uses_anonymous_args = 0
 2406              		@ link register save eliminated.
  77:../button.c   **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
  78:../button.c   **** 	rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
 2407              		.loc 1 78 0
 2408 0144 24309FE5 		ldr	r3, .L12
 2409 0148 0F20A0E3 		mov	r2, #15
 2410 014c 542083E5 		str	r2, [r3, #84]
  79:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2411              		.loc 1 79 0
 2412 0150 1E36A0E3 		mov	r3, #31457280
 2413 0154 24C093E5 		ldr	ip, [r3, #36]
 2414 0158 02168CE3 		orr	r1, ip, #2097152
 2415 015c 241083E5 		str	r1, [r3, #36]
  80:../button.c   **** 	rINTMSK    &= ~(BIT_EINT4567); 	// habilitamos interrupcion linea eint4567 en vector de mascaras
 2416              		.loc 1 80 0
 2417 0160 0C0093E5 		ldr	r0, [r3, #12]
 2418 0164 0226C0E3 		bic	r2, r0, #2097152
 2419 0168 0C2083E5 		str	r2, [r3, #12]
  81:../button.c   **** }
 2420              		.loc 1 81 0
 2421 016c 1EFF2FE1 		bx	lr
 2422              	.L13:
 2423              		.align	2
 2424              	.L12:
 2425 0170 0000D201 		.word	30539776
 2426              		.cfi_endproc
 2427              	.LFE2:
 2429              		.align	2
 2430              		.global	button_estado
 2432              	button_estado:
 2433              	.LFB3:
  82:../button.c   **** 
  83:../button.c   **** /* Devuelve el estado de los botones */
  84:../button.c   **** // Se supone que nunca están los dos botones pulsados a la vez
  85:../button.c   **** enum estado_button button_estado(void)
  86:../button.c   **** {
 2434              		.loc 1 86 0
 2435              		.cfi_startproc
 2436              		@ Function supports interworking.
 2437              		@ args = 0, pretend = 0, frame = 0
 2438              		@ frame_needed = 0, uses_anonymous_args = 0
 2439              		@ link register save eliminated.
  87:../button.c   **** 	rPCONG  &= 0x0fff;
 2440              		.loc 1 87 0
 2441 0174 48309FE5 		ldr	r3, .L19
 2442 0178 40C093E5 		ldr	ip, [r3, #64]
 2443 017c 0C1AA0E1 		mov	r1, ip, asl #20
 2444 0180 212AA0E1 		mov	r2, r1, lsr #20
 2445 0184 402083E5 		str	r2, [r3, #64]
  88:../button.c   **** 	int input_GPort = rPDATG;
 2446              		.loc 1 88 0
 2447 0188 442093E5 		ldr	r2, [r3, #68]
 2448              	.LVL1:
  89:../button.c   **** 	rPCONG  |= 0xf000;
 2449              		.loc 1 89 0
 2450 018c 40C093E5 		ldr	ip, [r3, #64]
  90:../button.c   **** 
  91:../button.c   **** 	if ((input_GPort & 0x40) == 0) {
 2451              		.loc 1 91 0
 2452 0190 400012E3 		tst	r2, #64
  89:../button.c   **** 	rPCONG  |= 0xf000;
 2453              		.loc 1 89 0
 2454 0194 0F1A8CE3 		orr	r1, ip, #61440
 2455 0198 401083E5 		str	r1, [r3, #64]
  92:../button.c   **** 		return button_iz;
 2456              		.loc 1 92 0
 2457 019c 0100A003 		moveq	r0, #1
  91:../button.c   **** 	if ((input_GPort & 0x40) == 0) {
 2458              		.loc 1 91 0
 2459 01a0 1EFF2F01 		bxeq	lr
  93:../button.c   **** 	}
  94:../button.c   **** 	else if ((input_GPort & 0x80) == 0) {
 2460              		.loc 1 94 0
 2461 01a4 800012E3 		tst	r2, #128
 2462 01a8 0300000A 		beq	.L17
  95:../button.c   **** 		return button_dr;
  96:../button.c   **** 	}
  97:../button.c   **** 	else if ((input_GPort & 0xc0) == 0) {
 2463              		.loc 1 97 0
 2464 01ac C00012E3 		tst	r2, #192
  98:../button.c   **** 		return button_dr;
  99:../button.c   **** 		// Si los dos botones estuvieran a 1 (suponemos que no pasa) se devuelve que está pulsado el dere
 100:../button.c   **** 	}
 101:../button.c   **** 	else {
 102:../button.c   **** 		return button_none;
 2465              		.loc 1 102 0
 2466 01b0 0200A003 		moveq	r0, #2
 2467 01b4 0000A013 		movne	r0, #0
 2468 01b8 1EFF2FE1 		bx	lr
 2469              	.L17:
  95:../button.c   **** 		return button_dr;
 2470              		.loc 1 95 0
 2471 01bc 0200A0E3 		mov	r0, #2
 103:../button.c   **** 	}
 104:../button.c   **** }
 2472              		.loc 1 104 0
 2473 01c0 1EFF2FE1 		bx	lr
 2474              	.L20:
 2475              		.align	2
 2476              	.L19:
 2477 01c4 0000D201 		.word	30539776
 2478              		.cfi_endproc
 2479              	.LFE3:
 2481              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 button.c
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2239   .text:00000000 $a
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2242   .text:00000000 button_ISR
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2318   .text:000000a4 $d
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2322   .text:000000a8 $a
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2325   .text:000000a8 button_iniciar
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2390   .text:00000138 $d
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2396   .text:00000144 $a
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2399   .text:00000144 button_resetear
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2425   .text:00000170 $d
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2429   .text:00000174 $a
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2432   .text:00000174 button_estado
C:\Users\guest\AppData\Local\Temp\ccOxgKMZ.s:2477   .text:000001c4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
push_debug
