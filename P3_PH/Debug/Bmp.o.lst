   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"Bmp.c"
  21              	.Ltext0:
  22              		.file 1 "../Bmp.c"
 1208              		.align	2
 1209              		.global	BitmapView
 1211              	BitmapView:
 1212              	.LFB0:
   1:../Bmp.c      **** /*********************************************************************************************
   2:../Bmp.c      **** * Fichero:	Bmp.c
   3:../Bmp.c      **** * Autor:	
   4:../Bmp.c      **** * Descrip:	Funciones de control y visualizacion del LCD
   5:../Bmp.c      **** * Version:	
   6:../Bmp.c      **** *********************************************************************************************/
   7:../Bmp.c      **** 
   8:../Bmp.c      **** /*--- Archivos cabecera ---*/
   9:../Bmp.c      **** #include "Bmp.h"
  10:../Bmp.c      **** #include "def.h"
  11:../Bmp.c      **** #include "lcd.h"
  12:../Bmp.c      **** 
  13:../Bmp.c      **** /*--- variables globales ---*/
  14:../Bmp.c      **** /* mapa de bits del cursor del raton */
  15:../Bmp.c      **** const INT8U ucMouseMap[] = {
  16:../Bmp.c      **** BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  17:../Bmp.c      **** BLACK,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  18:../Bmp.c      **** BLACK,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  19:../Bmp.c      **** BLACK,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  20:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, T
  21:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, T
  22:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        BLACK,        T
  23:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        B
  24:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  25:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  26:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  27:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        B
  28:../Bmp.c      **** BLACK,        WHITE,        WHITE,        BLACK,        WHITE,        WHITE,        WHITE,        B
  29:../Bmp.c      **** BLACK,        WHITE,        BLACK,        TRANSPARENCY, BLACK,        WHITE,        WHITE,        W
  30:../Bmp.c      **** BLACK,        BLACK,        TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        WHITE,        W
  31:../Bmp.c      **** BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        W
  32:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        W
  33:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        W
  34:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        W
  35:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, B
  36:../Bmp.c      **** };
  37:../Bmp.c      **** 
  38:../Bmp.c      **** STRU_BITMAP Stru_Bitmap_gbMouse = {0x10, 4, 12, 20, TRANSPARENCY, (INT8U *)ucMouseMap};
  39:../Bmp.c      **** 
  40:../Bmp.c      **** INT16U ulMouseX;
  41:../Bmp.c      **** INT16U ulMouseY;
  42:../Bmp.c      **** INT8U ucCursorBackUp[20][12/2];
  43:../Bmp.c      **** 
  44:../Bmp.c      **** /*--- codigo de funcion ---*/
  45:../Bmp.c      **** /*********************************************************************************************
  46:../Bmp.c      **** * name:		BitmapView()
  47:../Bmp.c      **** * func:		display bitmap
  48:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
  49:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
  50:../Bmp.c      **** * ret:		none
  51:../Bmp.c      **** * modify:
  52:../Bmp.c      **** * comment:		
  53:../Bmp.c      **** *********************************************************************************************/
  54:../Bmp.c      **** void BitmapView (INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
  55:../Bmp.c      **** {
 1213              		.loc 1 55 0
 1214              		.cfi_startproc
 1215              		@ Function supports interworking.
 1216              		@ args = 16, pretend = 8, frame = 32
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219              	.LVL0:
 1220 0000 08D04DE2 		sub	sp, sp, #8
 1221              	.LCFI0:
 1222              		.cfi_def_cfa_offset 8
 1223 0004 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 1224              	.LCFI1:
 1225              		.cfi_def_cfa_offset 36
 1226 0008 24D04DE2 		sub	sp, sp, #36
 1227              	.LCFI2:
 1228              		.cfi_def_cfa_offset 72
 1229              		.loc 1 55 0
 1230 000c 40C08DE2 		add	ip, sp, #64
 1231 0010 0C008CE8 		stmia	ip, {r2, r3}
  56:../Bmp.c      **** 	INT32U i, j;
  57:../Bmp.c      **** 	INT8U ucColor;
  58:../Bmp.c      **** 	
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1232              		.loc 1 59 0
 1233 0014 B424DDE1 		ldrh	r2, [sp, #68]
 1234 0018 B234DDE1 		ldrh	r3, [sp, #66]
 1235 001c 000052E3 		cmp	r2, #0
 1236 0020 1C208DE5 		str	r2, [sp, #28]
  55:../Bmp.c      **** {
 1237              		.loc 1 55 0
 1238 0024 04008DE5 		str	r0, [sp, #4]
 1239              		.loc 1 59 0
 1240 0028 14308DE5 		str	r3, [sp, #20]
 1241              	.LVL1:
 1242 002c A000000A 		beq	.L1
 1243              		.cfi_offset 10, -12
 1244              		.cfi_offset 9, -16
 1245              		.cfi_offset 8, -20
 1246              		.cfi_offset 7, -24
 1247              		.cfi_offset 6, -28
 1248              		.cfi_offset 5, -32
 1249              		.cfi_offset 4, -36
 1250 0030 4C509DE5 		ldr	r5, [sp, #76]
 1251 0034 017181E0 		add	r7, r1, r1, asl #2
 1252 0038 0080A0E3 		mov	r8, #0
  60:../Bmp.c      **** 	{
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
  62:../Bmp.c      **** 		{
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
  64:../Bmp.c      **** 			{
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 1253              		.loc 1 65 0
 1254 003c 0010E0E1 		mvn	r1, r0
 1255              	.LVL2:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1256              		.loc 1 59 0
 1257 0040 0743A0E1 		mov	r4, r7, asl #6
 1258 0044 0C508DE5 		str	r5, [sp, #12]
 1259 0048 08808DE5 		str	r8, [sp, #8]
 1260              		.loc 1 65 0
 1261 004c 18108DE5 		str	r1, [sp, #24]
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1262              		.loc 1 59 0
 1263 0050 10408DE5 		str	r4, [sp, #16]
  54:../Bmp.c      **** void BitmapView (INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
 1264              		.loc 1 54 0
 1265 0054 007083E0 		add	r7, r3, r0
 1266              		.loc 1 65 0
 1267 0058 0F42A0E3 		mov	r4, #-268435456
 1268              	.LVL3:
 1269              	.L3:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1270              		.loc 1 61 0 discriminator 1
 1271 005c 14809DE5 		ldr	r8, [sp, #20]
 1272 0060 000058E3 		cmp	r8, #0
 1273 0064 8500000A 		beq	.L6
 1274              		.loc 1 65 0
 1275 0068 0C108DE2 		add	r1, sp, #12
 1276 006c 220091E8 		ldmia	r1, {r1, r5}	@ phole ldm
 1277 0070 A580A0E1 		mov	r8, r5, lsr #1
 1278 0074 04509DE5 		ldr	r5, [sp, #4]
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1279              		.loc 1 63 0
 1280 0078 0130D1E4 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 1281 007c 0500E0E1 		mvn	r0, r5
 1282              		.loc 1 65 0
 1283 0080 C32688E2 		add	r2, r8, #204472320
 1284 0084 07C080E0 		add	ip, r0, r7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1285              		.loc 1 63 0
 1286 0088 FF0053E3 		cmp	r3, #255
 1287              		.loc 1 65 0
 1288 008c 962C82E2 		add	r2, r2, #38400
 1289 0090 03000CE2 		and	r0, ip, #3
 1290 0094 18509D05 		ldreq	r5, [sp, #24]
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1291              		.loc 1 63 0
 1292 0098 0A00000A 		beq	.L8
 1293              		.loc 1 65 0
 1294 009c A5C1A0E1 		mov	ip, r5, lsr #3
 1295 00a0 0C6192E7 		ldr	r6, [r2, ip, asl #2]
 1296 00a4 075005E2 		and	r5, r5, #7
 1297 00a8 0581A0E1 		mov	r8, r5, asl #2
 1298 00ac 3458C6E1 		bic	r5, r6, r4, lsr r8
 1299 00b0 18809DE5 		ldr	r8, [sp, #24]
 1300 00b4 076008E2 		and	r6, r8, #7
 1301 00b8 0661A0E1 		mov	r6, r6, asl #2
 1302 00bc 133685E1 		orr	r3, r5, r3, asl r6
 1303 00c0 0C3182E7 		str	r3, [r2, ip, asl #2]
 1304 00c4 0850A0E1 		mov	r5, r8
 1305              	.L8:
 1306              	.LVL4:
 1307 00c8 04309DE5 		ldr	r3, [sp, #4]
 1308 00cc 013083E2 		add	r3, r3, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1309              		.loc 1 61 0
 1310 00d0 070053E1 		cmp	r3, r7
 1311              		.loc 1 65 0
 1312 00d4 01C045E2 		sub	ip, r5, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1313              		.loc 1 61 0
 1314 00d8 6800000A 		beq	.L6
 1315 00dc 000050E3 		cmp	r0, #0
 1316 00e0 2F00000A 		beq	.L5
 1317 00e4 010050E3 		cmp	r0, #1
 1318 00e8 1D00000A 		beq	.L26
 1319 00ec 020050E3 		cmp	r0, #2
 1320 00f0 0D00000A 		beq	.L27
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1321              		.loc 1 63 0
 1322 00f4 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1323 00f8 FF0050E3 		cmp	r0, #255
 1324 00fc 0800000A 		beq	.L10
 1325              		.loc 1 65 0
 1326 0100 A351A0E1 		mov	r5, r3, lsr #3
 1327 0104 058192E7 		ldr	r8, [r2, r5, asl #2]
 1328 0108 076003E2 		and	r6, r3, #7
 1329 010c 0661A0E1 		mov	r6, r6, asl #2
 1330 0110 3466C8E1 		bic	r6, r8, r4, lsr r6
 1331 0114 07800CE2 		and	r8, ip, #7
 1332 0118 0881A0E1 		mov	r8, r8, asl #2
 1333 011c 100886E1 		orr	r0, r6, r0, asl r8
 1334 0120 050182E7 		str	r0, [r2, r5, asl #2]
 1335              	.L10:
 1336 0124 013083E2 		add	r3, r3, #1
 1337 0128 01C04CE2 		sub	ip, ip, #1
 1338              	.L27:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1339              		.loc 1 63 0
 1340 012c 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1341 0130 FF0050E3 		cmp	r0, #255
 1342 0134 0800000A 		beq	.L13
 1343              		.loc 1 65 0
 1344 0138 A351A0E1 		mov	r5, r3, lsr #3
 1345 013c 058192E7 		ldr	r8, [r2, r5, asl #2]
 1346 0140 076003E2 		and	r6, r3, #7
 1347 0144 0661A0E1 		mov	r6, r6, asl #2
 1348 0148 3466C8E1 		bic	r6, r8, r4, lsr r6
 1349 014c 07800CE2 		and	r8, ip, #7
 1350 0150 0881A0E1 		mov	r8, r8, asl #2
 1351 0154 100886E1 		orr	r0, r6, r0, asl r8
 1352 0158 050182E7 		str	r0, [r2, r5, asl #2]
 1353              	.L13:
 1354 015c 013083E2 		add	r3, r3, #1
 1355 0160 01C04CE2 		sub	ip, ip, #1
 1356              	.L26:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1357              		.loc 1 63 0
 1358 0164 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1359 0168 FF0050E3 		cmp	r0, #255
 1360 016c 0800000A 		beq	.L16
 1361              		.loc 1 65 0
 1362 0170 A351A0E1 		mov	r5, r3, lsr #3
 1363 0174 058192E7 		ldr	r8, [r2, r5, asl #2]
 1364 0178 076003E2 		and	r6, r3, #7
 1365 017c 0661A0E1 		mov	r6, r6, asl #2
 1366 0180 3466C8E1 		bic	r6, r8, r4, lsr r6
 1367 0184 07800CE2 		and	r8, ip, #7
 1368 0188 0881A0E1 		mov	r8, r8, asl #2
 1369 018c 100886E1 		orr	r0, r6, r0, asl r8
 1370 0190 050182E7 		str	r0, [r2, r5, asl #2]
 1371              	.L16:
 1372 0194 013083E2 		add	r3, r3, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1373              		.loc 1 61 0
 1374 0198 070053E1 		cmp	r3, r7
 1375              		.loc 1 65 0
 1376 019c 01C04CE2 		sub	ip, ip, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1377              		.loc 1 61 0
 1378 01a0 3600000A 		beq	.L6
 1379              	.L5:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1380              		.loc 1 63 0
 1381 01a4 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1382              	.LVL5:
 1383              		.loc 1 65 0
 1384 01a8 A391A0E1 		mov	r9, r3, lsr #3
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1385              		.loc 1 63 0
 1386 01ac FF0050E3 		cmp	r0, #255
 1387              		.loc 1 65 0
 1388 01b0 09A19217 		ldrne	sl, [r2, r9, asl #2]
 1389 01b4 078003E2 		and	r8, r3, #7
 1390 01b8 0881A0E1 		mov	r8, r8, asl #2
 1391 01bc 3488CA11 		bicne	r8, sl, r4, lsr r8
 1392 01c0 07600CE2 		and	r6, ip, #7
 1393 01c4 0651A0E1 		mov	r5, r6, asl #2
 1394 01c8 10858811 		orrne	r8, r8, r0, asl r5
 1395 01cc 010083E2 		add	r0, r3, #1
 1396              	.LVL6:
 1397 01d0 09818217 		strne	r8, [r2, r9, asl #2]
 1398 01d4 073000E2 		and	r3, r0, #7
 1399 01d8 0381A0E1 		mov	r8, r3, asl #2
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1400              		.loc 1 63 0
 1401 01dc 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 1402              		.loc 1 65 0
 1403 01e0 01C04CE2 		sub	ip, ip, #1
 1404 01e4 07600CE2 		and	r6, ip, #7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1405              		.loc 1 63 0
 1406 01e8 FF0053E3 		cmp	r3, #255
 1407              		.loc 1 65 0
 1408 01ec A051A0E1 		mov	r5, r0, lsr #3
 1409 01f0 0661A0E1 		mov	r6, r6, asl #2
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1410              		.loc 1 63 0
 1411              		.loc 1 65 0
 1412 01f4 05A19217 		ldrne	sl, [r2, r5, asl #2]
 1413 01f8 3488CA11 		bicne	r8, sl, r4, lsr r8
 1414 01fc 13968811 		orrne	r9, r8, r3, asl r6
 1415 0200 05918217 		strne	r9, [r2, r5, asl #2]
 1416              	.L19:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1417              		.loc 1 63 0
 1418 0204 0150D1E5 		ldrb	r5, [r1, #1]	@ zero_extendqisi2
 1419              		.loc 1 65 0
 1420 0208 019080E2 		add	r9, r0, #1
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1421              		.loc 1 63 0
 1422 020c FF0055E3 		cmp	r5, #255
 1423              		.loc 1 65 0
 1424 0210 A961A0E1 		mov	r6, r9, lsr #3
 1425 0214 06A19217 		ldrne	sl, [r2, r6, asl #2]
 1426 0218 078009E2 		and	r8, r9, #7
 1427 021c 0881A0E1 		mov	r8, r8, asl #2
 1428 0220 3488CA11 		bicne	r8, sl, r4, lsr r8
 1429 0224 01904CE2 		sub	r9, ip, #1
 1430 0228 079009E2 		and	r9, r9, #7
 1431 022c 0991A0E1 		mov	r9, r9, asl #2
 1432 0230 15898811 		orrne	r8, r8, r5, asl r9
 1433 0234 06818217 		strne	r8, [r2, r6, asl #2]
 1434 0238 025080E2 		add	r5, r0, #2
 1435 023c A561A0E1 		mov	r6, r5, lsr #3
 1436 0240 033080E2 		add	r3, r0, #3
 1437 0244 070005E2 		and	r0, r5, #7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1438              		.loc 1 63 0
 1439 0248 0250D1E5 		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 1440 024c FF0055E3 		cmp	r5, #255
 1441              		.loc 1 65 0
 1442 0250 06A19217 		ldrne	sl, [r2, r6, asl #2]
 1443 0254 0001A0E1 		mov	r0, r0, asl #2
 1444 0258 3400CA11 		bicne	r0, sl, r4, lsr r0
 1445 025c 02804CE2 		sub	r8, ip, #2
 1446 0260 078008E2 		and	r8, r8, #7
 1447 0264 0881A0E1 		mov	r8, r8, asl #2
 1448 0268 15088011 		orrne	r0, r0, r5, asl r8
 1449 026c 06018217 		strne	r0, [r2, r6, asl #2]
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1450              		.loc 1 61 0
 1451 0270 070053E1 		cmp	r3, r7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1452              		.loc 1 63 0
 1453 0274 031081E2 		add	r1, r1, #3
 1454              		.loc 1 65 0
 1455 0278 03C04CE2 		sub	ip, ip, #3
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1456              		.loc 1 61 0
 1457 027c C8FFFF1A 		bne	.L5
 1458              	.L6:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1459              		.loc 1 59 0
 1460 0280 08509DE5 		ldr	r5, [sp, #8]
 1461 0284 0C109DE5 		ldr	r1, [sp, #12]
 1462 0288 013085E2 		add	r3, r5, #1
 1463 028c 10209DE5 		ldr	r2, [sp, #16]
 1464 0290 1C009DE5 		ldr	r0, [sp, #28]
 1465 0294 14509DE5 		ldr	r5, [sp, #20]
 1466 0298 058D82E2 		add	r8, r2, #320
 1467 029c 05C081E0 		add	ip, r1, r5
 1468 02a0 030050E1 		cmp	r0, r3
 1469 02a4 08308DE5 		str	r3, [sp, #8]
 1470              	.LVL7:
 1471 02a8 0CC08DE5 		str	ip, [sp, #12]
 1472 02ac 10808DE5 		str	r8, [sp, #16]
 1473 02b0 69FFFF8A 		bhi	.L3
 1474              	.LVL8:
 1475              	.L1:
  66:../Bmp.c      **** 			}
  67:../Bmp.c      **** 		}
  68:../Bmp.c      **** 	}
  69:../Bmp.c      **** }
 1476              		.loc 1 69 0
 1477 02b4 24D08DE2 		add	sp, sp, #36
 1478 02b8 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 1479 02bc 08D08DE2 		add	sp, sp, #8
 1480 02c0 1EFF2FE1 		bx	lr
 1481              		.cfi_endproc
 1482              	.LFE0:
 1484              		.align	2
 1485              		.global	BitmapPush
 1487              	BitmapPush:
 1488              	.LFB1:
  70:../Bmp.c      **** 
  71:../Bmp.c      **** /*********************************************************************************************
  72:../Bmp.c      **** * name:		BitmapPush()
  73:../Bmp.c      **** * func:		push bitmap data into LCD active buffer
  74:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
  75:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
  76:../Bmp.c      **** * ret:		none
  77:../Bmp.c      **** * modify:
  78:../Bmp.c      **** * comment:		
  79:../Bmp.c      **** *********************************************************************************************/
  80:../Bmp.c      **** void BitmapPush (INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
  81:../Bmp.c      **** {
 1489              		.loc 1 81 0
 1490              		.cfi_startproc
 1491              		@ Function supports interworking.
 1492              		@ args = 16, pretend = 8, frame = 16
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 1494              		@ link register save eliminated.
 1495              	.LVL9:
 1496 02c4 08D04DE2 		sub	sp, sp, #8
 1497              	.LCFI3:
 1498              		.cfi_def_cfa_offset 8
 1499 02c8 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 1500              	.LCFI4:
 1501              		.cfi_def_cfa_offset 36
 1502 02cc 14D04DE2 		sub	sp, sp, #20
 1503              	.LCFI5:
 1504              		.cfi_def_cfa_offset 56
 1505              		.loc 1 81 0
 1506 02d0 30C08DE2 		add	ip, sp, #48
 1507 02d4 0C008CE8 		stmia	ip, {r2, r3}
  82:../Bmp.c      **** 	INT32U i, j;
  83:../Bmp.c      **** 
  84:../Bmp.c      **** 	ulMouseX = x; 
  85:../Bmp.c      **** 	ulMouseY = y;
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1508              		.loc 1 86 0
 1509 02d8 B453DDE1 		ldrh	r5, [sp, #52]
 1510              		.cfi_offset 10, -12
 1511              		.cfi_offset 9, -16
 1512              		.cfi_offset 8, -20
 1513              		.cfi_offset 7, -24
 1514              		.cfi_offset 6, -28
 1515              		.cfi_offset 5, -32
 1516              		.cfi_offset 4, -36
  84:../Bmp.c      **** 	ulMouseX = x; 
 1517              		.loc 1 84 0
 1518 02dc C4229FE5 		ldr	r2, .L59
  85:../Bmp.c      **** 	ulMouseY = y;
 1519              		.loc 1 85 0
 1520 02e0 C4329FE5 		ldr	r3, .L59+4
 1521              		.loc 1 86 0
 1522 02e4 000055E3 		cmp	r5, #0
 1523 02e8 0C508DE5 		str	r5, [sp, #12]
  81:../Bmp.c      **** {
 1524              		.loc 1 81 0
 1525 02ec 00008DE5 		str	r0, [sp, #0]
 1526              		.loc 1 86 0
 1527 02f0 B253DDE1 		ldrh	r5, [sp, #50]
  84:../Bmp.c      **** 	ulMouseX = x; 
 1528              		.loc 1 84 0
 1529 02f4 B000C2E1 		strh	r0, [r2, #0]	@ movhi
  85:../Bmp.c      **** 	ulMouseY = y;
 1530              		.loc 1 85 0
 1531 02f8 B010C3E1 		strh	r1, [r3, #0]	@ movhi
 1532              	.LVL10:
 1533              		.loc 1 86 0
 1534 02fc 8700000A 		beq	.L33
 1535 0300 010181E0 		add	r0, r1, r1, asl #2
 1536              	.LVL11:
 1537 0304 0013A0E1 		mov	r1, r0, asl #6
 1538              	.LVL12:
 1539 0308 04108DE5 		str	r1, [sp, #4]
 1540 030c 9CC29FE5 		ldr	ip, .L59+8
 1541 0310 0090A0E3 		mov	r9, #0
 1542              	.LVL13:
 1543              	.L35:
  87:../Bmp.c      **** 	{
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1544              		.loc 1 88 0 discriminator 1
 1545 0314 000055E3 		cmp	r5, #0
 1546 0318 7900000A 		beq	.L39
 1547              		.loc 1 88 0 is_stmt 0
 1548 031c 04809DE5 		ldr	r8, [sp, #4]
  89:../Bmp.c      **** 		{
  90:../Bmp.c      **** 			if ((x + j)%2)
 1549              		.loc 1 90 0 is_stmt 1
 1550 0320 00A09DE5 		ldr	sl, [sp, #0]
 1551 0324 014045E2 		sub	r4, r5, #1
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1552              		.loc 1 88 0
 1553 0328 A860A0E1 		mov	r6, r8, lsr #1
 1554 032c A410A0E1 		mov	r1, r4, lsr #1
  91:../Bmp.c      **** 			{
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
  95:../Bmp.c      **** 			}
  96:../Bmp.c      **** 			else
  97:../Bmp.c      **** 			{
  98:../Bmp.c      **** 				ucCursorBackUp[i][j/2] = (*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 *
 1555              		.loc 1 98 0
 1556 0330 893089E0 		add	r3, r9, r9, asl #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1557              		.loc 1 93 0
 1558 0334 C30686E2 		add	r0, r6, #204472320
  90:../Bmp.c      **** 			if ((x + j)%2)
 1559              		.loc 1 90 0
 1560 0338 01001AE3 		tst	sl, #1
 1561              		.loc 1 98 0
 1562 033c 8340A0E1 		mov	r4, r3, asl #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1563              		.loc 1 93 0
 1564 0340 030080E2 		add	r0, r0, #3
 1565 0344 011001E2 		and	r1, r1, #1
  90:../Bmp.c      **** 			if ((x + j)%2)
 1566              		.loc 1 90 0
 1567 0348 7800000A 		beq	.L41
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1568              		.loc 1 93 0
 1569 034c 00809DE5 		ldr	r8, [sp, #0]
 1570 0350 00A09DE5 		ldr	sl, [sp, #0]
 1571 0354 012088E2 		add	r2, r8, #1
 1572 0358 07800AE2 		and	r8, sl, #7
 1573 035c AAA1A0E1 		mov	sl, sl, lsr #3
 1574 0360 08A08DE5 		str	sl, [sp, #8]
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1575              		.loc 1 94 0
 1576 0364 077002E2 		and	r7, r2, #7
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1577              		.loc 1 93 0
 1578 0368 A8A0A0E1 		mov	sl, r8, lsr #1
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1579              		.loc 1 94 0
 1580 036c A221A0E1 		mov	r2, r2, lsr #3
 1581 0370 028180E0 		add	r8, r0, r2, asl #2
 1582 0374 A770A0E1 		mov	r7, r7, lsr #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1583              		.loc 1 93 0
 1584 0378 00206AE2 		rsb	r2, sl, #0
 1585 037c 08A09DE5 		ldr	sl, [sp, #8]
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1586              		.loc 1 94 0
 1587 0380 007067E2 		rsb	r7, r7, #0
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1588              		.loc 1 92 0
 1589 0384 0780D8E7 		ldrb	r8, [r8, r7]	@ zero_extendqisi2
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1590              		.loc 1 93 0
 1591 0388 0A7180E0 		add	r7, r0, sl, asl #2
 1592 038c 0220D7E7 		ldrb	r2, [r7, r2]	@ zero_extendqisi2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1593              		.loc 1 92 0
 1594 0390 2882A0E1 		mov	r8, r8, lsr #4
 1595 0394 028288E0 		add	r8, r8, r2, asl #4
 1596 0398 8380CCE7 		strb	r8, [ip, r3, asl #1]
 1597              	.L51:
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1598              		.loc 1 88 0
 1599 039c 0220A0E3 		mov	r2, #2
 1600              	.LVL14:
 1601 03a0 00309DE5 		ldr	r3, [sp, #0]
 1602 03a4 050052E1 		cmp	r2, r5
 1603 03a8 023083E0 		add	r3, r3, r2
 1604 03ac 5400002A 		bcs	.L39
 1605 03b0 000051E3 		cmp	r1, #0
 1606 03b4 3800000A 		beq	.L38
  90:../Bmp.c      **** 			if ((x + j)%2)
 1607              		.loc 1 90 0
 1608 03b8 010013E3 		tst	r3, #1
 1609 03bc 6400001A 		bne	.L52
 1610              		.loc 1 98 0
 1611 03c0 A371A0E1 		mov	r7, r3, lsr #3
 1612 03c4 071003E2 		and	r1, r3, #7
 1613 03c8 077186E0 		add	r7, r6, r7, asl #2
 1614 03cc A17047E0 		sub	r7, r7, r1, lsr #1
 1615 03d0 C31687E2 		add	r1, r7, #204472320
 1616 03d4 0370D1E5 		ldrb	r7, [r1, #3]	@ zero_extendqisi2
 1617 03d8 011084E2 		add	r1, r4, #1
 1618 03dc 0170CCE7 		strb	r7, [ip, r1]
 1619              	.L53:
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1620              		.loc 1 88 0
 1621 03e0 022082E2 		add	r2, r2, #2
 1622              	.LVL15:
 1623 03e4 050052E1 		cmp	r2, r5
 1624 03e8 023083E2 		add	r3, r3, #2
 1625 03ec 2A00003A 		bcc	.L38
 1626 03f0 430000EA 		b	.L39
 1627              	.L57:
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1628              		.loc 1 93 0
 1629 03f4 01A083E2 		add	sl, r3, #1
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1630              		.loc 1 94 0
 1631 03f8 07100AE2 		and	r1, sl, #7
 1632 03fc A180A0E1 		mov	r8, r1, lsr #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1633              		.loc 1 93 0
 1634 0400 077003E2 		and	r7, r3, #7
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1635              		.loc 1 94 0
 1636 0404 AAA1A0E1 		mov	sl, sl, lsr #3
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1637              		.loc 1 93 0
 1638 0408 A311A0E1 		mov	r1, r3, lsr #3
 1639 040c A770A0E1 		mov	r7, r7, lsr #1
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1640              		.loc 1 94 0
 1641 0410 008068E2 		rsb	r8, r8, #0
 1642 0414 0AA180E0 		add	sl, r0, sl, asl #2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1643              		.loc 1 92 0
 1644 0418 0880DAE7 		ldrb	r8, [sl, r8]	@ zero_extendqisi2
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1645              		.loc 1 93 0
 1646 041c 011180E0 		add	r1, r0, r1, asl #2
 1647 0420 007067E2 		rsb	r7, r7, #0
 1648 0424 0770D1E7 		ldrb	r7, [r1, r7]	@ zero_extendqisi2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1649              		.loc 1 92 0
 1650 0428 2882A0E1 		mov	r8, r8, lsr #4
 1651 042c A21084E0 		add	r1, r4, r2, lsr #1
 1652 0430 078288E0 		add	r8, r8, r7, asl #4
 1653 0434 0180CCE7 		strb	r8, [ip, r1]
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1654              		.loc 1 88 0
 1655 0438 021083E2 		add	r1, r3, #2
  90:../Bmp.c      **** 			if ((x + j)%2)
 1656              		.loc 1 90 0
 1657 043c 010011E3 		tst	r1, #1
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1658              		.loc 1 88 0
 1659 0440 022082E2 		add	r2, r2, #2
 1660              	.LVL16:
  90:../Bmp.c      **** 			if ((x + j)%2)
 1661              		.loc 1 90 0
 1662 0444 2200000A 		beq	.L46
 1663              	.L58:
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1664              		.loc 1 93 0
 1665 0448 033083E2 		add	r3, r3, #3
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1666              		.loc 1 94 0
 1667 044c 077003E2 		and	r7, r3, #7
 1668 0450 A7A0A0E1 		mov	sl, r7, lsr #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1669              		.loc 1 93 0
 1670 0454 078001E2 		and	r8, r1, #7
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1671              		.loc 1 94 0
 1672 0458 A331A0E1 		mov	r3, r3, lsr #3
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1673              		.loc 1 93 0
 1674 045c A171A0E1 		mov	r7, r1, lsr #3
 1675 0460 A880A0E1 		mov	r8, r8, lsr #1
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1676              		.loc 1 94 0
 1677 0464 00A06AE2 		rsb	sl, sl, #0
 1678 0468 033180E0 		add	r3, r0, r3, asl #2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1679              		.loc 1 92 0
 1680 046c 0A30D3E7 		ldrb	r3, [r3, sl]	@ zero_extendqisi2
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1681              		.loc 1 93 0
 1682 0470 008068E2 		rsb	r8, r8, #0
 1683 0474 077180E0 		add	r7, r0, r7, asl #2
 1684 0478 0870D7E7 		ldrb	r7, [r7, r8]	@ zero_extendqisi2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1685              		.loc 1 92 0
 1686 047c 2382A0E1 		mov	r8, r3, lsr #4
 1687 0480 A23084E0 		add	r3, r4, r2, lsr #1
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1688              		.loc 1 88 0
 1689 0484 022082E2 		add	r2, r2, #2
 1690              	.LVL17:
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1691              		.loc 1 92 0
 1692 0488 077288E0 		add	r7, r8, r7, asl #4
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1693              		.loc 1 88 0
 1694 048c 050052E1 		cmp	r2, r5
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1695              		.loc 1 92 0
 1696 0490 0370CCE7 		strb	r7, [ip, r3]
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1697              		.loc 1 88 0
 1698 0494 023081E2 		add	r3, r1, #2
 1699 0498 1900002A 		bcs	.L39
 1700              	.L38:
  90:../Bmp.c      **** 			if ((x + j)%2)
 1701              		.loc 1 90 0
 1702 049c 010013E3 		tst	r3, #1
 1703 04a0 D3FFFF1A 		bne	.L57
 1704              		.loc 1 98 0
 1705 04a4 A371A0E1 		mov	r7, r3, lsr #3
 1706 04a8 071003E2 		and	r1, r3, #7
 1707 04ac 077186E0 		add	r7, r6, r7, asl #2
 1708 04b0 A17047E0 		sub	r7, r7, r1, lsr #1
 1709 04b4 C31687E2 		add	r1, r7, #204472320
 1710 04b8 0370D1E5 		ldrb	r7, [r1, #3]	@ zero_extendqisi2
 1711 04bc A21084E0 		add	r1, r4, r2, lsr #1
 1712 04c0 0170CCE7 		strb	r7, [ip, r1]
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1713              		.loc 1 88 0
 1714 04c4 021083E2 		add	r1, r3, #2
  90:../Bmp.c      **** 			if ((x + j)%2)
 1715              		.loc 1 90 0
 1716 04c8 010011E3 		tst	r1, #1
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1717              		.loc 1 88 0
 1718 04cc 022082E2 		add	r2, r2, #2
 1719              	.LVL18:
  90:../Bmp.c      **** 			if ((x + j)%2)
 1720              		.loc 1 90 0
 1721 04d0 DCFFFF1A 		bne	.L58
 1722              	.L46:
 1723              		.loc 1 98 0
 1724 04d4 A171A0E1 		mov	r7, r1, lsr #3
 1725 04d8 073001E2 		and	r3, r1, #7
 1726 04dc 077186E0 		add	r7, r6, r7, asl #2
 1727 04e0 A37047E0 		sub	r7, r7, r3, lsr #1
 1728 04e4 C33687E2 		add	r3, r7, #204472320
 1729 04e8 0370D3E5 		ldrb	r7, [r3, #3]	@ zero_extendqisi2
 1730 04ec A23084E0 		add	r3, r4, r2, lsr #1
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1731              		.loc 1 88 0
 1732 04f0 022082E2 		add	r2, r2, #2
 1733              	.LVL19:
 1734 04f4 050052E1 		cmp	r2, r5
 1735              		.loc 1 98 0
 1736 04f8 0370CCE7 		strb	r7, [ip, r3]
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1737              		.loc 1 88 0
 1738 04fc 023081E2 		add	r3, r1, #2
 1739 0500 E5FFFF3A 		bcc	.L38
 1740              	.LVL20:
 1741              	.L39:
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1742              		.loc 1 86 0
 1743 0504 04309DE5 		ldr	r3, [sp, #4]
 1744 0508 0C209DE5 		ldr	r2, [sp, #12]
 1745 050c 019089E2 		add	r9, r9, #1
 1746              	.LVL21:
 1747 0510 057D83E2 		add	r7, r3, #320
 1748 0514 090052E1 		cmp	r2, r9
 1749 0518 04708DE5 		str	r7, [sp, #4]
 1750 051c 7CFFFF8A 		bhi	.L35
 1751              	.LVL22:
 1752              	.L33:
  99:../Bmp.c      **** 			}
 100:../Bmp.c      **** 		}
 101:../Bmp.c      **** 	}
 102:../Bmp.c      **** }
 1753              		.loc 1 102 0
 1754 0520 14D08DE2 		add	sp, sp, #20
 1755 0524 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 1756 0528 08D08DE2 		add	sp, sp, #8
 1757 052c 1EFF2FE1 		bx	lr
 1758              	.LVL23:
 1759              	.L41:
  98:../Bmp.c      **** 				ucCursorBackUp[i][j/2] = (*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 *
 1760              		.loc 1 98 0
 1761 0530 AA71A0E1 		mov	r7, sl, lsr #3
 1762 0534 077186E0 		add	r7, r6, r7, asl #2
 1763 0538 07200AE2 		and	r2, sl, #7
 1764 053c A22047E0 		sub	r2, r7, r2, lsr #1
 1765 0540 C37682E2 		add	r7, r2, #204472320
 1766 0544 032087E2 		add	r2, r7, #3
 1767 0548 0070D2E5 		ldrb	r7, [r2, #0]	@ zero_extendqisi2
 1768 054c 8370CCE7 		strb	r7, [ip, r3, asl #1]
 1769 0550 91FFFFEA 		b	.L51
 1770              	.LVL24:
 1771              	.L52:
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1772              		.loc 1 93 0
 1773 0554 00809DE5 		ldr	r8, [sp, #0]
 1774 0558 A3A1A0E1 		mov	sl, r3, lsr #3
 1775 055c 031088E2 		add	r1, r8, #3
 1776 0560 078003E2 		and	r8, r3, #7
 1777 0564 08A08DE5 		str	sl, [sp, #8]
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1778              		.loc 1 94 0
 1779 0568 077001E2 		and	r7, r1, #7
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1780              		.loc 1 93 0
 1781 056c A8A0A0E1 		mov	sl, r8, lsr #1
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1782              		.loc 1 94 0
 1783 0570 A111A0E1 		mov	r1, r1, lsr #3
 1784 0574 018180E0 		add	r8, r0, r1, asl #2
 1785 0578 A770A0E1 		mov	r7, r7, lsr #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1786              		.loc 1 93 0
 1787 057c 00106AE2 		rsb	r1, sl, #0
 1788 0580 08A09DE5 		ldr	sl, [sp, #8]
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1789              		.loc 1 94 0
 1790 0584 007067E2 		rsb	r7, r7, #0
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1791              		.loc 1 92 0
 1792 0588 0780D8E7 		ldrb	r8, [r8, r7]	@ zero_extendqisi2
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1793              		.loc 1 93 0
 1794 058c 0A7180E0 		add	r7, r0, sl, asl #2
 1795 0590 0170D7E7 		ldrb	r7, [r7, r1]	@ zero_extendqisi2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1796              		.loc 1 92 0
 1797 0594 2882A0E1 		mov	r8, r8, lsr #4
 1798 0598 011084E2 		add	r1, r4, #1
 1799 059c 078288E0 		add	r8, r8, r7, asl #4
 1800 05a0 0180CCE7 		strb	r8, [ip, r1]
 1801 05a4 8DFFFFEA 		b	.L53
 1802              	.L60:
 1803              		.align	2
 1804              	.L59:
 1805 05a8 00000000 		.word	ulMouseX
 1806 05ac 00000000 		.word	ulMouseY
 1807 05b0 00000000 		.word	ucCursorBackUp
 1808              		.cfi_endproc
 1809              	.LFE1:
 1811              		.align	2
 1812              		.global	BitmapPop
 1814              	BitmapPop:
 1815              	.LFB2:
 103:../Bmp.c      **** 
 104:../Bmp.c      **** /*********************************************************************************************
 105:../Bmp.c      **** * name:		BitmapPop()
 106:../Bmp.c      **** * func:		pop bitmap data into LCD active buffer
 107:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
 108:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
 109:../Bmp.c      **** * ret:		none
 110:../Bmp.c      **** * modify:
 111:../Bmp.c      **** * comment:		
 112:../Bmp.c      **** *********************************************************************************************/
 113:../Bmp.c      **** void BitmapPop(INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
 114:../Bmp.c      **** {
 1816              		.loc 1 114 0
 1817              		.cfi_startproc
 1818              		@ Function supports interworking.
 1819              		@ args = 16, pretend = 8, frame = 24
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 1822              	.LVL25:
 1823 05b4 08D04DE2 		sub	sp, sp, #8
 1824              	.LCFI6:
 1825              		.cfi_def_cfa_offset 8
 1826 05b8 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 1827              	.LCFI7:
 1828              		.cfi_def_cfa_offset 36
 1829 05bc 1CD04DE2 		sub	sp, sp, #28
 1830              	.LCFI8:
 1831              		.cfi_def_cfa_offset 64
 1832              		.loc 1 114 0
 1833 05c0 38C08DE2 		add	ip, sp, #56
 1834 05c4 0C008CE8 		stmia	ip, {r2, r3}
 115:../Bmp.c      **** 	INT32U i, j;
 116:../Bmp.c      **** 	INT32U ulAddr, ulAddr1;
 117:../Bmp.c      **** 
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1835              		.loc 1 118 0
 1836 05c8 BC23DDE1 		ldrh	r2, [sp, #60]
 1837 05cc 000052E3 		cmp	r2, #0
 1838 05d0 14208DE5 		str	r2, [sp, #20]
 114:../Bmp.c      **** {
 1839              		.loc 1 114 0
 1840 05d4 0C008DE5 		str	r0, [sp, #12]
 1841              		.loc 1 118 0
 1842 05d8 BA63DDE1 		ldrh	r6, [sp, #58]
 1843              		.cfi_offset 10, -12
 1844              		.cfi_offset 9, -16
 1845              		.cfi_offset 8, -20
 1846              		.cfi_offset 7, -24
 1847              		.cfi_offset 6, -28
 1848              		.cfi_offset 5, -32
 1849              		.cfi_offset 4, -36
 1850              	.LVL26:
 1851 05dc 8D00000A 		beq	.L61
 1852 05e0 010181E0 		add	r0, r1, r1, asl #2
 1853              	.LVL27:
 1854 05e4 0013A0E1 		mov	r1, r0, asl #6
 1855              	.LVL28:
 1856 05e8 0030A0E3 		mov	r3, #0
 1857 05ec 10108DE5 		str	r1, [sp, #16]
 1858 05f0 08308DE5 		str	r3, [sp, #8]
 1859 05f4 A4029FE5 		ldr	r0, .L87
 1860              	.LVL29:
 1861              	.L63:
 119:../Bmp.c      **** 	{
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1862              		.loc 1 120 0 discriminator 1
 1863 05f8 000056E3 		cmp	r6, #0
 1864 05fc 7C00000A 		beq	.L67
 1865              		.loc 1 120 0 is_stmt 0
 1866 0600 10409DE5 		ldr	r4, [sp, #16]
 121:../Bmp.c      **** 		{
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1867              		.loc 1 122 0 is_stmt 1
 1868 0604 0C509DE5 		ldr	r5, [sp, #12]
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1869              		.loc 1 120 0
 1870 0608 A4C0A0E1 		mov	ip, r4, lsr #1
 1871              		.loc 1 122 0
 1872 060c 08308DE2 		add	r3, sp, #8
 1873 0610 880093E8 		ldmia	r3, {r3, r7}	@ phole ldm
 1874 0614 072005E2 		and	r2, r5, #7
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1875              		.loc 1 120 0
 1876 0618 C3168CE2 		add	r1, ip, #204472320
 1877 061c 019046E2 		sub	r9, r6, #1
 1878 0620 A940A0E1 		mov	r4, r9, lsr #1
 1879 0624 031081E2 		add	r1, r1, #3
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 124:../Bmp.c      **** 			if ((x + j)%2)
 125:../Bmp.c      **** 			{
 126:../Bmp.c      **** 				
 127:../Bmp.c      **** 				(*(INT8U*)ulAddr) &= 0xf0;
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 129:../Bmp.c      **** 				(*(INT8U*)ulAddr1) &= 0x0f;
 130:../Bmp.c      **** 				(*(INT8U*)ulAddr1) |= ((ucCursorBackUp[i][j/2] << 4) & 0xf0);
 131:../Bmp.c      **** 			}
 132:../Bmp.c      **** 			else
 133:../Bmp.c      **** 			{
 134:../Bmp.c      **** 				(*(INT8U*)ulAddr) = ucCursorBackUp[i][j/2];
 1880              		.loc 1 134 0
 1881 0628 833083E0 		add	r3, r3, r3, asl #1
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1882              		.loc 1 122 0
 1883 062c A7C1A0E1 		mov	ip, r7, lsr #3
 1884 0630 A290A0E1 		mov	r9, r2, lsr #1
 124:../Bmp.c      **** 			if ((x + j)%2)
 1885              		.loc 1 124 0
 1886 0634 010017E3 		tst	r7, #1
 1887              		.loc 1 134 0
 1888 0638 8350A0E1 		mov	r5, r3, asl #1
 1889 063c 014004E2 		and	r4, r4, #1
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1890              		.loc 1 122 0
 1891 0640 0CC181E0 		add	ip, r1, ip, asl #2
 1892 0644 002069E2 		rsb	r2, r9, #0
 124:../Bmp.c      **** 			if ((x + j)%2)
 1893              		.loc 1 124 0
 1894 0648 7A00000A 		beq	.L69
 127:../Bmp.c      **** 				(*(INT8U*)ulAddr) &= 0xf0;
 1895              		.loc 1 127 0
 1896 064c 0270DCE7 		ldrb	r7, [ip, r2]	@ zero_extendqisi2
 1897 0650 F08007E2 		and	r8, r7, #240
 1898 0654 0280CCE7 		strb	r8, [ip, r2]
 124:../Bmp.c      **** 			if ((x + j)%2)
 1899              		.loc 1 124 0
 1900 0658 0C909DE5 		ldr	r9, [sp, #12]
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 1901              		.loc 1 128 0
 1902 065c 83A0D0E7 		ldrb	sl, [r0, r3, asl #1]	@ zero_extendqisi2
 124:../Bmp.c      **** 			if ((x + j)%2)
 1903              		.loc 1 124 0
 1904 0660 017089E2 		add	r7, r9, #1
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 1905              		.loc 1 123 0
 1906 0664 079007E2 		and	r9, r7, #7
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 1907              		.loc 1 128 0
 1908 0668 2A8288E1 		orr	r8, r8, sl, lsr #4
 1909 066c 0280CCE7 		strb	r8, [ip, r2]
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 1910              		.loc 1 123 0
 1911 0670 A9A0A0E1 		mov	sl, r9, lsr #1
 1912 0674 A721A0E1 		mov	r2, r7, lsr #3
 1913 0678 029181E0 		add	r9, r1, r2, asl #2
 1914 067c 00A06AE2 		rsb	sl, sl, #0
 129:../Bmp.c      **** 				(*(INT8U*)ulAddr1) &= 0x0f;
 1915              		.loc 1 129 0
 1916 0680 0A70D9E7 		ldrb	r7, [r9, sl]	@ zero_extendqisi2
 1917 0684 0FC007E2 		and	ip, r7, #15
 1918 0688 0AC0C9E7 		strb	ip, [r9, sl]
 130:../Bmp.c      **** 				(*(INT8U*)ulAddr1) |= ((ucCursorBackUp[i][j/2] << 4) & 0xf0);
 1919              		.loc 1 130 0
 1920 068c 8330D0E7 		ldrb	r3, [r0, r3, asl #1]	@ zero_extendqisi2
 1921 0690 03228CE1 		orr	r2, ip, r3, asl #4
 1922 0694 0A20C9E7 		strb	r2, [r9, sl]
 1923              	.L79:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1924              		.loc 1 120 0
 1925 0698 0220A0E3 		mov	r2, #2
 1926              	.LVL30:
 1927 069c 0C309DE5 		ldr	r3, [sp, #12]
 1928 06a0 060052E1 		cmp	r2, r6
 1929 06a4 023083E0 		add	r3, r3, r2
 1930 06a8 5100002A 		bcs	.L67
 1931 06ac 000054E3 		cmp	r4, #0
 1932 06b0 0D00000A 		beq	.L84
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1933              		.loc 1 122 0
 1934 06b4 079003E2 		and	r9, r3, #7
 1935 06b8 A341A0E1 		mov	r4, r3, lsr #3
 1936 06bc A9C0A0E1 		mov	ip, r9, lsr #1
 124:../Bmp.c      **** 			if ((x + j)%2)
 1937              		.loc 1 124 0
 1938 06c0 010013E3 		tst	r3, #1
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1939              		.loc 1 122 0
 1940 06c4 044181E0 		add	r4, r1, r4, asl #2
 1941 06c8 00C06CE2 		rsb	ip, ip, #0
 1942              	.LVL31:
 124:../Bmp.c      **** 			if ((x + j)%2)
 1943              		.loc 1 124 0
 1944 06cc 5C00001A 		bne	.L80
 1945              		.loc 1 134 0
 1946 06d0 019085E2 		add	r9, r5, #1
 1947 06d4 0970D0E7 		ldrb	r7, [r0, r9]	@ zero_extendqisi2
 1948 06d8 0C70C4E7 		strb	r7, [r4, ip]
 1949              	.L81:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1950              		.loc 1 120 0
 1951 06dc 022082E2 		add	r2, r2, #2
 1952              	.LVL32:
 1953 06e0 060052E1 		cmp	r2, r6
 1954 06e4 023083E2 		add	r3, r3, #2
 1955 06e8 4100002A 		bcs	.L67
 1956              	.L84:
 1957 06ec 04608DE5 		str	r6, [sp, #4]
 1958 06f0 330000EA 		b	.L66
 1959              	.L86:
 127:../Bmp.c      **** 				(*(INT8U*)ulAddr) &= 0xf0;
 1960              		.loc 1 127 0
 1961 06f4 0C60D4E7 		ldrb	r6, [r4, ip]	@ zero_extendqisi2
 1962 06f8 F08006E2 		and	r8, r6, #240
 1963 06fc 0C80C4E7 		strb	r8, [r4, ip]
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 1964              		.loc 1 128 0
 1965 0700 A26085E0 		add	r6, r5, r2, lsr #1
 1966 0704 0690D0E7 		ldrb	r9, [r0, r6]	@ zero_extendqisi2
 124:../Bmp.c      **** 			if ((x + j)%2)
 1967              		.loc 1 124 0
 1968 0708 017083E2 		add	r7, r3, #1
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 1969              		.loc 1 128 0
 1970 070c 298288E1 		orr	r8, r8, r9, lsr #4
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 1971              		.loc 1 123 0
 1972 0710 07A007E2 		and	sl, r7, #7
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 1973              		.loc 1 128 0
 1974 0714 0C80C4E7 		strb	r8, [r4, ip]
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 1975              		.loc 1 123 0
 1976 0718 A791A0E1 		mov	r9, r7, lsr #3
 1977 071c AAA0A0E1 		mov	sl, sl, lsr #1
 1978 0720 099181E0 		add	r9, r1, r9, asl #2
 1979 0724 00A06AE2 		rsb	sl, sl, #0
 129:../Bmp.c      **** 				(*(INT8U*)ulAddr1) &= 0x0f;
 1980              		.loc 1 129 0
 1981 0728 0A40D9E7 		ldrb	r4, [r9, sl]	@ zero_extendqisi2
 1982 072c 0F7004E2 		and	r7, r4, #15
 1983 0730 0A70C9E7 		strb	r7, [r9, sl]
 130:../Bmp.c      **** 				(*(INT8U*)ulAddr1) |= ((ucCursorBackUp[i][j/2] << 4) & 0xf0);
 1984              		.loc 1 130 0
 1985 0734 0660D0E7 		ldrb	r6, [r0, r6]	@ zero_extendqisi2
 1986 0738 06C287E1 		orr	ip, r7, r6, asl #4
 1987 073c 0AC0C9E7 		strb	ip, [r9, sl]
 1988              	.L65:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1989              		.loc 1 120 0
 1990 0740 02C083E2 		add	ip, r3, #2
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1991              		.loc 1 122 0
 1992 0744 07700CE2 		and	r7, ip, #7
 1993 0748 AC61A0E1 		mov	r6, ip, lsr #3
 1994 074c A740A0E1 		mov	r4, r7, lsr #1
 124:../Bmp.c      **** 			if ((x + j)%2)
 1995              		.loc 1 124 0
 1996 0750 01001CE3 		tst	ip, #1
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1997              		.loc 1 120 0
 1998 0754 022082E2 		add	r2, r2, #2
 1999              	.LVL33:
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 2000              		.loc 1 122 0
 2001 0758 066181E0 		add	r6, r1, r6, asl #2
 2002 075c 004064E2 		rsb	r4, r4, #0
 124:../Bmp.c      **** 			if ((x + j)%2)
 2003              		.loc 1 124 0
 2004 0760 3000000A 		beq	.L74
 127:../Bmp.c      **** 				(*(INT8U*)ulAddr) &= 0xf0;
 2005              		.loc 1 127 0
 2006 0764 04A0D6E7 		ldrb	sl, [r6, r4]	@ zero_extendqisi2
 2007 0768 F0800AE2 		and	r8, sl, #240
 2008 076c 0480C6E7 		strb	r8, [r6, r4]
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 2009              		.loc 1 128 0
 2010 0770 A27085E0 		add	r7, r5, r2, lsr #1
 2011 0774 07A0D0E7 		ldrb	sl, [r0, r7]	@ zero_extendqisi2
 124:../Bmp.c      **** 			if ((x + j)%2)
 2012              		.loc 1 124 0
 2013 0778 033083E2 		add	r3, r3, #3
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 2014              		.loc 1 123 0
 2015 077c 079003E2 		and	r9, r3, #7
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 2016              		.loc 1 128 0
 2017 0780 2A8288E1 		orr	r8, r8, sl, lsr #4
 2018 0784 0480C6E7 		strb	r8, [r6, r4]
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 2019              		.loc 1 123 0
 2020 0788 A331A0E1 		mov	r3, r3, lsr #3
 2021 078c A990A0E1 		mov	r9, r9, lsr #1
 2022 0790 033181E0 		add	r3, r1, r3, asl #2
 2023 0794 009069E2 		rsb	r9, r9, #0
 129:../Bmp.c      **** 				(*(INT8U*)ulAddr1) &= 0x0f;
 2024              		.loc 1 129 0
 2025 0798 0940D3E7 		ldrb	r4, [r3, r9]	@ zero_extendqisi2
 2026 079c 0F4004E2 		and	r4, r4, #15
 2027 07a0 0940C3E7 		strb	r4, [r3, r9]
 130:../Bmp.c      **** 				(*(INT8U*)ulAddr1) |= ((ucCursorBackUp[i][j/2] << 4) & 0xf0);
 2028              		.loc 1 130 0
 2029 07a4 0760D0E7 		ldrb	r6, [r0, r7]	@ zero_extendqisi2
 2030 07a8 064284E1 		orr	r4, r4, r6, asl #4
 2031 07ac 0940C3E7 		strb	r4, [r3, r9]
 2032              	.L82:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 2033              		.loc 1 120 0
 2034 07b0 04609DE5 		ldr	r6, [sp, #4]
 2035 07b4 022082E2 		add	r2, r2, #2
 2036              	.LVL34:
 2037 07b8 060052E1 		cmp	r2, r6
 2038 07bc 02308CE2 		add	r3, ip, #2
 2039 07c0 0A00002A 		bcs	.L85
 2040              	.L66:
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 2041              		.loc 1 122 0
 2042 07c4 077003E2 		and	r7, r3, #7
 2043 07c8 A341A0E1 		mov	r4, r3, lsr #3
 2044 07cc A760A0E1 		mov	r6, r7, lsr #1
 124:../Bmp.c      **** 			if ((x + j)%2)
 2045              		.loc 1 124 0
 2046 07d0 010013E3 		tst	r3, #1
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 2047              		.loc 1 122 0
 2048 07d4 044181E0 		add	r4, r1, r4, asl #2
 2049 07d8 00C066E2 		rsb	ip, r6, #0
 124:../Bmp.c      **** 			if ((x + j)%2)
 2050              		.loc 1 124 0
 2051 07dc C4FFFF1A 		bne	.L86
 2052              		.loc 1 134 0
 2053 07e0 A29085E0 		add	r9, r5, r2, lsr #1
 2054 07e4 0970D0E7 		ldrb	r7, [r0, r9]	@ zero_extendqisi2
 2055 07e8 0C70C4E7 		strb	r7, [r4, ip]
 2056 07ec D3FFFFEA 		b	.L65
 2057              	.L85:
 2058 07f0 04609DE5 		ldr	r6, [sp, #4]
 2059              	.LVL35:
 2060              	.L67:
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2061              		.loc 1 118 0
 2062 07f4 08509DE5 		ldr	r5, [sp, #8]
 2063 07f8 10208DE2 		add	r2, sp, #16
 2064 07fc 840092E8 		ldmia	r2, {r2, r7}	@ phole ldm
 2065 0800 015085E2 		add	r5, r5, #1
 2066 0804 059D82E2 		add	r9, r2, #320
 2067 0808 050057E1 		cmp	r7, r5
 2068 080c 08508DE5 		str	r5, [sp, #8]
 2069              	.LVL36:
 2070 0810 10908DE5 		str	r9, [sp, #16]
 2071 0814 77FFFF8A 		bhi	.L63
 2072              	.LVL37:
 2073              	.L61:
 135:../Bmp.c      **** 			}
 136:../Bmp.c      **** 			
 137:../Bmp.c      **** 		}
 138:../Bmp.c      **** 	}
 139:../Bmp.c      **** }
 2074              		.loc 1 139 0
 2075 0818 1CD08DE2 		add	sp, sp, #28
 2076 081c F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 2077 0820 08D08DE2 		add	sp, sp, #8
 2078 0824 1EFF2FE1 		bx	lr
 2079              	.L74:
 134:../Bmp.c      **** 				(*(INT8U*)ulAddr) = ucCursorBackUp[i][j/2];
 2080              		.loc 1 134 0
 2081 0828 A27085E0 		add	r7, r5, r2, lsr #1
 2082 082c 0730D0E7 		ldrb	r3, [r0, r7]	@ zero_extendqisi2
 2083 0830 0430C6E7 		strb	r3, [r6, r4]
 2084 0834 DDFFFFEA 		b	.L82
 2085              	.LVL38:
 2086              	.L69:
 2087 0838 8370D0E7 		ldrb	r7, [r0, r3, asl #1]	@ zero_extendqisi2
 2088 083c 0270CCE7 		strb	r7, [ip, r2]
 2089 0840 94FFFFEA 		b	.L79
 2090              	.LVL39:
 2091              	.L80:
 127:../Bmp.c      **** 				(*(INT8U*)ulAddr) &= 0xf0;
 2092              		.loc 1 127 0
 2093 0844 0CA0D4E7 		ldrb	sl, [r4, ip]	@ zero_extendqisi2
 2094 0848 F0800AE2 		and	r8, sl, #240
 2095 084c 0C80C4E7 		strb	r8, [r4, ip]
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 2096              		.loc 1 128 0
 2097 0850 01A085E2 		add	sl, r5, #1
 2098 0854 0A90D0E7 		ldrb	r9, [r0, sl]	@ zero_extendqisi2
 124:../Bmp.c      **** 			if ((x + j)%2)
 2099              		.loc 1 124 0
 2100 0858 0C709DE5 		ldr	r7, [sp, #12]
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 2101              		.loc 1 128 0
 2102 085c 04908DE5 		str	r9, [sp, #4]
 2103 0860 04909DE5 		ldr	r9, [sp, #4]
 124:../Bmp.c      **** 			if ((x + j)%2)
 2104              		.loc 1 124 0
 2105 0864 037087E2 		add	r7, r7, #3
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 2106              		.loc 1 128 0
 2107 0868 298288E1 		orr	r8, r8, r9, lsr #4
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 2108              		.loc 1 123 0
 2109 086c 079007E2 		and	r9, r7, #7
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 2110              		.loc 1 128 0
 2111 0870 0C80C4E7 		strb	r8, [r4, ip]
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 2112              		.loc 1 123 0
 2113 0874 A741A0E1 		mov	r4, r7, lsr #3
 2114 0878 A970A0E1 		mov	r7, r9, lsr #1
 2115 087c 00C067E2 		rsb	ip, r7, #0
 2116 0880 044181E0 		add	r4, r1, r4, asl #2
 129:../Bmp.c      **** 				(*(INT8U*)ulAddr1) &= 0x0f;
 2117              		.loc 1 129 0
 2118 0884 0C80D4E7 		ldrb	r8, [r4, ip]	@ zero_extendqisi2
 2119 0888 0F9008E2 		and	r9, r8, #15
 2120 088c 0C90C4E7 		strb	r9, [r4, ip]
 130:../Bmp.c      **** 				(*(INT8U*)ulAddr1) |= ((ucCursorBackUp[i][j/2] << 4) & 0xf0);
 2121              		.loc 1 130 0
 2122 0890 0A80D0E7 		ldrb	r8, [r0, sl]	@ zero_extendqisi2
 2123 0894 087289E1 		orr	r7, r9, r8, asl #4
 2124 0898 0C70C4E7 		strb	r7, [r4, ip]
 2125 089c 8EFFFFEA 		b	.L81
 2126              	.L88:
 2127              		.align	2
 2128              	.L87:
 2129 08a0 00000000 		.word	ucCursorBackUp
 2130              		.cfi_endproc
 2131              	.LFE2:
 2133              		.align	2
 2134              		.global	CursorInit
 2136              	CursorInit:
 2137              	.LFB3:
 140:../Bmp.c      **** 
 141:../Bmp.c      **** /*********************************************************************************************
 142:../Bmp.c      **** * name:		CursorInit()
 143:../Bmp.c      **** * func:		cursor init
 144:../Bmp.c      **** * para:		none
 145:../Bmp.c      **** * ret:		none
 146:../Bmp.c      **** * modify:
 147:../Bmp.c      **** * comment:		
 148:../Bmp.c      **** *********************************************************************************************/
 149:../Bmp.c      **** void CursorInit(void)
 150:../Bmp.c      **** {
 2138              		.loc 1 150 0
 2139              		.cfi_startproc
 2140              		@ Function supports interworking.
 2141              		@ args = 0, pretend = 0, frame = 16
 2142              		@ frame_needed = 1, uses_anonymous_args = 0
 2143 08a4 0DC0A0E1 		mov	ip, sp
 2144              	.LCFI9:
 2145              		.cfi_def_cfa_register 12
 2146 08a8 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2147              	.LBB8:
 2148              	.LBB11:
 2149              	.LBB14:
 151:../Bmp.c      **** 	ulMouseX = 0;
 152:../Bmp.c      **** 	ulMouseY = 0;
 153:../Bmp.c      **** 	CursorView(ulMouseX, ulMouseY);
 154:../Bmp.c      **** }
 155:../Bmp.c      **** 
 156:../Bmp.c      **** /*********************************************************************************************
 157:../Bmp.c      **** * name:		CursorPush()
 158:../Bmp.c      **** * func:		cursor push
 159:../Bmp.c      **** * para:		none
 160:../Bmp.c      **** * ret:		none
 161:../Bmp.c      **** * modify:
 162:../Bmp.c      **** * comment:		
 163:../Bmp.c      **** *********************************************************************************************/
 164:../Bmp.c      **** void CursorPush(INT16U x, INT16U y)
 165:../Bmp.c      **** {
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2150              		.loc 1 166 0
 2151 08ac 68529FE5 		ldr	r5, .L120
 2152              		.cfi_offset 14, -8
 2153              		.cfi_offset 13, -12
 2154              		.cfi_offset 11, -16
 2155              		.cfi_offset 10, -20
 2156              		.cfi_offset 9, -24
 2157              		.cfi_offset 8, -28
 2158              		.cfi_offset 7, -32
 2159              		.cfi_offset 6, -36
 2160              		.cfi_offset 5, -40
 2161              		.cfi_offset 4, -44
 2162              	.LBE14:
 2163              	.LBE11:
 2164              	.LBE8:
 150:../Bmp.c      **** {
 2165              		.loc 1 150 0
 2166 08b0 04B04CE2 		sub	fp, ip, #4
 2167              	.LCFI10:
 2168              		.cfi_def_cfa 11, 4
 2169 08b4 1CD04DE2 		sub	sp, sp, #28
 2170              	.LBB25:
 2171              	.LBB10:
 2172              	.LBB15:
 2173              		.loc 1 166 0
 2174 08b8 083085E2 		add	r3, r5, #8
 2175 08bc 030093E8 		ldmia	r3, {r0, r1}
 2176 08c0 0D20A0E1 		mov	r2, sp
 2177 08c4 030082E8 		stmia	r2, {r0, r1}
 2178              	.LBE15:
 2179              	.LBE10:
 2180              	.LBE25:
 151:../Bmp.c      **** 	ulMouseX = 0;
 2181              		.loc 1 151 0
 2182 08c8 50429FE5 		ldr	r4, .L120+4
 152:../Bmp.c      **** 	ulMouseY = 0;
 2183              		.loc 1 152 0
 2184 08cc 50C29FE5 		ldr	ip, .L120+8
 2185              	.LBB26:
 2186              	.LBB18:
 2187              	.LBB13:
 2188              		.loc 1 166 0
 2189 08d0 0000A0E3 		mov	r0, #0
 2190              	.LBE13:
 2191              	.LBE18:
 2192              	.LBE26:
 151:../Bmp.c      **** 	ulMouseX = 0;
 2193              		.loc 1 151 0
 2194 08d4 00E0A0E3 		mov	lr, #0	@ movhi
 2195              	.LBB27:
 2196              	.LBB9:
 2197              	.LBB16:
 2198              		.loc 1 166 0
 2199 08d8 0C0095E8 		ldmia	r5, {r2, r3}
 2200 08dc 0010A0E1 		mov	r1, r0
 2201              	.LBE16:
 2202              	.LBE9:
 2203              	.LBE27:
 151:../Bmp.c      **** 	ulMouseX = 0;
 2204              		.loc 1 151 0
 2205 08e0 B0E0C4E1 		strh	lr, [r4, #0]	@ movhi
 152:../Bmp.c      **** 	ulMouseY = 0;
 2206              		.loc 1 152 0
 2207 08e4 B0E0CCE1 		strh	lr, [ip, #0]	@ movhi
 2208              	.LVL40:
 2209              	.LBB28:
 2210              	.LBB19:
 2211              	.LBB12:
 2212              		.loc 1 166 0
 2213 08e8 FEFFFFEB 		bl	BitmapPush
 2214              	.LVL41:
 2215              	.LBE12:
 2216              	.LBE19:
 2217              	.LBB20:
 2218              	.LBB21:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2219              		.loc 1 59 0
 2220 08ec B400D5E1 		ldrh	r0, [r5, #4]
 2221 08f0 000050E3 		cmp	r0, #0
 2222 08f4 38000BE5 		str	r0, [fp, #-56]
 2223              	.LBE21:
 2224              	.LBE20:
 2225              	.LBB23:
 2226              	.LBB17:
 2227              		.loc 1 166 0
 2228 08f8 B240D5E1 		ldrh	r4, [r5, #2]
 2229 08fc 0C3095E5 		ldr	r3, [r5, #12]
 2230              	.LVL42:
 2231              	.LBE17:
 2232              	.LBE23:
 2233              	.LBB24:
 2234              	.LBB22:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2235              		.loc 1 59 0
 2236 0900 8200000A 		beq	.L89
 2237 0904 0010A0E3 		mov	r1, #0
 2238 0908 30100BE5 		str	r1, [fp, #-48]
 2239 090c 34300BE5 		str	r3, [fp, #-52]
 2240 0910 0190A0E1 		mov	r9, r1
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2241              		.loc 1 65 0
 2242 0914 0FC2A0E3 		mov	ip, #-268435456
 2243              	.LVL43:
 2244              	.L91:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2245              		.loc 1 61 0
 2246 0918 000054E3 		cmp	r4, #0
 2247 091c 7100000A 		beq	.L94
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2248              		.loc 1 63 0
 2249 0920 34104BE2 		sub	r1, fp, #52
 2250 0924 060091E8 		ldmia	r1, {r1, r2}	@ phole ldm
 2251 0928 0130D1E4 		ldrb	r3, [r1], #1	@ zero_extendqisi2
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2252              		.loc 1 65 0
 2253 092c A200A0E1 		mov	r0, r2, lsr #1
 2254 0930 C32680E2 		add	r2, r0, #204472320
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2255              		.loc 1 63 0
 2256 0934 FF0053E3 		cmp	r3, #255
 2257 0938 010044E2 		sub	r0, r4, #1
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2258              		.loc 1 65 0
 2259 093c 962C82E2 		add	r2, r2, #38400
 2260 0940 030000E2 		and	r0, r0, #3
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2261              		.loc 1 63 0
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2262              		.loc 1 65 0
 2263 0944 00509215 		ldrne	r5, [r2, #0]
 2264 0948 0F52C513 		bicne	r5, r5, #-268435456
 2265 094c 033E8511 		orrne	r3, r5, r3, asl #28
 2266 0950 00308215 		strne	r3, [r2, #0]
 2267              	.L96:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2268              		.loc 1 61 0
 2269 0954 0130A0E3 		mov	r3, #1
 2270              	.LVL44:
 2271 0958 040053E1 		cmp	r3, r4
 2272 095c 6100002A 		bcs	.L94
 2273 0960 000050E3 		cmp	r0, #0
 2274 0964 2800000A 		beq	.L93
 2275 0968 030050E1 		cmp	r0, r3
 2276 096c 1600000A 		beq	.L114
 2277 0970 020050E3 		cmp	r0, #2
 2278 0974 0600000A 		beq	.L115
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2279              		.loc 1 63 0
 2280 0978 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2281 097c FF0050E3 		cmp	r0, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2282              		.loc 1 65 0
 2283 0980 00509215 		ldrne	r5, [r2, #0]
 2284 0984 0F54C513 		bicne	r5, r5, #251658240
 2285 0988 000C8511 		orrne	r0, r5, r0, asl #24
 2286 098c 00008215 		strne	r0, [r2, #0]
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2287              		.loc 1 61 0
 2288 0990 013083E2 		add	r3, r3, #1
 2289              	.LVL45:
 2290              	.L115:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2291              		.loc 1 63 0
 2292 0994 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2293 0998 FF0050E3 		cmp	r0, #255
 2294 099c 0900000A 		beq	.L101
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2295              		.loc 1 65 0
 2296 09a0 A351A0E1 		mov	r5, r3, lsr #3
 2297 09a4 057192E7 		ldr	r7, [r2, r5, asl #2]
 2298 09a8 076003E2 		and	r6, r3, #7
 2299 09ac 0661A0E1 		mov	r6, r6, asl #2
 2300 09b0 3C66C7E1 		bic	r6, r7, ip, lsr r6
 2301 09b4 0370E0E1 		mvn	r7, r3
 2302 09b8 077007E2 		and	r7, r7, #7
 2303 09bc 0771A0E1 		mov	r7, r7, asl #2
 2304 09c0 100786E1 		orr	r0, r6, r0, asl r7
 2305 09c4 050182E7 		str	r0, [r2, r5, asl #2]
 2306              	.L101:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2307              		.loc 1 61 0
 2308 09c8 013083E2 		add	r3, r3, #1
 2309              	.LVL46:
 2310              	.L114:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2311              		.loc 1 63 0
 2312 09cc 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2313 09d0 FF0050E3 		cmp	r0, #255
 2314 09d4 0900000A 		beq	.L104
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2315              		.loc 1 65 0
 2316 09d8 A351A0E1 		mov	r5, r3, lsr #3
 2317 09dc 057192E7 		ldr	r7, [r2, r5, asl #2]
 2318 09e0 076003E2 		and	r6, r3, #7
 2319 09e4 0661A0E1 		mov	r6, r6, asl #2
 2320 09e8 3C66C7E1 		bic	r6, r7, ip, lsr r6
 2321 09ec 0370E0E1 		mvn	r7, r3
 2322 09f0 077007E2 		and	r7, r7, #7
 2323 09f4 0771A0E1 		mov	r7, r7, asl #2
 2324 09f8 100786E1 		orr	r0, r6, r0, asl r7
 2325 09fc 050182E7 		str	r0, [r2, r5, asl #2]
 2326              	.L104:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2327              		.loc 1 61 0
 2328 0a00 013083E2 		add	r3, r3, #1
 2329              	.LVL47:
 2330 0a04 040053E1 		cmp	r3, r4
 2331 0a08 3600002A 		bcs	.L94
 2332              	.L93:
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2333              		.loc 1 65 0
 2334 0a0c 0300E0E1 		mvn	r0, r3
 2335 0a10 076000E2 		and	r6, r0, #7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2336              		.loc 1 63 0
 2337 0a14 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2338              	.LVL48:
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2339              		.loc 1 65 0
 2340 0a18 A351A0E1 		mov	r5, r3, lsr #3
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2341              		.loc 1 63 0
 2342 0a1c FF0050E3 		cmp	r0, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2343              		.loc 1 65 0
 2344 0a20 05819217 		ldrne	r8, [r2, r5, asl #2]
 2345 0a24 077003E2 		and	r7, r3, #7
 2346 0a28 0771A0E1 		mov	r7, r7, asl #2
 2347 0a2c 3C77C811 		bicne	r7, r8, ip, lsr r7
 2348 0a30 0661A0E1 		mov	r6, r6, asl #2
 2349 0a34 10768711 		orrne	r7, r7, r0, asl r6
 2350 0a38 05718217 		strne	r7, [r2, r5, asl #2]
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2351              		.loc 1 61 0
 2352 0a3c 010083E2 		add	r0, r3, #1
 2353              	.LVL49:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2354              		.loc 1 63 0
 2355 0a40 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2356              		.loc 1 65 0
 2357 0a44 0080E0E1 		mvn	r8, r0
 2358 0a48 077000E2 		and	r7, r0, #7
 2359 0a4c 076008E2 		and	r6, r8, #7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2360              		.loc 1 63 0
 2361 0a50 FF0053E3 		cmp	r3, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2362              		.loc 1 65 0
 2363 0a54 A051A0E1 		mov	r5, r0, lsr #3
 2364 0a58 0771A0E1 		mov	r7, r7, asl #2
 2365 0a5c 0661A0E1 		mov	r6, r6, asl #2
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2366              		.loc 1 63 0
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2367              		.loc 1 65 0
 2368 0a60 05819217 		ldrne	r8, [r2, r5, asl #2]
 2369 0a64 3C77C811 		bicne	r7, r8, ip, lsr r7
 2370 0a68 13868711 		orrne	r8, r7, r3, asl r6
 2371 0a6c 05818217 		strne	r8, [r2, r5, asl #2]
 2372              	.L107:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2373              		.loc 1 63 0
 2374 0a70 0150D1E5 		ldrb	r5, [r1, #1]	@ zero_extendqisi2
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2375              		.loc 1 61 0
 2376 0a74 017080E2 		add	r7, r0, #1
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2377              		.loc 1 63 0
 2378 0a78 FF0055E3 		cmp	r5, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2379              		.loc 1 65 0
 2380 0a7c A761A0E1 		mov	r6, r7, lsr #3
 2381 0a80 06A19217 		ldrne	sl, [r2, r6, asl #2]
 2382 0a84 078007E2 		and	r8, r7, #7
 2383 0a88 0881A0E1 		mov	r8, r8, asl #2
 2384 0a8c 3C88CA11 		bicne	r8, sl, ip, lsr r8
 2385 0a90 0770E0E1 		mvn	r7, r7
 2386 0a94 077007E2 		and	r7, r7, #7
 2387 0a98 0771A0E1 		mov	r7, r7, asl #2
 2388 0a9c 15878811 		orrne	r8, r8, r5, asl r7
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2389              		.loc 1 61 0
 2390 0aa0 033080E2 		add	r3, r0, #3
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2391              		.loc 1 65 0
 2392 0aa4 06818217 		strne	r8, [r2, r6, asl #2]
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2393              		.loc 1 61 0
 2394 0aa8 020080E2 		add	r0, r0, #2
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2395              		.loc 1 65 0
 2396 0aac 0050E0E1 		mvn	r5, r0
 2397 0ab0 A061A0E1 		mov	r6, r0, lsr #3
 2398 0ab4 077000E2 		and	r7, r0, #7
 2399 0ab8 070005E2 		and	r0, r5, #7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2400              		.loc 1 63 0
 2401 0abc 0250D1E5 		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 2402 0ac0 FF0055E3 		cmp	r5, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2403              		.loc 1 65 0
 2404 0ac4 06819217 		ldrne	r8, [r2, r6, asl #2]
 2405 0ac8 0771A0E1 		mov	r7, r7, asl #2
 2406 0acc 3C77C811 		bicne	r7, r8, ip, lsr r7
 2407 0ad0 0001A0E1 		mov	r0, r0, asl #2
 2408 0ad4 15708711 		orrne	r7, r7, r5, asl r0
 2409 0ad8 06718217 		strne	r7, [r2, r6, asl #2]
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2410              		.loc 1 61 0
 2411 0adc 040053E1 		cmp	r3, r4
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2412              		.loc 1 63 0
 2413 0ae0 031081E2 		add	r1, r1, #3
 2414              	.LVL50:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2415              		.loc 1 61 0
 2416 0ae4 C8FFFF3A 		bcc	.L93
 2417              	.LVL51:
 2418              	.L94:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2419              		.loc 1 59 0
 2420 0ae8 38201BE5 		ldr	r2, [fp, #-56]
 2421 0aec 34004BE2 		sub	r0, fp, #52
 2422 0af0 090090E8 		ldmia	r0, {r0, r3}	@ phole ldm
 2423 0af4 019089E2 		add	r9, r9, #1
 2424              	.LVL52:
 2425 0af8 090052E1 		cmp	r2, r9
 2426 0afc 041080E0 		add	r1, r0, r4
 2427 0b00 052D83E2 		add	r2, r3, #320
 2428 0b04 34100BE5 		str	r1, [fp, #-52]
 2429 0b08 30200BE5 		str	r2, [fp, #-48]
 2430 0b0c 81FFFF8A 		bhi	.L91
 2431              	.LVL53:
 2432              	.L89:
 2433              	.LBE22:
 2434              	.LBE24:
 2435              	.LBE28:
 154:../Bmp.c      **** }
 2436              		.loc 1 154 0
 2437 0b10 28D04BE2 		sub	sp, fp, #40
 2438 0b14 F06F9DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 2439 0b18 1EFF2FE1 		bx	lr
 2440              	.L121:
 2441              		.align	2
 2442              	.L120:
 2443 0b1c 00000000 		.word	.LANCHOR0
 2444 0b20 00000000 		.word	ulMouseX
 2445 0b24 00000000 		.word	ulMouseY
 2446              		.cfi_endproc
 2447              	.LFE3:
 2449              		.align	2
 2450              		.global	CursorPush
 2452              	CursorPush:
 2453              	.LFB4:
 165:../Bmp.c      **** {
 2454              		.loc 1 165 0
 2455              		.cfi_startproc
 2456              		@ Function supports interworking.
 2457              		@ args = 0, pretend = 0, frame = 0
 2458              		@ frame_needed = 1, uses_anonymous_args = 0
 2459              	.LVL54:
 2460 0b28 0DC0A0E1 		mov	ip, sp
 2461              	.LCFI11:
 2462              		.cfi_def_cfa_register 12
 2463 0b2c 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 2464              		.loc 1 166 0
 2465 0b30 38309FE5 		ldr	r3, .L123
 165:../Bmp.c      **** {
 2466              		.loc 1 165 0
 2467 0b34 04B04CE2 		sub	fp, ip, #4
 2468              		.cfi_offset 14, -8
 2469              		.cfi_offset 13, -12
 2470              		.cfi_offset 11, -16
 2471              		.cfi_offset 4, -20
 2472              	.LCFI12:
 2473              		.cfi_def_cfa 11, 4
 2474 0b38 0CD04DE2 		sub	sp, sp, #12
 2475              		.loc 1 166 0
 2476 0b3c 082083E2 		add	r2, r3, #8
 165:../Bmp.c      **** {
 2477              		.loc 1 165 0
 2478 0b40 00E0A0E1 		mov	lr, r0
 2479 0b44 01C0A0E1 		mov	ip, r1
 2480              		.loc 1 166 0
 2481 0b48 030092E8 		ldmia	r2, {r0, r1}
 2482              	.LVL55:
 2483 0b4c 0D40A0E1 		mov	r4, sp
 2484 0b50 0C0093E8 		ldmia	r3, {r2, r3}
 2485 0b54 030084E8 		stmia	r4, {r0, r1}
 2486 0b58 0E00A0E1 		mov	r0, lr
 2487 0b5c 0C10A0E1 		mov	r1, ip
 2488 0b60 FEFFFFEB 		bl	BitmapPush
 167:../Bmp.c      **** }
 2489              		.loc 1 167 0
 2490 0b64 10D04BE2 		sub	sp, fp, #16
 2491 0b68 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 2492 0b6c 1EFF2FE1 		bx	lr
 2493              	.L124:
 2494              		.align	2
 2495              	.L123:
 2496 0b70 00000000 		.word	.LANCHOR0
 2497              		.cfi_endproc
 2498              	.LFE4:
 2500              		.align	2
 2501              		.global	CursorPop
 2503              	CursorPop:
 2504              	.LFB5:
 168:../Bmp.c      **** 
 169:../Bmp.c      **** /*********************************************************************************************
 170:../Bmp.c      **** * name:		CursorPop()
 171:../Bmp.c      **** * func:		cursor pop
 172:../Bmp.c      **** * para:		none
 173:../Bmp.c      **** * ret:		none
 174:../Bmp.c      **** * modify:
 175:../Bmp.c      **** * comment:		
 176:../Bmp.c      **** *********************************************************************************************/
 177:../Bmp.c      **** void CursorPop()
 178:../Bmp.c      **** {
 2505              		.loc 1 178 0
 2506              		.cfi_startproc
 2507              		@ Function supports interworking.
 2508              		@ args = 0, pretend = 0, frame = 0
 2509              		@ frame_needed = 1, uses_anonymous_args = 0
 2510 0b74 0DC0A0E1 		mov	ip, sp
 2511              	.LCFI13:
 2512              		.cfi_def_cfa_register 12
 2513 0b78 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 179:../Bmp.c      **** 	BitmapPop(ulMouseX, ulMouseY, Stru_Bitmap_gbMouse);
 2514              		.loc 1 179 0
 2515 0b7c 40309FE5 		ldr	r3, .L126
 178:../Bmp.c      **** {
 2516              		.loc 1 178 0
 2517 0b80 04B04CE2 		sub	fp, ip, #4
 2518              		.cfi_offset 14, -8
 2519              		.cfi_offset 13, -12
 2520              		.cfi_offset 11, -16
 2521              	.LCFI14:
 2522              		.cfi_def_cfa 11, 4
 2523 0b84 08D04DE2 		sub	sp, sp, #8
 2524              		.loc 1 179 0
 2525 0b88 080083E2 		add	r0, r3, #8
 2526 0b8c 030090E8 		ldmia	r0, {r0, r1}
 2527 0b90 30E09FE5 		ldr	lr, .L126+4
 2528 0b94 30C09FE5 		ldr	ip, .L126+8
 2529 0b98 0D20A0E1 		mov	r2, sp
 2530 0b9c B0E0DEE1 		ldrh	lr, [lr, #0]
 2531 0ba0 B0C0DCE1 		ldrh	ip, [ip, #0]
 2532 0ba4 030082E8 		stmia	r2, {r0, r1}
 2533 0ba8 0E00A0E1 		mov	r0, lr
 2534 0bac 0C0093E8 		ldmia	r3, {r2, r3}
 2535 0bb0 0C10A0E1 		mov	r1, ip
 2536 0bb4 FEFFFFEB 		bl	BitmapPop
 180:../Bmp.c      **** }
 2537              		.loc 1 180 0
 2538 0bb8 0CD04BE2 		sub	sp, fp, #12
 2539 0bbc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2540 0bc0 1EFF2FE1 		bx	lr
 2541              	.L127:
 2542              		.align	2
 2543              	.L126:
 2544 0bc4 00000000 		.word	.LANCHOR0
 2545 0bc8 00000000 		.word	ulMouseX
 2546 0bcc 00000000 		.word	ulMouseY
 2547              		.cfi_endproc
 2548              	.LFE5:
 2550              		.align	2
 2551              		.global	CursorView
 2553              	CursorView:
 2554              	.LFB6:
 181:../Bmp.c      **** 
 182:../Bmp.c      **** /*********************************************************************************************
 183:../Bmp.c      **** * name:		CursorView()
 184:../Bmp.c      **** * func:		cursor display
 185:../Bmp.c      **** * para:		none
 186:../Bmp.c      **** * ret:		none
 187:../Bmp.c      **** * modify:
 188:../Bmp.c      **** * comment:		
 189:../Bmp.c      **** *********************************************************************************************/
 190:../Bmp.c      **** void CursorView(INT16U x, INT16U y)
 191:../Bmp.c      **** {
 2555              		.loc 1 191 0
 2556              		.cfi_startproc
 2557              		@ Function supports interworking.
 2558              		@ args = 0, pretend = 0, frame = 32
 2559              		@ frame_needed = 1, uses_anonymous_args = 0
 2560              	.LVL56:
 2561 0bd0 0DC0A0E1 		mov	ip, sp
 2562              	.LCFI15:
 2563              		.cfi_def_cfa_register 12
 2564 0bd4 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2565              	.LBB33:
 2566              	.LBB36:
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2567              		.loc 1 166 0
 2568 0bd8 E0429FE5 		ldr	r4, .L159
 2569              		.cfi_offset 14, -8
 2570              		.cfi_offset 13, -12
 2571              		.cfi_offset 11, -16
 2572              		.cfi_offset 10, -20
 2573              		.cfi_offset 9, -24
 2574              		.cfi_offset 8, -28
 2575              		.cfi_offset 7, -32
 2576              		.cfi_offset 6, -36
 2577              		.cfi_offset 5, -40
 2578              		.cfi_offset 4, -44
 2579              	.LBE36:
 2580              	.LBE33:
 2581              		.loc 1 191 0
 2582 0bdc 04B04CE2 		sub	fp, ip, #4
 2583              	.LCFI16:
 2584              		.cfi_def_cfa 11, 4
 2585 0be0 2CD04DE2 		sub	sp, sp, #44
 2586              	.LBB39:
 2587              	.LBB35:
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2588              		.loc 1 166 0
 2589 0be4 083084E2 		add	r3, r4, #8
 2590              	.LBE35:
 2591              	.LBE39:
 2592              		.loc 1 191 0
 2593 0be8 30000BE5 		str	r0, [fp, #-48]
 2594              	.LVL57:
 2595 0bec 0150A0E1 		mov	r5, r1
 2596              	.LVL58:
 2597              	.LBB40:
 2598              	.LBB37:
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2599              		.loc 1 166 0
 2600 0bf0 030093E8 		ldmia	r3, {r0, r1}
 2601              	.LVL59:
 2602 0bf4 0D80A0E1 		mov	r8, sp
 2603 0bf8 0C0094E8 		ldmia	r4, {r2, r3}
 2604 0bfc 030088E8 		stmia	r8, {r0, r1}
 2605 0c00 0510A0E1 		mov	r1, r5
 2606 0c04 30001BE5 		ldr	r0, [fp, #-48]
 2607 0c08 FEFFFFEB 		bl	BitmapPush
 2608              	.LVL60:
 2609              	.LBE37:
 2610              	.LBE40:
 2611              	.LBB41:
 2612              	.LBB44:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2613              		.loc 1 59 0
 2614 0c0c B4C0D4E1 		ldrh	ip, [r4, #4]
 2615              	.LBE44:
 2616              	.LBE41:
 2617              	.LBB47:
 2618              	.LBB34:
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2619              		.loc 1 166 0
 2620 0c10 B200D4E1 		ldrh	r0, [r4, #2]
 2621              	.LBE34:
 2622              	.LBE47:
 2623              	.LBB48:
 2624              	.LBB43:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2625              		.loc 1 59 0
 2626 0c14 00005CE3 		cmp	ip, #0
 2627 0c18 48C00BE5 		str	ip, [fp, #-72]
 2628              	.LBE43:
 2629              	.LBE48:
 2630              	.LBB49:
 2631              	.LBB38:
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2632              		.loc 1 166 0
 2633 0c1c 40000BE5 		str	r0, [fp, #-64]
 2634 0c20 0C3094E5 		ldr	r3, [r4, #12]
 2635              	.LVL61:
 2636              	.LBE38:
 2637              	.LBE49:
 2638              	.LBB50:
 2639              	.LBB45:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2640              		.loc 1 59 0
 2641 0c24 A200000A 		beq	.L128
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2642              		.loc 1 65 0
 2643 0c28 30201BE5 		ldr	r2, [fp, #-48]
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2644              		.loc 1 59 0
 2645 0c2c 058185E0 		add	r8, r5, r5, asl #2
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2646              		.loc 1 65 0
 2647 0c30 0210E0E1 		mvn	r1, r2
 190:../Bmp.c      **** void CursorView(INT16U x, INT16U y)
 2648              		.loc 1 190 0
 2649 0c34 30501BE5 		ldr	r5, [fp, #-48]
 2650              	.LVL62:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2651              		.loc 1 59 0
 2652 0c38 0873A0E1 		mov	r7, r8, asl #6
 2653              	.LBE45:
 2654              	.LBE50:
 2655 0c3c 0040A0E3 		mov	r4, #0
 2656              	.LBB51:
 2657              	.LBB42:
 2658 0c40 38300BE5 		str	r3, [fp, #-56]
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2659              		.loc 1 65 0
 2660 0c44 44100BE5 		str	r1, [fp, #-68]
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2661              		.loc 1 59 0
 2662 0c48 3C700BE5 		str	r7, [fp, #-60]
 2663              	.LBE42:
 2664              	.LBE51:
 2665 0c4c 34400BE5 		str	r4, [fp, #-52]
 2666              	.LBB52:
 2667              	.LBB46:
 190:../Bmp.c      **** void CursorView(INT16U x, INT16U y)
 2668              		.loc 1 190 0
 2669 0c50 057080E0 		add	r7, r0, r5
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2670              		.loc 1 65 0
 2671 0c54 0F42A0E3 		mov	r4, #-268435456
 2672              	.LVL63:
 2673              	.L130:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2674              		.loc 1 61 0
 2675 0c58 40501BE5 		ldr	r5, [fp, #-64]
 2676 0c5c 000055E3 		cmp	r5, #0
 2677 0c60 8600000A 		beq	.L133
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2678              		.loc 1 65 0
 2679 0c64 3CC01BE5 		ldr	ip, [fp, #-60]
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2680              		.loc 1 63 0
 2681 0c68 38101BE5 		ldr	r1, [fp, #-56]
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2682              		.loc 1 65 0
 2683 0c6c AC80A0E1 		mov	r8, ip, lsr #1
 2684 0c70 30C01BE5 		ldr	ip, [fp, #-48]
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2685              		.loc 1 63 0
 2686 0c74 0130D1E4 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 2687 0c78 0C00E0E1 		mvn	r0, ip
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2688              		.loc 1 65 0
 2689 0c7c C32688E2 		add	r2, r8, #204472320
 2690 0c80 07E080E0 		add	lr, r0, r7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2691              		.loc 1 63 0
 2692 0c84 FF0053E3 		cmp	r3, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2693              		.loc 1 65 0
 2694 0c88 962C82E2 		add	r2, r2, #38400
 2695 0c8c 03000EE2 		and	r0, lr, #3
 2696 0c90 44501B05 		ldreq	r5, [fp, #-68]
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2697              		.loc 1 63 0
 2698 0c94 0B00000A 		beq	.L135
 2699 0c98 0C60A0E1 		mov	r6, ip
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2700              		.loc 1 65 0
 2701 0c9c AC81A0E1 		mov	r8, ip, lsr #3
 2702 0ca0 075006E2 		and	r5, r6, #7
 2703 0ca4 08C192E7 		ldr	ip, [r2, r8, asl #2]
 2704 0ca8 05E1A0E1 		mov	lr, r5, asl #2
 2705 0cac 34CECCE1 		bic	ip, ip, r4, lsr lr
 2706 0cb0 44E01BE5 		ldr	lr, [fp, #-68]
 2707 0cb4 07600EE2 		and	r6, lr, #7
 2708 0cb8 0661A0E1 		mov	r6, r6, asl #2
 2709 0cbc 13568CE1 		orr	r5, ip, r3, asl r6
 2710 0cc0 085182E7 		str	r5, [r2, r8, asl #2]
 2711 0cc4 0E50A0E1 		mov	r5, lr
 2712              	.L135:
 2713              	.LVL64:
 2714 0cc8 30301BE5 		ldr	r3, [fp, #-48]
 2715 0ccc 013083E2 		add	r3, r3, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2716              		.loc 1 61 0
 2717 0cd0 070053E1 		cmp	r3, r7
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2718              		.loc 1 65 0
 2719 0cd4 01C045E2 		sub	ip, r5, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2720              		.loc 1 61 0
 2721 0cd8 6800000A 		beq	.L133
 2722 0cdc 000050E3 		cmp	r0, #0
 2723 0ce0 2F00000A 		beq	.L132
 2724 0ce4 010050E3 		cmp	r0, #1
 2725 0ce8 1D00000A 		beq	.L153
 2726 0cec 020050E3 		cmp	r0, #2
 2727 0cf0 0D00000A 		beq	.L154
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2728              		.loc 1 63 0
 2729 0cf4 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2730 0cf8 FF0050E3 		cmp	r0, #255
 2731 0cfc 0800000A 		beq	.L137
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2732              		.loc 1 65 0
 2733 0d00 A351A0E1 		mov	r5, r3, lsr #3
 2734 0d04 058192E7 		ldr	r8, [r2, r5, asl #2]
 2735 0d08 07E003E2 		and	lr, r3, #7
 2736 0d0c 0E61A0E1 		mov	r6, lr, asl #2
 2737 0d10 3466C8E1 		bic	r6, r8, r4, lsr r6
 2738 0d14 07E00CE2 		and	lr, ip, #7
 2739 0d18 0E81A0E1 		mov	r8, lr, asl #2
 2740 0d1c 100886E1 		orr	r0, r6, r0, asl r8
 2741 0d20 050182E7 		str	r0, [r2, r5, asl #2]
 2742              	.L137:
 2743 0d24 013083E2 		add	r3, r3, #1
 2744 0d28 01C04CE2 		sub	ip, ip, #1
 2745              	.L154:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2746              		.loc 1 63 0
 2747 0d2c 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2748 0d30 FF0050E3 		cmp	r0, #255
 2749 0d34 0800000A 		beq	.L140
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2750              		.loc 1 65 0
 2751 0d38 A351A0E1 		mov	r5, r3, lsr #3
 2752 0d3c 058192E7 		ldr	r8, [r2, r5, asl #2]
 2753 0d40 07E003E2 		and	lr, r3, #7
 2754 0d44 0E61A0E1 		mov	r6, lr, asl #2
 2755 0d48 3466C8E1 		bic	r6, r8, r4, lsr r6
 2756 0d4c 07E00CE2 		and	lr, ip, #7
 2757 0d50 0E81A0E1 		mov	r8, lr, asl #2
 2758 0d54 100886E1 		orr	r0, r6, r0, asl r8
 2759 0d58 050182E7 		str	r0, [r2, r5, asl #2]
 2760              	.L140:
 2761 0d5c 013083E2 		add	r3, r3, #1
 2762 0d60 01C04CE2 		sub	ip, ip, #1
 2763              	.L153:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2764              		.loc 1 63 0
 2765 0d64 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2766 0d68 FF0050E3 		cmp	r0, #255
 2767 0d6c 0800000A 		beq	.L143
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2768              		.loc 1 65 0
 2769 0d70 A351A0E1 		mov	r5, r3, lsr #3
 2770 0d74 058192E7 		ldr	r8, [r2, r5, asl #2]
 2771 0d78 07E003E2 		and	lr, r3, #7
 2772 0d7c 0E61A0E1 		mov	r6, lr, asl #2
 2773 0d80 3466C8E1 		bic	r6, r8, r4, lsr r6
 2774 0d84 07E00CE2 		and	lr, ip, #7
 2775 0d88 0E81A0E1 		mov	r8, lr, asl #2
 2776 0d8c 100886E1 		orr	r0, r6, r0, asl r8
 2777 0d90 050182E7 		str	r0, [r2, r5, asl #2]
 2778              	.L143:
 2779 0d94 013083E2 		add	r3, r3, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2780              		.loc 1 61 0
 2781 0d98 070053E1 		cmp	r3, r7
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2782              		.loc 1 65 0
 2783 0d9c 01C04CE2 		sub	ip, ip, #1
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2784              		.loc 1 61 0
 2785 0da0 3600000A 		beq	.L133
 2786              	.L132:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2787              		.loc 1 63 0
 2788 0da4 0100D1E4 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2789              	.LVL65:
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2790              		.loc 1 65 0
 2791 0da8 A3E1A0E1 		mov	lr, r3, lsr #3
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2792              		.loc 1 63 0
 2793 0dac FF0050E3 		cmp	r0, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2794              		.loc 1 65 0
 2795 0db0 079003E2 		and	r9, r3, #7
 2796 0db4 0EA19217 		ldrne	sl, [r2, lr, asl #2]
 2797 0db8 0951A0E1 		mov	r5, r9, asl #2
 2798 0dbc 3455CA11 		bicne	r5, sl, r4, lsr r5
 2799 0dc0 07600CE2 		and	r6, ip, #7
 2800 0dc4 0681A0E1 		mov	r8, r6, asl #2
 2801 0dc8 10588511 		orrne	r5, r5, r0, asl r8
 2802 0dcc 0E518217 		strne	r5, [r2, lr, asl #2]
 2803 0dd0 010083E2 		add	r0, r3, #1
 2804              	.LVL66:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2805              		.loc 1 63 0
 2806 0dd4 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2807              		.loc 1 65 0
 2808 0dd8 01C04CE2 		sub	ip, ip, #1
 2809 0ddc 079000E2 		and	r9, r0, #7
 2810 0de0 07600CE2 		and	r6, ip, #7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2811              		.loc 1 63 0
 2812 0de4 FF0053E3 		cmp	r3, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2813              		.loc 1 65 0
 2814 0de8 A051A0E1 		mov	r5, r0, lsr #3
 2815 0dec 0981A0E1 		mov	r8, r9, asl #2
 2816 0df0 0661A0E1 		mov	r6, r6, asl #2
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2817              		.loc 1 63 0
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2818              		.loc 1 65 0
 2819 0df4 05A19217 		ldrne	sl, [r2, r5, asl #2]
 2820 0df8 3488CA11 		bicne	r8, sl, r4, lsr r8
 2821 0dfc 13968811 		orrne	r9, r8, r3, asl r6
 2822 0e00 05918217 		strne	r9, [r2, r5, asl #2]
 2823              	.L146:
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2824              		.loc 1 63 0
 2825 0e04 01E0D1E5 		ldrb	lr, [r1, #1]	@ zero_extendqisi2
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2826              		.loc 1 65 0
 2827 0e08 019080E2 		add	r9, r0, #1
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2828              		.loc 1 63 0
 2829 0e0c FF005EE3 		cmp	lr, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2830              		.loc 1 65 0
 2831 0e10 A961A0E1 		mov	r6, r9, lsr #3
 2832 0e14 06A19217 		ldrne	sl, [r2, r6, asl #2]
 2833 0e18 078009E2 		and	r8, r9, #7
 2834 0e1c 0881A0E1 		mov	r8, r8, asl #2
 2835 0e20 3488CA11 		bicne	r8, sl, r4, lsr r8
 2836 0e24 01504CE2 		sub	r5, ip, #1
 2837 0e28 079005E2 		and	r9, r5, #7
 2838 0e2c 0991A0E1 		mov	r9, r9, asl #2
 2839 0e30 1E898811 		orrne	r8, r8, lr, asl r9
 2840 0e34 033080E2 		add	r3, r0, #3
 2841 0e38 06818217 		strne	r8, [r2, r6, asl #2]
 2842 0e3c 020080E2 		add	r0, r0, #2
 2843 0e40 075000E2 		and	r5, r0, #7
 2844 0e44 A061A0E1 		mov	r6, r0, lsr #3
 2845 0e48 0501A0E1 		mov	r0, r5, asl #2
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2846              		.loc 1 63 0
 2847 0e4c 0250D1E5 		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 2848 0e50 FF0055E3 		cmp	r5, #255
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2849              		.loc 1 65 0
 2850 0e54 06A19217 		ldrne	sl, [r2, r6, asl #2]
 2851 0e58 3400CA11 		bicne	r0, sl, r4, lsr r0
 2852 0e5c 02E04CE2 		sub	lr, ip, #2
 2853 0e60 07800EE2 		and	r8, lr, #7
 2854 0e64 08E1A0E1 		mov	lr, r8, asl #2
 2855 0e68 150E8011 		orrne	r0, r0, r5, asl lr
 2856 0e6c 06018217 		strne	r0, [r2, r6, asl #2]
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2857              		.loc 1 61 0
 2858 0e70 070053E1 		cmp	r3, r7
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 2859              		.loc 1 63 0
 2860 0e74 031081E2 		add	r1, r1, #3
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 2861              		.loc 1 65 0
 2862 0e78 03C04CE2 		sub	ip, ip, #3
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 2863              		.loc 1 61 0
 2864 0e7c C8FFFF1A 		bne	.L132
 2865              	.L133:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 2866              		.loc 1 59 0
 2867 0e80 34801BE5 		ldr	r8, [fp, #-52]
 2868 0e84 3C304BE2 		sub	r3, fp, #60
 2869 0e88 084093E8 		ldmia	r3, {r3, lr}	@ phole ldm
 2870 0e8c 48001BE5 		ldr	r0, [fp, #-72]
 2871 0e90 40201BE5 		ldr	r2, [fp, #-64]
 2872 0e94 018088E2 		add	r8, r8, #1
 2873 0e98 02108EE0 		add	r1, lr, r2
 2874 0e9c 05CD83E2 		add	ip, r3, #320
 2875 0ea0 000058E1 		cmp	r8, r0
 2876 0ea4 34800BE5 		str	r8, [fp, #-52]
 2877              	.LVL67:
 2878 0ea8 38100BE5 		str	r1, [fp, #-56]
 2879 0eac 3CC00BE5 		str	ip, [fp, #-60]
 2880 0eb0 68FFFF3A 		bcc	.L130
 2881              	.LVL68:
 2882              	.L128:
 2883              	.LBE46:
 2884              	.LBE52:
 192:../Bmp.c      **** 	CursorPush(x, y);
 193:../Bmp.c      **** 	BitmapView(x, y, Stru_Bitmap_gbMouse);
 194:../Bmp.c      **** }
 2885              		.loc 1 194 0
 2886 0eb4 28D04BE2 		sub	sp, fp, #40
 2887 0eb8 F06F9DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 2888 0ebc 1EFF2FE1 		bx	lr
 2889              	.L160:
 2890              		.align	2
 2891              	.L159:
 2892 0ec0 00000000 		.word	.LANCHOR0
 2893              		.cfi_endproc
 2894              	.LFE6:
 2896              		.global	ucMouseMap
 2897              		.global	Stru_Bitmap_gbMouse
 2898              		.comm	ulMouseX,2,2
 2899              		.comm	ulMouseY,2,2
 2900              		.comm	ucCursorBackUp,120,4
 2901              		.section	.rodata
 2902              		.align	2
 2905              	ucMouseMap:
 2906 0000 0F       		.byte	15
 2907 0001 FF       		.byte	-1
 2908 0002 FF       		.byte	-1
 2909 0003 FF       		.byte	-1
 2910 0004 FF       		.byte	-1
 2911 0005 FF       		.byte	-1
 2912 0006 FF       		.byte	-1
 2913 0007 FF       		.byte	-1
 2914 0008 FF       		.byte	-1
 2915 0009 FF       		.byte	-1
 2916 000a FF       		.byte	-1
 2917 000b FF       		.byte	-1
 2918 000c 0F       		.byte	15
 2919 000d 0F       		.byte	15
 2920 000e FF       		.byte	-1
 2921 000f FF       		.byte	-1
 2922 0010 FF       		.byte	-1
 2923 0011 FF       		.byte	-1
 2924 0012 FF       		.byte	-1
 2925 0013 FF       		.byte	-1
 2926 0014 FF       		.byte	-1
 2927 0015 FF       		.byte	-1
 2928 0016 FF       		.byte	-1
 2929 0017 FF       		.byte	-1
 2930 0018 0F       		.byte	15
 2931 0019 00       		.byte	0
 2932 001a 0F       		.byte	15
 2933 001b FF       		.byte	-1
 2934 001c FF       		.byte	-1
 2935 001d FF       		.byte	-1
 2936 001e FF       		.byte	-1
 2937 001f FF       		.byte	-1
 2938 0020 FF       		.byte	-1
 2939 0021 FF       		.byte	-1
 2940 0022 FF       		.byte	-1
 2941 0023 FF       		.byte	-1
 2942 0024 0F       		.byte	15
 2943 0025 00       		.byte	0
 2944 0026 00       		.byte	0
 2945 0027 0F       		.byte	15
 2946 0028 FF       		.byte	-1
 2947 0029 FF       		.byte	-1
 2948 002a FF       		.byte	-1
 2949 002b FF       		.byte	-1
 2950 002c FF       		.byte	-1
 2951 002d FF       		.byte	-1
 2952 002e FF       		.byte	-1
 2953 002f FF       		.byte	-1
 2954 0030 0F       		.byte	15
 2955 0031 00       		.byte	0
 2956 0032 00       		.byte	0
 2957 0033 00       		.byte	0
 2958 0034 0F       		.byte	15
 2959 0035 FF       		.byte	-1
 2960 0036 FF       		.byte	-1
 2961 0037 FF       		.byte	-1
 2962 0038 FF       		.byte	-1
 2963 0039 FF       		.byte	-1
 2964 003a FF       		.byte	-1
 2965 003b FF       		.byte	-1
 2966 003c 0F       		.byte	15
 2967 003d 00       		.byte	0
 2968 003e 00       		.byte	0
 2969 003f 00       		.byte	0
 2970 0040 00       		.byte	0
 2971 0041 0F       		.byte	15
 2972 0042 FF       		.byte	-1
 2973 0043 FF       		.byte	-1
 2974 0044 FF       		.byte	-1
 2975 0045 FF       		.byte	-1
 2976 0046 FF       		.byte	-1
 2977 0047 FF       		.byte	-1
 2978 0048 0F       		.byte	15
 2979 0049 00       		.byte	0
 2980 004a 00       		.byte	0
 2981 004b 00       		.byte	0
 2982 004c 00       		.byte	0
 2983 004d 00       		.byte	0
 2984 004e 0F       		.byte	15
 2985 004f FF       		.byte	-1
 2986 0050 FF       		.byte	-1
 2987 0051 FF       		.byte	-1
 2988 0052 FF       		.byte	-1
 2989 0053 FF       		.byte	-1
 2990 0054 0F       		.byte	15
 2991 0055 00       		.byte	0
 2992 0056 00       		.byte	0
 2993 0057 00       		.byte	0
 2994 0058 00       		.byte	0
 2995 0059 00       		.byte	0
 2996 005a 00       		.byte	0
 2997 005b 0F       		.byte	15
 2998 005c FF       		.byte	-1
 2999 005d FF       		.byte	-1
 3000 005e FF       		.byte	-1
 3001 005f FF       		.byte	-1
 3002 0060 0F       		.byte	15
 3003 0061 00       		.byte	0
 3004 0062 00       		.byte	0
 3005 0063 00       		.byte	0
 3006 0064 00       		.byte	0
 3007 0065 00       		.byte	0
 3008 0066 00       		.byte	0
 3009 0067 00       		.byte	0
 3010 0068 0F       		.byte	15
 3011 0069 FF       		.byte	-1
 3012 006a FF       		.byte	-1
 3013 006b FF       		.byte	-1
 3014 006c 0F       		.byte	15
 3015 006d 00       		.byte	0
 3016 006e 00       		.byte	0
 3017 006f 00       		.byte	0
 3018 0070 00       		.byte	0
 3019 0071 00       		.byte	0
 3020 0072 00       		.byte	0
 3021 0073 00       		.byte	0
 3022 0074 00       		.byte	0
 3023 0075 0F       		.byte	15
 3024 0076 FF       		.byte	-1
 3025 0077 FF       		.byte	-1
 3026 0078 0F       		.byte	15
 3027 0079 00       		.byte	0
 3028 007a 00       		.byte	0
 3029 007b 00       		.byte	0
 3030 007c 00       		.byte	0
 3031 007d 00       		.byte	0
 3032 007e 00       		.byte	0
 3033 007f 00       		.byte	0
 3034 0080 00       		.byte	0
 3035 0081 00       		.byte	0
 3036 0082 0F       		.byte	15
 3037 0083 FF       		.byte	-1
 3038 0084 0F       		.byte	15
 3039 0085 00       		.byte	0
 3040 0086 00       		.byte	0
 3041 0087 00       		.byte	0
 3042 0088 00       		.byte	0
 3043 0089 00       		.byte	0
 3044 008a 00       		.byte	0
 3045 008b 0F       		.byte	15
 3046 008c 0F       		.byte	15
 3047 008d 0F       		.byte	15
 3048 008e 0F       		.byte	15
 3049 008f 0F       		.byte	15
 3050 0090 0F       		.byte	15
 3051 0091 00       		.byte	0
 3052 0092 00       		.byte	0
 3053 0093 0F       		.byte	15
 3054 0094 00       		.byte	0
 3055 0095 00       		.byte	0
 3056 0096 00       		.byte	0
 3057 0097 0F       		.byte	15
 3058 0098 FF       		.byte	-1
 3059 0099 FF       		.byte	-1
 3060 009a FF       		.byte	-1
 3061 009b FF       		.byte	-1
 3062 009c 0F       		.byte	15
 3063 009d 00       		.byte	0
 3064 009e 0F       		.byte	15
 3065 009f FF       		.byte	-1
 3066 00a0 0F       		.byte	15
 3067 00a1 00       		.byte	0
 3068 00a2 00       		.byte	0
 3069 00a3 00       		.byte	0
 3070 00a4 0F       		.byte	15
 3071 00a5 FF       		.byte	-1
 3072 00a6 FF       		.byte	-1
 3073 00a7 FF       		.byte	-1
 3074 00a8 0F       		.byte	15
 3075 00a9 0F       		.byte	15
 3076 00aa FF       		.byte	-1
 3077 00ab FF       		.byte	-1
 3078 00ac 0F       		.byte	15
 3079 00ad 00       		.byte	0
 3080 00ae 00       		.byte	0
 3081 00af 00       		.byte	0
 3082 00b0 0F       		.byte	15
 3083 00b1 FF       		.byte	-1
 3084 00b2 FF       		.byte	-1
 3085 00b3 FF       		.byte	-1
 3086 00b4 0F       		.byte	15
 3087 00b5 FF       		.byte	-1
 3088 00b6 FF       		.byte	-1
 3089 00b7 FF       		.byte	-1
 3090 00b8 FF       		.byte	-1
 3091 00b9 0F       		.byte	15
 3092 00ba 00       		.byte	0
 3093 00bb 00       		.byte	0
 3094 00bc 00       		.byte	0
 3095 00bd 0F       		.byte	15
 3096 00be FF       		.byte	-1
 3097 00bf FF       		.byte	-1
 3098 00c0 FF       		.byte	-1
 3099 00c1 FF       		.byte	-1
 3100 00c2 FF       		.byte	-1
 3101 00c3 FF       		.byte	-1
 3102 00c4 FF       		.byte	-1
 3103 00c5 0F       		.byte	15
 3104 00c6 00       		.byte	0
 3105 00c7 00       		.byte	0
 3106 00c8 00       		.byte	0
 3107 00c9 0F       		.byte	15
 3108 00ca FF       		.byte	-1
 3109 00cb FF       		.byte	-1
 3110 00cc FF       		.byte	-1
 3111 00cd FF       		.byte	-1
 3112 00ce FF       		.byte	-1
 3113 00cf FF       		.byte	-1
 3114 00d0 FF       		.byte	-1
 3115 00d1 FF       		.byte	-1
 3116 00d2 0F       		.byte	15
 3117 00d3 00       		.byte	0
 3118 00d4 00       		.byte	0
 3119 00d5 00       		.byte	0
 3120 00d6 0F       		.byte	15
 3121 00d7 FF       		.byte	-1
 3122 00d8 FF       		.byte	-1
 3123 00d9 FF       		.byte	-1
 3124 00da FF       		.byte	-1
 3125 00db FF       		.byte	-1
 3126 00dc FF       		.byte	-1
 3127 00dd FF       		.byte	-1
 3128 00de 0F       		.byte	15
 3129 00df 00       		.byte	0
 3130 00e0 00       		.byte	0
 3131 00e1 00       		.byte	0
 3132 00e2 0F       		.byte	15
 3133 00e3 FF       		.byte	-1
 3134 00e4 FF       		.byte	-1
 3135 00e5 FF       		.byte	-1
 3136 00e6 FF       		.byte	-1
 3137 00e7 FF       		.byte	-1
 3138 00e8 FF       		.byte	-1
 3139 00e9 FF       		.byte	-1
 3140 00ea FF       		.byte	-1
 3141 00eb 0F       		.byte	15
 3142 00ec 0F       		.byte	15
 3143 00ed 0F       		.byte	15
 3144 00ee FF       		.byte	-1
 3145 00ef FF       		.byte	-1
 3146              		.data
 3147              		.align	2
 3148              		.set	.LANCHOR0,. + 0
 3151              	Stru_Bitmap_gbMouse:
 3152 0000 10       		.byte	16
 3153 0001 04       		.byte	4
 3154 0002 0C00     		.short	12
 3155 0004 1400     		.short	20
 3156 0006 0000     		.space	2
 3157 0008 FF000000 		.word	255
 3158 000c 00000000 		.word	ucMouseMap
 3159              		.text
 3160              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Bmp.c
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:1208   .text:00000000 $a
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:1211   .text:00000000 BitmapView
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:1487   .text:000002c4 BitmapPush
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:1805   .text:000005a8 $d
                            *COM*:00000002 ulMouseX
                            *COM*:00000002 ulMouseY
                            *COM*:00000078 ucCursorBackUp
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:1811   .text:000005b4 $a
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:1814   .text:000005b4 BitmapPop
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2129   .text:000008a0 $d
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2133   .text:000008a4 $a
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2136   .text:000008a4 CursorInit
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2443   .text:00000b1c $d
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2449   .text:00000b28 $a
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2452   .text:00000b28 CursorPush
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2496   .text:00000b70 $d
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2500   .text:00000b74 $a
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2503   .text:00000b74 CursorPop
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2544   .text:00000bc4 $d
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2550   .text:00000bd0 $a
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2553   .text:00000bd0 CursorView
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2892   .text:00000ec0 $d
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2905   .rodata:00000000 ucMouseMap
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:3151   .data:00000000 Stru_Bitmap_gbMouse
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:2902   .rodata:00000000 $d
C:\Users\pjper\AppData\Local\Temp\ccGEcJzT.s:3147   .data:00000000 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
