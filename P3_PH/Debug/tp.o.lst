   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"tp.c"
  21              	.Ltext0:
  22              		.file 1 "../tp.c"
 2973              		.align	2
 2974              		.global	TSInt
 2976              	TSInt:
 2977              	.LFB0:
   1:../tp.c       **** /*********************************************************************************************
   2:../tp.c       **** * File£º	tp.c
   3:../tp.c       **** * Author:	embest	
   4:../tp.c       **** * Desc£º	LCD touch screen control function
   5:../tp.c       **** * History:	
   6:../tp.c       **** *********************************************************************************************/
   7:../tp.c       **** 
   8:../tp.c       **** /*--- include files ---*/
   9:../tp.c       **** #include <string.h>
  10:../tp.c       **** #include "tp.h"
  11:../tp.c       **** #include "lcd.h"
  12:../tp.c       **** #include "codigos_eventos.h"
  13:../tp.c       **** #include "cola_depuracion.h"
  14:../tp.c       **** 
  15:../tp.c       **** void TSInt(void) __attribute__((interrupt("IRQ")));
  16:../tp.c       **** 
  17:../tp.c       **** /*--- function code ---*/
  18:../tp.c       **** /*********************************************************************************************
  19:../tp.c       **** * name:		TSInt
  20:../tp.c       **** * func:		TouchScreen interrupt handler function
  21:../tp.c       **** * para:		none
  22:../tp.c       **** * ret:		none
  23:../tp.c       **** * modify:
  24:../tp.c       **** * comment:		
  25:../tp.c       **** ********************************************************************************************/
  26:../tp.c       **** void TSInt(void)
  27:../tp.c       **** {
 2978              		.loc 1 27 0
 2979              		.cfi_startproc
 2980              		@ Interrupt Service Routine.
 2981              		@ args = 0, pretend = 0, frame = 0
 2982              		@ frame_needed = 1, uses_anonymous_args = 0
 2983 0000 04C02DE5 		str	ip, [sp, #-4]!
 2984 0004 0DC0A0E1 		mov	ip, sp
 2985              	.LCFI0:
 2986              		.cfi_def_cfa_register 12
 2987 0008 3FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, r4, r5, fp, ip, lr, pc}
  28:../tp.c       **** 	rINTMSK |= (BIT_EINT2);	//Deshabilitamos interrupcion linea eint1 en vector de mascaras para el an
 2988              		.loc 1 28 0
 2989 000c 1E46A0E3 		mov	r4, #31457280
 2990              		.cfi_offset 14, -8
 2991              		.cfi_offset 13, -12
 2992              		.cfi_offset 11, -16
 2993              		.cfi_offset 5, -20
 2994              		.cfi_offset 4, -24
 2995              		.cfi_offset 3, -28
 2996              		.cfi_offset 2, -32
 2997              		.cfi_offset 1, -36
 2998              		.cfi_offset 0, -40
 2999 0010 0C1094E5 		ldr	r1, [r4, #12]
 3000 0014 022581E3 		orr	r2, r1, #8388608
  29:../tp.c       **** 	push_debug(ev_tsp, no_info);
 3001              		.loc 1 29 0
 3002 0018 1100A0E3 		mov	r0, #17
  27:../tp.c       **** {
 3003              		.loc 1 27 0
 3004 001c 04B04CE2 		sub	fp, ip, #4
 3005              	.LCFI1:
 3006              		.cfi_def_cfa 11, 4
 3007              		.loc 1 29 0
 3008 0020 20109FE5 		ldr	r1, .L2
  28:../tp.c       **** 	rINTMSK |= (BIT_EINT2);	//Deshabilitamos interrupcion linea eint1 en vector de mascaras para el an
 3009              		.loc 1 28 0
 3010 0024 0C2084E5 		str	r2, [r4, #12]
 3011              		.loc 1 29 0
 3012 0028 FEFFFFEB 		bl	push_debug
  30:../tp.c       **** 	rI_ISPC |= BIT_EINT2;	//Limpiar bit pendiente en INTPND
 3013              		.loc 1 30 0
 3014 002c 240094E5 		ldr	r0, [r4, #36]
 3015 0030 023580E3 		orr	r3, r0, #8388608
 3016 0034 243084E5 		str	r3, [r4, #36]
  31:../tp.c       **** 	//El código que había aquí ha sido eliminado porque no nos hace falta
  32:../tp.c       **** }
 3017              		.loc 1 32 0
 3018 0038 24D04BE2 		sub	sp, fp, #36
 3019 003c 3F689DE8 		ldmfd	sp, {r0, r1, r2, r3, r4, r5, fp, sp, lr}
 3020 0040 04C09DE4 		ldmfd	sp!, {ip}
 3021 0044 04F05EE2 		subs	pc, lr, #4
 3022              	.L3:
 3023              		.align	2
 3024              	.L2:
 3025 0048 AAAAAAAA 		.word	-1431655766
 3026              		.cfi_endproc
 3027              	.LFE0:
 3029              		.align	2
 3030              		.global	tsp_resetear
 3032              	tsp_resetear:
 3033              	.LFB1:
  33:../tp.c       **** 			
  34:../tp.c       **** /*********************************************************************************************
  35:../tp.c       **** * name:		tsp_resetear()
  36:../tp.c       **** * func:		Rehabilita las interrupciones en tsp
  37:../tp.c       **** * para:		none
  38:../tp.c       **** * ret:		none
  39:../tp.c       **** * modify:
  40:../tp.c       **** * comment:
  41:../tp.c       **** *********************************************************************************************/
  42:../tp.c       **** void tsp_resetear(void)
  43:../tp.c       **** {
 3034              		.loc 1 43 0
 3035              		.cfi_startproc
 3036              		@ Function supports interworking.
 3037              		@ args = 0, pretend = 0, frame = 0
 3038              		@ frame_needed = 0, uses_anonymous_args = 0
 3039              		@ link register save eliminated.
  44:../tp.c       **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND */
  45:../tp.c       **** 	rI_ISPC   |= (BIT_EINT2);			// borra el bit pendiente en INTPND
 3040              		.loc 1 45 0
 3041 004c 1E36A0E3 		mov	r3, #31457280
 3042 0050 240093E5 		ldr	r0, [r3, #36]
 3043 0054 022580E3 		orr	r2, r0, #8388608
 3044 0058 242083E5 		str	r2, [r3, #36]
  46:../tp.c       **** 	rINTMSK    &= ~(BIT_EINT2); 	// habilitamos interrupcion linea eint4567 en vector de mascaras
 3045              		.loc 1 46 0
 3046 005c 0CC093E5 		ldr	ip, [r3, #12]
 3047 0060 0215CCE3 		bic	r1, ip, #8388608
 3048 0064 0C1083E5 		str	r1, [r3, #12]
  47:../tp.c       **** 	rI_ISPC   |= (BIT_EINT2);			// borra el bit pendiente en INTPND
 3049              		.loc 1 47 0
 3050 0068 240093E5 		ldr	r0, [r3, #36]
 3051 006c 022580E3 		orr	r2, r0, #8388608
 3052 0070 242083E5 		str	r2, [r3, #36]
  48:../tp.c       **** }
 3053              		.loc 1 48 0
 3054 0074 1EFF2FE1 		bx	lr
 3055              		.cfi_endproc
 3056              	.LFE1:
 3058              		.align	2
 3059              		.global	TS_init
 3061              	TS_init:
 3062              	.LFB2:
  49:../tp.c       **** 
  50:../tp.c       **** /*********************************************************************************************
  51:../tp.c       **** * name:		TS_init
  52:../tp.c       **** * func:		initialize TouchScreen
  53:../tp.c       **** * para:		none
  54:../tp.c       **** * ret:		none
  55:../tp.c       **** * modify:
  56:../tp.c       **** * comment:		
  57:../tp.c       **** *********************************************************************************************/
  58:../tp.c       **** void __attribute__ ((optimize("O0"))) TS_init(void)
  59:../tp.c       **** {
 3063              		.loc 1 59 0
 3064              		.cfi_startproc
 3065              		@ Function supports interworking.
 3066              		@ args = 0, pretend = 0, frame = 0
 3067              		@ frame_needed = 1, uses_anonymous_args = 0
 3068 0078 0DC0A0E1 		mov	ip, sp
 3069              	.LCFI2:
 3070              		.cfi_def_cfa_register 12
 3071 007c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3072 0080 04B04CE2 		sub	fp, ip, #4
 3073              		.cfi_offset 14, -8
 3074              		.cfi_offset 13, -12
 3075              		.cfi_offset 11, -16
 3076              	.LCFI3:
 3077              		.cfi_def_cfa 11, 4
  60:../tp.c       ****     /* enable interrupt */
  61:../tp.c       **** 	rINTMOD &= ~(BIT_EINT2);		 // Configura las linas de TSP como de tipo IRQ
 3078              		.loc 1 61 0
 3079 0084 B0309FE5 		ldr	r3, .L6
 3080 0088 AC209FE5 		ldr	r2, .L6
 3081 008c 002092E5 		ldr	r2, [r2, #0]
 3082 0090 0225C2E3 		bic	r2, r2, #8388608
 3083 0094 002083E5 		str	r2, [r3, #0]
  62:../tp.c       **** 	rINTCON &= 0x1;					 // Habilita int. vectorizadas y la linea IRQ (FIQ la deja como estuviera)
 3084              		.loc 1 62 0
 3085 0098 1E36A0E3 		mov	r3, #31457280
 3086 009c 1E26A0E3 		mov	r2, #31457280
 3087 00a0 002092E5 		ldr	r2, [r2, #0]
 3088 00a4 012002E2 		and	r2, r2, #1
 3089 00a8 002083E5 		str	r2, [r3, #0]
  63:../tp.c       ****     rI_ISPC |= BIT_EINT2;            // clear pending_bit
 3090              		.loc 1 63 0
 3091 00ac 8C309FE5 		ldr	r3, .L6+4
 3092 00b0 88209FE5 		ldr	r2, .L6+4
 3093 00b4 002092E5 		ldr	r2, [r2, #0]
 3094 00b8 022582E3 		orr	r2, r2, #8388608
 3095 00bc 002083E5 		str	r2, [r3, #0]
  64:../tp.c       **** 	
  65:../tp.c       **** 	// TSPX(GPE4_Q4(-)) TSPY(GPE5_Q3(-)) TSMY(GPE6_Q2(-)) TSMX(GPE7_Q1(+)) 
  66:../tp.c       **** 	//          1               1                0                 1
  67:../tp.c       ****     rPUPE  = 0x0;	                 // Pull up
 3096              		.loc 1 67 0
 3097 00c0 7C309FE5 		ldr	r3, .L6+8
 3098 00c4 0020A0E3 		mov	r2, #0
 3099 00c8 002083E5 		str	r2, [r3, #0]
  68:../tp.c       ****     rPDATE = 0xb8;                   // should be enabled	
 3100              		.loc 1 68 0
 3101 00cc 74309FE5 		ldr	r3, .L6+12
 3102 00d0 B820A0E3 		mov	r2, #184
 3103 00d4 002083E5 		str	r2, [r3, #0]
  69:../tp.c       ****     //Delay(100);
  70:../tp.c       ****     
  71:../tp.c       ****     rEXTINT |= 0x200;                // falling edge trigger
 3104              		.loc 1 71 0
 3105 00d8 6C309FE5 		ldr	r3, .L6+16
 3106 00dc 68209FE5 		ldr	r2, .L6+16
 3107 00e0 002092E5 		ldr	r2, [r2, #0]
 3108 00e4 022C82E3 		orr	r2, r2, #512
 3109 00e8 002083E5 		str	r2, [r3, #0]
  72:../tp.c       ****     pISR_EINT2=(unsigned *)TSInt;    // set interrupt handler
 3110              		.loc 1 72 0
 3111 00ec 5C309FE5 		ldr	r3, .L6+20
 3112 00f0 5C209FE5 		ldr	r2, .L6+24
 3113 00f4 002083E5 		str	r2, [r3, #0]
  73:../tp.c       ****     
  74:../tp.c       ****     rCLKCON = 0x7ff8;                // enable clock
 3114              		.loc 1 74 0
 3115 00f8 58309FE5 		ldr	r3, .L6+28
 3116 00fc 58209FE5 		ldr	r2, .L6+32
 3117 0100 002083E5 		str	r2, [r3, #0]
  75:../tp.c       ****     rADCPSR = 0x1;//0x4;             // A/D prescaler
 3118              		.loc 1 75 0
 3119 0104 54309FE5 		ldr	r3, .L6+36
 3120 0108 0120A0E3 		mov	r2, #1
 3121 010c 002083E5 		str	r2, [r3, #0]
  76:../tp.c       ****     rINTMSK &= ~(BIT_EINT2);
 3122              		.loc 1 76 0
 3123 0110 4C309FE5 		ldr	r3, .L6+40
 3124 0114 48209FE5 		ldr	r2, .L6+40
 3125 0118 002092E5 		ldr	r2, [r2, #0]
 3126 011c 0225C2E3 		bic	r2, r2, #8388608
 3127 0120 002083E5 		str	r2, [r3, #0]
  77:../tp.c       **** 
  78:../tp.c       ****     oneTouch = 0;
 3128              		.loc 1 78 0
 3129 0124 3C309FE5 		ldr	r3, .L6+44
 3130 0128 0020A0E3 		mov	r2, #0
 3131 012c 002083E5 		str	r2, [r3, #0]
  79:../tp.c       **** }
 3132              		.loc 1 79 0
 3133 0130 0CD04BE2 		sub	sp, fp, #12
 3134 0134 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3135 0138 1EFF2FE1 		bx	lr
 3136              	.L7:
 3137              		.align	2
 3138              	.L6:
 3139 013c 0800E001 		.word	31457288
 3140 0140 2400E001 		.word	31457316
 3141 0144 3000D201 		.word	30539824
 3142 0148 2C00D201 		.word	30539820
 3143 014c 5000D201 		.word	30539856
 3144 0150 7CFF7F0C 		.word	209715068
 3145 0154 00000000 		.word	TSInt
 3146 0158 0400D801 		.word	30932996
 3147 015c F87F0000 		.word	32760
 3148 0160 0400D401 		.word	30670852
 3149 0164 0C00E001 		.word	31457292
 3150 0168 00000000 		.word	oneTouch
 3151              		.cfi_endproc
 3152              	.LFE2:
 3154              		.align	2
 3155              		.global	TS_close
 3157              	TS_close:
 3158              	.LFB3:
  80:../tp.c       **** 
  81:../tp.c       **** /*********************************************************************************************
  82:../tp.c       **** * name:		TS_close
  83:../tp.c       **** * func:		close TouchScreen
  84:../tp.c       **** * para:		none
  85:../tp.c       **** * ret:		none
  86:../tp.c       **** * modify:
  87:../tp.c       **** * comment:		
  88:../tp.c       **** *********************************************************************************************/
  89:../tp.c       **** void TS_close(void)
  90:../tp.c       **** {
 3159              		.loc 1 90 0
 3160              		.cfi_startproc
 3161              		@ Function supports interworking.
 3162              		@ args = 0, pretend = 0, frame = 0
 3163              		@ frame_needed = 0, uses_anonymous_args = 0
 3164              		@ link register save eliminated.
  91:../tp.c       **** 	/* Mask interrupt */
  92:../tp.c       **** 	rINTMSK |=BIT_GLOBAL|BIT_EINT2;
 3165              		.loc 1 92 0
 3166 016c 1E16A0E3 		mov	r1, #31457280
 3167 0170 0CC091E5 		ldr	ip, [r1, #12]
  93:../tp.c       **** 	pISR_EINT2 = (int)NULL;
 3168              		.loc 1 93 0
 3169 0174 10309FE5 		ldr	r3, .L9
  92:../tp.c       **** 	rINTMSK |=BIT_GLOBAL|BIT_EINT2;
 3170              		.loc 1 92 0
 3171 0178 12058CE3 		orr	r0, ip, #75497472
 3172              		.loc 1 93 0
 3173 017c 0020A0E3 		mov	r2, #0
  92:../tp.c       **** 	rINTMSK |=BIT_GLOBAL|BIT_EINT2;
 3174              		.loc 1 92 0
 3175 0180 0C0081E5 		str	r0, [r1, #12]
 3176              		.loc 1 93 0
 3177 0184 832003E5 		str	r2, [r3, #-131]
  94:../tp.c       **** }
 3178              		.loc 1 94 0
 3179 0188 1EFF2FE1 		bx	lr
 3180              	.L10:
 3181              		.align	2
 3182              	.L9:
 3183 018c FFFF7F0C 		.word	209715199
 3184              		.cfi_endproc
 3185              	.LFE3:
 3187              		.align	2
 3188              		.global	DesignREC
 3190              	DesignREC:
 3191              	.LFB4:
  95:../tp.c       **** 
  96:../tp.c       **** /*********************************************************************************************
  97:../tp.c       **** * name:		DesignREC
  98:../tp.c       **** * func:		confirm the coordinate rang
  99:../tp.c       **** * para:		none
 100:../tp.c       **** * ret:		none
 101:../tp.c       **** * modify:
 102:../tp.c       **** * comment:		
 103:../tp.c       **** *********************************************************************************************/
 104:../tp.c       **** void DesignREC(ULONG tx, ULONG ty)
 105:../tp.c       **** {
 3192              		.loc 1 105 0
 3193              		.cfi_startproc
 3194              		@ Function supports interworking.
 3195              		@ args = 0, pretend = 0, frame = 0
 3196              		@ frame_needed = 0, uses_anonymous_args = 0
 3197              		@ link register save eliminated.
 3198              	.LVL0:
 106:../tp.c       ****     int tm;
 107:../tp.c       ****     
 108:../tp.c       **** //  Uart_Printf("\n\r User touch coordinate(X,Y) is :");
 109:../tp.c       **** //	Uart_Printf("(%04d",tx);	
 110:../tp.c       **** //	Uart_Printf(",%04d)\n",ty);    
 111:../tp.c       ****     if(oneTouch == 0)
 3199              		.loc 1 111 0
 3200 0190 98309FE5 		ldr	r3, .L18
 3201 0194 002093E5 		ldr	r2, [r3, #0]
 3202 0198 000052E3 		cmp	r2, #0
 105:../tp.c       **** {
 3203              		.loc 1 105 0
 3204 019c 30002DE9 		stmfd	sp!, {r4, r5}
 3205              	.LCFI4:
 3206              		.cfi_def_cfa_offset 8
 3207              		.loc 1 111 0
 3208 01a0 1B00000A 		beq	.L17
 3209              		.cfi_offset 5, -4
 3210              		.cfi_offset 4, -8
 112:../tp.c       ****      {
 113:../tp.c       ****        Vx = tx;                   // Vx as Xmax
 114:../tp.c       ****        Vy = ty;                   // Vy as Ymax
 115:../tp.c       ****        oneTouch = 1;       		           
 116:../tp.c       ****     }else{
 117:../tp.c       ****     
 118:../tp.c       ****     if(Vx < tx )
 3211              		.loc 1 118 0
 3212 01a4 88209FE5 		ldr	r2, .L18+4
 3213 01a8 00C092E5 		ldr	ip, [r2, #0]
 3214 01ac 0C0050E1 		cmp	r0, ip
 3215              	.LVL1:
 119:../tp.c       ****      {
 120:../tp.c       ****        tm = tx; tx = Vx; Vx = tm; // tx as Xmin
 3216              		.loc 1 120 0
 3217 01b0 0040A081 		movhi	r4, r0
 3218 01b4 00008285 		strhi	r0, [r2, #0]
 3219 01b8 0C00A081 		movhi	r0, ip
 3220              	.LVL2:
 3221 01bc 04C0A081 		movhi	ip, r4
 3222              	.LVL3:
 121:../tp.c       ****      }
 122:../tp.c       ****     if(Vy < ty )
 3223              		.loc 1 122 0
 3224 01c0 70409FE5 		ldr	r4, .L18+8
 3225 01c4 002094E5 		ldr	r2, [r4, #0]
 3226 01c8 020051E1 		cmp	r1, r2
 3227              	.LVL4:
 123:../tp.c       ****      { 
 124:../tp.c       ****        tm = ty; ty = Vy; Vy = tm; // ty as Ymin
 3228              		.loc 1 124 0
 3229 01cc 00108485 		strhi	r1, [r4, #0]
 125:../tp.c       ****      }
 126:../tp.c       ****      
 127:../tp.c       ****     Xmax = Vx;    Xmin = tx;
 128:../tp.c       ****     Ymax = Vy;    Ymin = ty;
 129:../tp.c       ****     
 130:../tp.c       ****     oneTouch = 0;
 3230              		.loc 1 130 0
 3231 01d0 0040A0E3 		mov	r4, #0
 3232 01d4 004083E5 		str	r4, [r3, #0]
 127:../tp.c       ****     Xmax = Vx;    Xmin = tx;
 3233              		.loc 1 127 0
 3234 01d8 5C309FE5 		ldr	r3, .L18+12
 3235 01dc 00C083E5 		str	ip, [r3, #0]
 3236 01e0 58309FE5 		ldr	r3, .L18+16
 124:../tp.c       ****        tm = ty; ty = Vy; Vy = tm; // ty as Ymin
 3237              		.loc 1 124 0
 3238 01e4 0150A081 		movhi	r5, r1
 127:../tp.c       ****     Xmax = Vx;    Xmin = tx;
 3239              		.loc 1 127 0
 3240 01e8 000083E5 		str	r0, [r3, #0]
 128:../tp.c       ****     Ymax = Vy;    Ymin = ty;
 3241              		.loc 1 128 0
 3242 01ec 50C09FE5 		ldr	ip, .L18+20
 3243 01f0 50009FE5 		ldr	r0, .L18+24
 3244              	.LVL5:
 131:../tp.c       **** 	CheckTSP = 0;// has checked
 3245              		.loc 1 131 0
 3246 01f4 50309FE5 		ldr	r3, .L18+28
 124:../tp.c       ****        tm = ty; ty = Vy; Vy = tm; // ty as Ymin
 3247              		.loc 1 124 0
 3248 01f8 0210A081 		movhi	r1, r2
 3249              	.LVL6:
 3250 01fc 0520A081 		movhi	r2, r5
 3251              	.LVL7:
 128:../tp.c       ****     Ymax = Vy;    Ymin = ty;
 3252              		.loc 1 128 0
 3253 0200 00208CE5 		str	r2, [ip, #0]
 3254 0204 001080E5 		str	r1, [r0, #0]
 3255              		.loc 1 131 0
 3256 0208 004083E5 		str	r4, [r3, #0]
 3257              	.LVL8:
 3258              	.L11:
 132:../tp.c       **** 	
 133:../tp.c       **** 	}// end if(oneTouch == 0)
 134:../tp.c       **** 
 135:../tp.c       **** }
 3259              		.loc 1 135 0
 3260 020c 3000BDE8 		ldmfd	sp!, {r4, r5}
 3261 0210 1EFF2FE1 		bx	lr
 3262              	.LVL9:
 3263              	.L17:
 113:../tp.c       ****        Vx = tx;                   // Vx as Xmax
 3264              		.loc 1 113 0
 3265 0214 18209FE5 		ldr	r2, .L18+4
 114:../tp.c       ****        Vy = ty;                   // Vy as Ymax
 3266              		.loc 1 114 0
 3267 0218 18C09FE5 		ldr	ip, .L18+8
 113:../tp.c       ****        Vx = tx;                   // Vx as Xmax
 3268              		.loc 1 113 0
 3269 021c 000082E5 		str	r0, [r2, #0]
 115:../tp.c       ****        oneTouch = 1;       		           
 3270              		.loc 1 115 0
 3271 0220 0100A0E3 		mov	r0, #1
 3272              	.LVL10:
 114:../tp.c       ****        Vy = ty;                   // Vy as Ymax
 3273              		.loc 1 114 0
 3274 0224 00108CE5 		str	r1, [ip, #0]
 115:../tp.c       ****        oneTouch = 1;       		           
 3275              		.loc 1 115 0
 3276 0228 000083E5 		str	r0, [r3, #0]
 3277 022c F6FFFFEA 		b	.L11
 3278              	.L19:
 3279              		.align	2
 3280              	.L18:
 3281 0230 00000000 		.word	oneTouch
 3282 0234 00000000 		.word	Vx
 3283 0238 00000000 		.word	Vy
 3284 023c 00000000 		.word	Xmax
 3285 0240 00000000 		.word	Xmin
 3286 0244 00000000 		.word	Ymax
 3287 0248 00000000 		.word	Ymin
 3288 024c 00000000 		.word	CheckTSP
 3289              		.cfi_endproc
 3290              	.LFE4:
 3292              		.align	2
 3293              		.global	Check_Sel
 3295              	Check_Sel:
 3296              	.LFB5:
 136:../tp.c       **** 
 137:../tp.c       **** 
 138:../tp.c       **** 
 139:../tp.c       **** void Check_Sel(void)
 140:../tp.c       **** {
 3297              		.loc 1 140 0
 3298              		.cfi_startproc
 3299              		@ Function supports interworking.
 3300              		@ args = 0, pretend = 0, frame = 0
 3301              		@ frame_needed = 0, uses_anonymous_args = 0
 3302              		@ link register save eliminated.
 141:../tp.c       **** 	char yn;
 142:../tp.c       ****     
 143:../tp.c       **** 	do{
 144:../tp.c       **** 	  
 145:../tp.c       **** 	  rINTMSK |=BIT_GLOBAL|BIT_EINT2;
 3303              		.loc 1 145 0
 3304 0250 1E36A0E3 		mov	r3, #31457280
 3305 0254 0CC093E5 		ldr	ip, [r3, #12]
 146:../tp.c       **** //    Uart_Printf("\n\r Touch Screen coordinate Rang in:\n");
 147:../tp.c       **** //    Uart_Printf("   (Xmin,Ymin) is :(%04d,%04d)\n",Xmin,Ymin);	
 148:../tp.c       **** //	  Uart_Printf("   (Xmax,Ymax) is :(%04d,%04d)\n",Xmax,Ymax);	
 149:../tp.c       **** //	  Uart_Printf("\n  To use current settings. Press N/n key. ");
 150:../tp.c       **** //	  Uart_Printf("\n\n\r  Want to Set Again(Y/N)? ");	        	      
 151:../tp.c       **** //	  yn = Uart_Getch();
 152:../tp.c       ****       rI_ISPC = BIT_EINT2;              // clear pending_bit
 3306              		.loc 1 152 0
 3307 0258 0205A0E3 		mov	r0, #8388608
 145:../tp.c       **** 	  rINTMSK |=BIT_GLOBAL|BIT_EINT2;
 3308              		.loc 1 145 0
 3309 025c 12158CE3 		orr	r1, ip, #75497472
 153:../tp.c       ****       rINTMSK =~(BIT_GLOBAL|BIT_EINT2);
 3310              		.loc 1 153 0
 3311 0260 1225E0E3 		mvn	r2, #75497472
 145:../tp.c       **** 	  rINTMSK |=BIT_GLOBAL|BIT_EINT2;
 3312              		.loc 1 145 0
 3313 0264 0C1083E5 		str	r1, [r3, #12]
 152:../tp.c       ****       rI_ISPC = BIT_EINT2;              // clear pending_bit
 3314              		.loc 1 152 0
 3315 0268 240083E5 		str	r0, [r3, #36]
 3316              		.loc 1 153 0
 3317 026c 0C2083E5 		str	r2, [r3, #12]
 154:../tp.c       **** //	  if((yn == 0x59)|(yn == 0x79)|(yn == 0x4E)|(yn == 0x6E)) Uart_SendByte(yn);	  
 155:../tp.c       **** 	  if((yn == 0x59)|(yn == 0x79))
 156:../tp.c       **** 	    {
 157:../tp.c       **** //	      Uart_Printf("\n\n Touch TSP's Cornor to ensure Xmax,Ymax,Xmax,Xmin");	      
 158:../tp.c       **** 
 159:../tp.c       ****          //Init X Y rectangle
 160:../tp.c       ****           Xmax = 750;    Xmin = 200;
 161:../tp.c       ****           Ymax = 620;    Ymin = 120;
 162:../tp.c       **** 
 163:../tp.c       **** 	      oneTouch = 0;
 164:../tp.c       **** 	      CheckTSP = 1; // mask to check
 165:../tp.c       **** 	      while(CheckTSP);
 166:../tp.c       **** 	      
 167:../tp.c       **** 	    }else break;	    
 168:../tp.c       **** 	  
 169:../tp.c       **** 	}while(1);
 170:../tp.c       **** 	
 171:../tp.c       **** }
 3318              		.loc 1 171 0
 3319 0270 1EFF2FE1 		bx	lr
 3320              		.cfi_endproc
 3321              	.LFE5:
 3323              		.comm	CheckTSP,4,4
 3324              		.comm	oneTouch,4,4
 3325              		.comm	Vx,4,4
 3326              		.comm	Vy,4,4
 3327              		.comm	Xmax,4,4
 3328              		.comm	Ymax,4,4
 3329              		.comm	Xmin,4,4
 3330              		.comm	Ymin,4,4
 3331              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 tp.c
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:2973   .text:00000000 $a
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:2976   .text:00000000 TSInt
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3025   .text:00000048 $d
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3029   .text:0000004c $a
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3032   .text:0000004c tsp_resetear
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3061   .text:00000078 TS_init
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3139   .text:0000013c $d
                            *COM*:00000004 oneTouch
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3154   .text:0000016c $a
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3157   .text:0000016c TS_close
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3183   .text:0000018c $d
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3187   .text:00000190 $a
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3190   .text:00000190 DesignREC
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3281   .text:00000230 $d
                            *COM*:00000004 Vx
                            *COM*:00000004 Vy
                            *COM*:00000004 Xmax
                            *COM*:00000004 Xmin
                            *COM*:00000004 Ymax
                            *COM*:00000004 Ymin
                            *COM*:00000004 CheckTSP
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3292   .text:00000250 $a
C:\Users\pjper\AppData\Local\Temp\ccnXjIGg.s:3295   .text:00000250 Check_Sel
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
push_debug
